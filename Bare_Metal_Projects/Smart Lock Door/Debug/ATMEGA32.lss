
ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ec8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00003ec8  00003f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800170  00800170  0000406c  2**0
                  ALLOC
  3 .stab         0000ab54  00000000  00000000  0000406c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a457  00000000  00000000  0000ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00019017  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00019028  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00019064  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  00019592  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00019a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00019a93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 1a 	call	0x35da	; 0x35da <main>
      8a:	0c 94 62 1f 	jmp	0x3ec4	; 0x3ec4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <smartDoorLock_START>:
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	00 e7       	ldi	r16, 0x70	; 112
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <KEYPAD>
      a6:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <KEYPAD+0x1>
      aa:	40 91 d2 00 	lds	r20, 0x00D2	; 0x8000d2 <KEYPAD+0x2>
      ae:	50 91 d3 00 	lds	r21, 0x00D3	; 0x8000d3 <KEYPAD+0x3>
      b2:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <KEYPAD+0x4>
      b6:	70 91 d5 00 	lds	r23, 0x00D5	; 0x8000d5 <KEYPAD+0x5>
      ba:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <KEYPAD+0x6>
      be:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <KEYPAD+0x7>
      c2:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <KEYPAD_getData>
      c6:	00 00       	nop
      c8:	00 e7       	ldi	r16, 0x70	; 112
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <KEYPAD>
      d0:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <KEYPAD+0x1>
      d4:	40 91 d2 00 	lds	r20, 0x00D2	; 0x8000d2 <KEYPAD+0x2>
      d8:	50 91 d3 00 	lds	r21, 0x00D3	; 0x8000d3 <KEYPAD+0x3>
      dc:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <KEYPAD+0x4>
      e0:	70 91 d5 00 	lds	r23, 0x00D5	; 0x8000d5 <KEYPAD+0x5>
      e4:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <KEYPAD+0x6>
      e8:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <KEYPAD+0x7>
      ec:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <KEYPAD_getData>
      f0:	88 23       	and	r24, r24
      f2:	51 f3       	breq	.-44     	; 0xc8 <smartDoorLock_START+0x36>
      f4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
      f8:	83 32       	cpi	r24, 0x23	; 35
      fa:	21 f4       	brne	.+8      	; 0x104 <smartDoorLock_START+0x72>
      fc:	0e 94 c7 02 	call	0x58e	; 0x58e <smartDoorLock_FirstStart>
     100:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <smartDoorLock_getPass>
     104:	28 e0       	ldi	r18, 0x08	; 8
     106:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     10a:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     10e:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     112:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     116:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     11a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     11e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
     122:	21 e0       	ldi	r18, 0x01	; 1
     124:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     128:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     12c:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     130:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     134:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     138:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     13c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
     140:	00 00       	nop
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret

0000014c <smartDoorLock_Three_attempts>:
 * 			then return 0 else you have a three attempts then return 1.
 * @param1 : void
 * @RetVal : void
 */
uint_8 smartDoorLock_Three_attempts(void)
{
     14c:	0f 93       	push	r16
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
     156:	ad 97       	sbiw	r28, 0x2d	; 45
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	f8 94       	cli
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	0f be       	out	0x3f, r0	; 63
     160:	cd bf       	out	0x3d, r28	; 61
	uint_8 alarm1 = Zero_INIT;
     162:	19 82       	std	Y+1, r1	; 0x01
	for(uint_8 count = Zero_INIT; count < 3 ; count++)
     164:	1a 82       	std	Y+2, r1	; 0x02
     166:	04 c2       	rjmp	.+1032   	; 0x570 <__stack+0x111>
	{
		LCD_writeCMD(LCD, _LCD_CLEAR_DIS);
     168:	21 e0       	ldi	r18, 0x01	; 1
     16a:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     16e:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     172:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     176:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     17a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     17e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     182:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
		smartDoorLock_getpass();
     186:	0e 94 31 05 	call	0xa62	; 0xa62 <smartDoorLock_getpass>
		uint_8 error = Zero_INIT;
     18a:	1b 82       	std	Y+3, r1	; 0x03
		error = smartDoorLock_checkpass();
     18c:	0e 94 0b 05 	call	0xa16	; 0xa16 <smartDoorLock_checkpass>
     190:	8b 83       	std	Y+3, r24	; 0x03
		if (error == 1)
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	09 f0       	breq	.+2      	; 0x19a <smartDoorLock_Three_attempts+0x4e>
     198:	95 c0       	rjmp	.+298    	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
		{
			LCD_GoTo(LCD, ROW2,2);
     19a:	02 e0       	ldi	r16, 0x02	; 2
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     1a2:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     1a6:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     1aa:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     1ae:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     1b2:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     1b6:	0e 94 9a 12 	call	0x2534	; 0x2534 <LCD_GoTo>
			LCD_writeSTR(LCD, "Incorrect password");
     1ba:	2d ed       	ldi	r18, 0xDD	; 221
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     1c2:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     1c6:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     1ca:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     1ce:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     1d2:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     1d6:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	a8 e4       	ldi	r26, 0x48	; 72
     1e0:	b4 e4       	ldi	r27, 0x44	; 68
     1e2:	8c 83       	std	Y+4, r24	; 0x04
     1e4:	9d 83       	std	Y+5, r25	; 0x05
     1e6:	ae 83       	std	Y+6, r26	; 0x06
     1e8:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	4a e7       	ldi	r20, 0x7A	; 122
     1f0:	53 e4       	ldi	r21, 0x43	; 67
     1f2:	6c 81       	ldd	r22, Y+4	; 0x04
     1f4:	7d 81       	ldd	r23, Y+5	; 0x05
     1f6:	8e 81       	ldd	r24, Y+6	; 0x06
     1f8:	9f 81       	ldd	r25, Y+7	; 0x07
     1fa:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     1fe:	dc 01       	movw	r26, r24
     200:	cb 01       	movw	r24, r22
     202:	88 87       	std	Y+8, r24	; 0x08
     204:	99 87       	std	Y+9, r25	; 0x09
     206:	aa 87       	std	Y+10, r26	; 0x0a
     208:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	40 e8       	ldi	r20, 0x80	; 128
     210:	5f e3       	ldi	r21, 0x3F	; 63
     212:	68 85       	ldd	r22, Y+8	; 0x08
     214:	79 85       	ldd	r23, Y+9	; 0x09
     216:	8a 85       	ldd	r24, Y+10	; 0x0a
     218:	9b 85       	ldd	r25, Y+11	; 0x0b
     21a:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
     21e:	88 23       	and	r24, r24
     220:	2c f4       	brge	.+10     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
		__ticks = 1;
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	9d 87       	std	Y+13, r25	; 0x0d
     228:	8c 87       	std	Y+12, r24	; 0x0c
     22a:	3f c0       	rjmp	.+126    	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
	else if (__tmp > 65535)
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	3f ef       	ldi	r19, 0xFF	; 255
     230:	4f e7       	ldi	r20, 0x7F	; 127
     232:	57 e4       	ldi	r21, 0x47	; 71
     234:	68 85       	ldd	r22, Y+8	; 0x08
     236:	79 85       	ldd	r23, Y+9	; 0x09
     238:	8a 85       	ldd	r24, Y+10	; 0x0a
     23a:	9b 85       	ldd	r25, Y+11	; 0x0b
     23c:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
     240:	18 16       	cp	r1, r24
     242:	4c f5       	brge	.+82     	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e2       	ldi	r20, 0x20	; 32
     24a:	51 e4       	ldi	r21, 0x41	; 65
     24c:	6c 81       	ldd	r22, Y+4	; 0x04
     24e:	7d 81       	ldd	r23, Y+5	; 0x05
     250:	8e 81       	ldd	r24, Y+6	; 0x06
     252:	9f 81       	ldd	r25, Y+7	; 0x07
     254:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     258:	dc 01       	movw	r26, r24
     25a:	cb 01       	movw	r24, r22
     25c:	bc 01       	movw	r22, r24
     25e:	cd 01       	movw	r24, r26
     260:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     264:	dc 01       	movw	r26, r24
     266:	cb 01       	movw	r24, r22
     268:	9d 87       	std	Y+13, r25	; 0x0d
     26a:	8c 87       	std	Y+12, r24	; 0x0c
     26c:	0f c0       	rjmp	.+30     	; 0x28c <__EEPROM_REGION_LENGTH__+0x8c>
     26e:	89 e1       	ldi	r24, 0x19	; 25
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	9f 87       	std	Y+15, r25	; 0x0f
     274:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     276:	8e 85       	ldd	r24, Y+14	; 0x0e
     278:	9f 85       	ldd	r25, Y+15	; 0x0f
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
     27e:	9f 87       	std	Y+15, r25	; 0x0f
     280:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     282:	8c 85       	ldd	r24, Y+12	; 0x0c
     284:	9d 85       	ldd	r25, Y+13	; 0x0d
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	9d 87       	std	Y+13, r25	; 0x0d
     28a:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     28c:	8c 85       	ldd	r24, Y+12	; 0x0c
     28e:	9d 85       	ldd	r25, Y+13	; 0x0d
     290:	89 2b       	or	r24, r25
     292:	69 f7       	brne	.-38     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
     294:	14 c0       	rjmp	.+40     	; 0x2be <__EEPROM_REGION_LENGTH__+0xbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     296:	68 85       	ldd	r22, Y+8	; 0x08
     298:	79 85       	ldd	r23, Y+9	; 0x09
     29a:	8a 85       	ldd	r24, Y+10	; 0x0a
     29c:	9b 85       	ldd	r25, Y+11	; 0x0b
     29e:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     2a2:	dc 01       	movw	r26, r24
     2a4:	cb 01       	movw	r24, r22
     2a6:	9d 87       	std	Y+13, r25	; 0x0d
     2a8:	8c 87       	std	Y+12, r24	; 0x0c
     2aa:	8c 85       	ldd	r24, Y+12	; 0x0c
     2ac:	9d 85       	ldd	r25, Y+13	; 0x0d
     2ae:	99 8b       	std	Y+17, r25	; 0x11
     2b0:	88 8b       	std	Y+16, r24	; 0x10
     2b2:	88 89       	ldd	r24, Y+16	; 0x10
     2b4:	99 89       	ldd	r25, Y+17	; 0x11
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
     2ba:	99 8b       	std	Y+17, r25	; 0x11
     2bc:	88 8b       	std	Y+16, r24	; 0x10
			_delay_ms(800);
			alarm1 = 1;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	89 83       	std	Y+1, r24	; 0x01
     2c2:	53 c1       	rjmp	.+678    	; 0x56a <__stack+0x10b>
		}
		else
		{
			LCD_writeCMD(LCD, _LCD_DISPLAY_ON);
     2c4:	2c e0       	ldi	r18, 0x0C	; 12
     2c6:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     2ca:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     2ce:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     2d2:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     2d6:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     2da:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     2de:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
			LCD_GoTo(LCD, ROW2,2);
     2e2:	02 e0       	ldi	r16, 0x02	; 2
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     2ea:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     2ee:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     2f2:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     2f6:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     2fa:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     2fe:	0e 94 9a 12 	call	0x2534	; 0x2534 <LCD_GoTo>
			LCD_writeSTR(LCD, "correct password");
     302:	20 ef       	ldi	r18, 0xF0	; 240
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     30a:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     30e:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     312:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     316:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     31a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     31e:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	a8 e4       	ldi	r26, 0x48	; 72
     328:	b4 e4       	ldi	r27, 0x44	; 68
     32a:	88 a3       	std	Y+32, r24	; 0x20
     32c:	99 a3       	std	Y+33, r25	; 0x21
     32e:	aa a3       	std	Y+34, r26	; 0x22
     330:	bb a3       	std	Y+35, r27	; 0x23

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	4a e7       	ldi	r20, 0x7A	; 122
     338:	53 e4       	ldi	r21, 0x43	; 67
     33a:	68 a1       	ldd	r22, Y+32	; 0x20
     33c:	79 a1       	ldd	r23, Y+33	; 0x21
     33e:	8a a1       	ldd	r24, Y+34	; 0x22
     340:	9b a1       	ldd	r25, Y+35	; 0x23
     342:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	8c a3       	std	Y+36, r24	; 0x24
     34c:	9d a3       	std	Y+37, r25	; 0x25
     34e:	ae a3       	std	Y+38, r26	; 0x26
     350:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	40 e8       	ldi	r20, 0x80	; 128
     358:	5f e3       	ldi	r21, 0x3F	; 63
     35a:	6c a1       	ldd	r22, Y+36	; 0x24
     35c:	7d a1       	ldd	r23, Y+37	; 0x25
     35e:	8e a1       	ldd	r24, Y+38	; 0x26
     360:	9f a1       	ldd	r25, Y+39	; 0x27
     362:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
     366:	88 23       	and	r24, r24
     368:	2c f4       	brge	.+10     	; 0x374 <__EEPROM_REGION_LENGTH__+0x174>
		__ticks = 1;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	99 a7       	std	Y+41, r25	; 0x29
     370:	88 a7       	std	Y+40, r24	; 0x28
     372:	3f c0       	rjmp	.+126    	; 0x3f2 <__EEPROM_REGION_LENGTH__+0x1f2>
	else if (__tmp > 65535)
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	3f ef       	ldi	r19, 0xFF	; 255
     378:	4f e7       	ldi	r20, 0x7F	; 127
     37a:	57 e4       	ldi	r21, 0x47	; 71
     37c:	6c a1       	ldd	r22, Y+36	; 0x24
     37e:	7d a1       	ldd	r23, Y+37	; 0x25
     380:	8e a1       	ldd	r24, Y+38	; 0x26
     382:	9f a1       	ldd	r25, Y+39	; 0x27
     384:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
     388:	18 16       	cp	r1, r24
     38a:	4c f5       	brge	.+82     	; 0x3de <__EEPROM_REGION_LENGTH__+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	40 e2       	ldi	r20, 0x20	; 32
     392:	51 e4       	ldi	r21, 0x41	; 65
     394:	68 a1       	ldd	r22, Y+32	; 0x20
     396:	79 a1       	ldd	r23, Y+33	; 0x21
     398:	8a a1       	ldd	r24, Y+34	; 0x22
     39a:	9b a1       	ldd	r25, Y+35	; 0x23
     39c:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     3a0:	dc 01       	movw	r26, r24
     3a2:	cb 01       	movw	r24, r22
     3a4:	bc 01       	movw	r22, r24
     3a6:	cd 01       	movw	r24, r26
     3a8:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     3ac:	dc 01       	movw	r26, r24
     3ae:	cb 01       	movw	r24, r22
     3b0:	99 a7       	std	Y+41, r25	; 0x29
     3b2:	88 a7       	std	Y+40, r24	; 0x28
     3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <__EEPROM_REGION_LENGTH__+0x1d4>
     3b6:	89 e1       	ldi	r24, 0x19	; 25
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	9b a7       	std	Y+43, r25	; 0x2b
     3bc:	8a a7       	std	Y+42, r24	; 0x2a
     3be:	8a a5       	ldd	r24, Y+42	; 0x2a
     3c0:	9b a5       	ldd	r25, Y+43	; 0x2b
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <__EEPROM_REGION_LENGTH__+0x1c2>
     3c6:	9b a7       	std	Y+43, r25	; 0x2b
     3c8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ca:	88 a5       	ldd	r24, Y+40	; 0x28
     3cc:	99 a5       	ldd	r25, Y+41	; 0x29
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	99 a7       	std	Y+41, r25	; 0x29
     3d2:	88 a7       	std	Y+40, r24	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3d4:	88 a5       	ldd	r24, Y+40	; 0x28
     3d6:	99 a5       	ldd	r25, Y+41	; 0x29
     3d8:	89 2b       	or	r24, r25
     3da:	69 f7       	brne	.-38     	; 0x3b6 <__EEPROM_REGION_LENGTH__+0x1b6>
     3dc:	14 c0       	rjmp	.+40     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3de:	6c a1       	ldd	r22, Y+36	; 0x24
     3e0:	7d a1       	ldd	r23, Y+37	; 0x25
     3e2:	8e a1       	ldd	r24, Y+38	; 0x26
     3e4:	9f a1       	ldd	r25, Y+39	; 0x27
     3e6:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     3ea:	dc 01       	movw	r26, r24
     3ec:	cb 01       	movw	r24, r22
     3ee:	99 a7       	std	Y+41, r25	; 0x29
     3f0:	88 a7       	std	Y+40, r24	; 0x28
     3f2:	88 a5       	ldd	r24, Y+40	; 0x28
     3f4:	99 a5       	ldd	r25, Y+41	; 0x29
     3f6:	9d a7       	std	Y+45, r25	; 0x2d
     3f8:	8c a7       	std	Y+44, r24	; 0x2c
     3fa:	8c a5       	ldd	r24, Y+44	; 0x2c
     3fc:	9d a5       	ldd	r25, Y+45	; 0x2d
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <__EEPROM_REGION_LENGTH__+0x1fe>
     402:	9d a7       	std	Y+45, r25	; 0x2d
     404:	8c a7       	std	Y+44, r24	; 0x2c
			_delay_ms(800);
			LCD_writeCMD(LCD, _LCD_CLEAR_DIS);
     406:	21 e0       	ldi	r18, 0x01	; 1
     408:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     40c:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     410:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     414:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     418:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     41c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     420:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
			LCD_GoTo(LCD, ROW2,2);
     424:	02 e0       	ldi	r16, 0x02	; 2
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     42c:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     430:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     434:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     438:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     43c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     440:	0e 94 9a 12 	call	0x2534	; 0x2534 <LCD_GoTo>
			LCD_writeSTR(LCD, "Welcome Master <3");
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	31 e0       	ldi	r19, 0x01	; 1
     448:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     44c:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     450:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     454:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     458:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     45c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     460:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	a8 e4       	ldi	r26, 0x48	; 72
     46a:	b4 e4       	ldi	r27, 0x44	; 68
     46c:	8a 8b       	std	Y+18, r24	; 0x12
     46e:	9b 8b       	std	Y+19, r25	; 0x13
     470:	ac 8b       	std	Y+20, r26	; 0x14
     472:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	4a e7       	ldi	r20, 0x7A	; 122
     47a:	53 e4       	ldi	r21, 0x43	; 67
     47c:	6a 89       	ldd	r22, Y+18	; 0x12
     47e:	7b 89       	ldd	r23, Y+19	; 0x13
     480:	8c 89       	ldd	r24, Y+20	; 0x14
     482:	9d 89       	ldd	r25, Y+21	; 0x15
     484:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	8e 8b       	std	Y+22, r24	; 0x16
     48e:	9f 8b       	std	Y+23, r25	; 0x17
     490:	a8 8f       	std	Y+24, r26	; 0x18
     492:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e8       	ldi	r20, 0x80	; 128
     49a:	5f e3       	ldi	r21, 0x3F	; 63
     49c:	6e 89       	ldd	r22, Y+22	; 0x16
     49e:	7f 89       	ldd	r23, Y+23	; 0x17
     4a0:	88 8d       	ldd	r24, Y+24	; 0x18
     4a2:	99 8d       	ldd	r25, Y+25	; 0x19
     4a4:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
     4a8:	88 23       	and	r24, r24
     4aa:	2c f4       	brge	.+10     	; 0x4b6 <__stack+0x57>
		__ticks = 1;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	9b 8f       	std	Y+27, r25	; 0x1b
     4b2:	8a 8f       	std	Y+26, r24	; 0x1a
     4b4:	3f c0       	rjmp	.+126    	; 0x534 <__stack+0xd5>
	else if (__tmp > 65535)
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	3f ef       	ldi	r19, 0xFF	; 255
     4ba:	4f e7       	ldi	r20, 0x7F	; 127
     4bc:	57 e4       	ldi	r21, 0x47	; 71
     4be:	6e 89       	ldd	r22, Y+22	; 0x16
     4c0:	7f 89       	ldd	r23, Y+23	; 0x17
     4c2:	88 8d       	ldd	r24, Y+24	; 0x18
     4c4:	99 8d       	ldd	r25, Y+25	; 0x19
     4c6:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
     4ca:	18 16       	cp	r1, r24
     4cc:	4c f5       	brge	.+82     	; 0x520 <__stack+0xc1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	40 e2       	ldi	r20, 0x20	; 32
     4d4:	51 e4       	ldi	r21, 0x41	; 65
     4d6:	6a 89       	ldd	r22, Y+18	; 0x12
     4d8:	7b 89       	ldd	r23, Y+19	; 0x13
     4da:	8c 89       	ldd	r24, Y+20	; 0x14
     4dc:	9d 89       	ldd	r25, Y+21	; 0x15
     4de:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	bc 01       	movw	r22, r24
     4e8:	cd 01       	movw	r24, r26
     4ea:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     4ee:	dc 01       	movw	r26, r24
     4f0:	cb 01       	movw	r24, r22
     4f2:	9b 8f       	std	Y+27, r25	; 0x1b
     4f4:	8a 8f       	std	Y+26, r24	; 0x1a
     4f6:	0f c0       	rjmp	.+30     	; 0x516 <__stack+0xb7>
     4f8:	89 e1       	ldi	r24, 0x19	; 25
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	9d 8f       	std	Y+29, r25	; 0x1d
     4fe:	8c 8f       	std	Y+28, r24	; 0x1c
     500:	8c 8d       	ldd	r24, Y+28	; 0x1c
     502:	9d 8d       	ldd	r25, Y+29	; 0x1d
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <__stack+0xa5>
     508:	9d 8f       	std	Y+29, r25	; 0x1d
     50a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     50c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     50e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	9b 8f       	std	Y+27, r25	; 0x1b
     514:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     516:	8a 8d       	ldd	r24, Y+26	; 0x1a
     518:	9b 8d       	ldd	r25, Y+27	; 0x1b
     51a:	89 2b       	or	r24, r25
     51c:	69 f7       	brne	.-38     	; 0x4f8 <__stack+0x99>
     51e:	14 c0       	rjmp	.+40     	; 0x548 <__stack+0xe9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     520:	6e 89       	ldd	r22, Y+22	; 0x16
     522:	7f 89       	ldd	r23, Y+23	; 0x17
     524:	88 8d       	ldd	r24, Y+24	; 0x18
     526:	99 8d       	ldd	r25, Y+25	; 0x19
     528:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     52c:	dc 01       	movw	r26, r24
     52e:	cb 01       	movw	r24, r22
     530:	9b 8f       	std	Y+27, r25	; 0x1b
     532:	8a 8f       	std	Y+26, r24	; 0x1a
     534:	8a 8d       	ldd	r24, Y+26	; 0x1a
     536:	9b 8d       	ldd	r25, Y+27	; 0x1b
     538:	9f 8f       	std	Y+31, r25	; 0x1f
     53a:	8e 8f       	std	Y+30, r24	; 0x1e
     53c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     53e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <__stack+0xe1>
     544:	9f 8f       	std	Y+31, r25	; 0x1f
     546:	8e 8f       	std	Y+30, r24	; 0x1e
			_delay_ms(800);
			LCD_writeCMD(LCD, _LCD_DISPLAY_OFF);
     548:	28 e0       	ldi	r18, 0x08	; 8
     54a:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     54e:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     552:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     556:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     55a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     55e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     562:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
			alarm1 = 0;
     566:	19 82       	std	Y+1, r1	; 0x01
			break;
     568:	07 c0       	rjmp	.+14     	; 0x578 <__stack+0x119>
 * @RetVal : void
 */
uint_8 smartDoorLock_Three_attempts(void)
{
	uint_8 alarm1 = Zero_INIT;
	for(uint_8 count = Zero_INIT; count < 3 ; count++)
     56a:	8a 81       	ldd	r24, Y+2	; 0x02
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	8a 83       	std	Y+2, r24	; 0x02
     570:	8a 81       	ldd	r24, Y+2	; 0x02
     572:	83 30       	cpi	r24, 0x03	; 3
     574:	08 f4       	brcc	.+2      	; 0x578 <__stack+0x119>
     576:	f8 cd       	rjmp	.-1040   	; 0x168 <smartDoorLock_Three_attempts+0x1c>
			LCD_writeCMD(LCD, _LCD_DISPLAY_OFF);
			alarm1 = 0;
			break;
		}
	}
	return alarm1;
     578:	89 81       	ldd	r24, Y+1	; 0x01
}
     57a:	ad 96       	adiw	r28, 0x2d	; 45
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	0f 91       	pop	r16
     58c:	08 95       	ret

0000058e <smartDoorLock_FirstStart>:
 * @brief  : smart lock door project function to welcome massage for user.
 * @param1 : void
 * @RetVal : void
 */
static void smartDoorLock_FirstStart(void)
{
     58e:	0f 93       	push	r16
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	e6 97       	sbiw	r28, 0x36	; 54
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
	uint_8 welcom[20] =  "Hi Master";
     5a4:	8a e0       	ldi	r24, 0x0A	; 10
     5a6:	e3 e1       	ldi	r30, 0x13	; 19
     5a8:	f1 e0       	ldi	r31, 0x01	; 1
     5aa:	de 01       	movw	r26, r28
     5ac:	1f 96       	adiw	r26, 0x0f	; 15
     5ae:	01 90       	ld	r0, Z+
     5b0:	0d 92       	st	X+, r0
     5b2:	8a 95       	dec	r24
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <smartDoorLock_FirstStart+0x20>
     5b6:	2a e0       	ldi	r18, 0x0A	; 10
     5b8:	ce 01       	movw	r24, r28
     5ba:	49 96       	adiw	r24, 0x19	; 25
     5bc:	fc 01       	movw	r30, r24
     5be:	32 2f       	mov	r19, r18
     5c0:	11 92       	st	Z+, r1
     5c2:	3a 95       	dec	r19
     5c4:	e9 f7       	brne	.-6      	; 0x5c0 <smartDoorLock_FirstStart+0x32>
	uint_8 welcom1[20] = "   Welcome in Home ";
     5c6:	84 e1       	ldi	r24, 0x14	; 20
     5c8:	e7 e2       	ldi	r30, 0x27	; 39
     5ca:	f1 e0       	ldi	r31, 0x01	; 1
     5cc:	de 01       	movw	r26, r28
     5ce:	93 96       	adiw	r26, 0x23	; 35
     5d0:	01 90       	ld	r0, Z+
     5d2:	0d 92       	st	X+, r0
     5d4:	8a 95       	dec	r24
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <smartDoorLock_FirstStart+0x42>
	LCD_writeSTR(LCD, lcd_style);
     5d8:	20 e6       	ldi	r18, 0x60	; 96
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     5e0:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     5e4:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     5e8:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     5ec:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     5f0:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     5f4:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
	LCD_GoTo(LCD, ROW2, 7);
     5f8:	07 e0       	ldi	r16, 0x07	; 7
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     600:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     604:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     608:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     60c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     610:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     614:	0e 94 9a 12 	call	0x2534	; 0x2534 <LCD_GoTo>
	LCD_writeSTR(LCD, welcom);
     618:	ce 01       	movw	r24, r28
     61a:	0f 96       	adiw	r24, 0x0f	; 15
     61c:	9c 01       	movw	r18, r24
     61e:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     622:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     626:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     62a:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     62e:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     632:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     636:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
	LCD_GoTo(LCD, ROW3, 1);
     63a:	01 e0       	ldi	r16, 0x01	; 1
     63c:	22 e0       	ldi	r18, 0x02	; 2
     63e:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     642:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     646:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     64a:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     64e:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     652:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     656:	0e 94 9a 12 	call	0x2534	; 0x2534 <LCD_GoTo>
	LCD_writeSTR(LCD, welcom1);
     65a:	ce 01       	movw	r24, r28
     65c:	83 96       	adiw	r24, 0x23	; 35
     65e:	9c 01       	movw	r18, r24
     660:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     664:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     668:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     66c:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     670:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     674:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     678:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
	LCD_GoTo(LCD, ROW4, 1);
     67c:	01 e0       	ldi	r16, 0x01	; 1
     67e:	23 e0       	ldi	r18, 0x03	; 3
     680:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     684:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     688:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     68c:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     690:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     694:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     698:	0e 94 9a 12 	call	0x2534	; 0x2534 <LCD_GoTo>
	LCD_writeSTR(LCD, lcd_style);
     69c:	20 e6       	ldi	r18, 0x60	; 96
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     6a4:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     6a8:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     6ac:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     6b0:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     6b4:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     6b8:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e8       	ldi	r25, 0x80	; 128
     6c0:	ab eb       	ldi	r26, 0xBB	; 187
     6c2:	b4 e4       	ldi	r27, 0x44	; 68
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	ab 83       	std	Y+3, r26	; 0x03
     6ca:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	4a e7       	ldi	r20, 0x7A	; 122
     6d2:	53 e4       	ldi	r21, 0x43	; 67
     6d4:	69 81       	ldd	r22, Y+1	; 0x01
     6d6:	7a 81       	ldd	r23, Y+2	; 0x02
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	9c 81       	ldd	r25, Y+4	; 0x04
     6dc:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	8d 83       	std	Y+5, r24	; 0x05
     6e6:	9e 83       	std	Y+6, r25	; 0x06
     6e8:	af 83       	std	Y+7, r26	; 0x07
     6ea:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	5f e3       	ldi	r21, 0x3F	; 63
     6f4:	6d 81       	ldd	r22, Y+5	; 0x05
     6f6:	7e 81       	ldd	r23, Y+6	; 0x06
     6f8:	8f 81       	ldd	r24, Y+7	; 0x07
     6fa:	98 85       	ldd	r25, Y+8	; 0x08
     6fc:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
     700:	88 23       	and	r24, r24
     702:	2c f4       	brge	.+10     	; 0x70e <smartDoorLock_FirstStart+0x180>
		__ticks = 1;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	9a 87       	std	Y+10, r25	; 0x0a
     70a:	89 87       	std	Y+9, r24	; 0x09
     70c:	3f c0       	rjmp	.+126    	; 0x78c <smartDoorLock_FirstStart+0x1fe>
	else if (__tmp > 65535)
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	3f ef       	ldi	r19, 0xFF	; 255
     712:	4f e7       	ldi	r20, 0x7F	; 127
     714:	57 e4       	ldi	r21, 0x47	; 71
     716:	6d 81       	ldd	r22, Y+5	; 0x05
     718:	7e 81       	ldd	r23, Y+6	; 0x06
     71a:	8f 81       	ldd	r24, Y+7	; 0x07
     71c:	98 85       	ldd	r25, Y+8	; 0x08
     71e:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
     722:	18 16       	cp	r1, r24
     724:	4c f5       	brge	.+82     	; 0x778 <smartDoorLock_FirstStart+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	40 e2       	ldi	r20, 0x20	; 32
     72c:	51 e4       	ldi	r21, 0x41	; 65
     72e:	69 81       	ldd	r22, Y+1	; 0x01
     730:	7a 81       	ldd	r23, Y+2	; 0x02
     732:	8b 81       	ldd	r24, Y+3	; 0x03
     734:	9c 81       	ldd	r25, Y+4	; 0x04
     736:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     73a:	dc 01       	movw	r26, r24
     73c:	cb 01       	movw	r24, r22
     73e:	bc 01       	movw	r22, r24
     740:	cd 01       	movw	r24, r26
     742:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	9a 87       	std	Y+10, r25	; 0x0a
     74c:	89 87       	std	Y+9, r24	; 0x09
     74e:	0f c0       	rjmp	.+30     	; 0x76e <smartDoorLock_FirstStart+0x1e0>
     750:	89 e1       	ldi	r24, 0x19	; 25
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	9c 87       	std	Y+12, r25	; 0x0c
     756:	8b 87       	std	Y+11, r24	; 0x0b
     758:	8b 85       	ldd	r24, Y+11	; 0x0b
     75a:	9c 85       	ldd	r25, Y+12	; 0x0c
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <smartDoorLock_FirstStart+0x1ce>
     760:	9c 87       	std	Y+12, r25	; 0x0c
     762:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     764:	89 85       	ldd	r24, Y+9	; 0x09
     766:	9a 85       	ldd	r25, Y+10	; 0x0a
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	9a 87       	std	Y+10, r25	; 0x0a
     76c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76e:	89 85       	ldd	r24, Y+9	; 0x09
     770:	9a 85       	ldd	r25, Y+10	; 0x0a
     772:	89 2b       	or	r24, r25
     774:	69 f7       	brne	.-38     	; 0x750 <smartDoorLock_FirstStart+0x1c2>
     776:	14 c0       	rjmp	.+40     	; 0x7a0 <smartDoorLock_FirstStart+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     778:	6d 81       	ldd	r22, Y+5	; 0x05
     77a:	7e 81       	ldd	r23, Y+6	; 0x06
     77c:	8f 81       	ldd	r24, Y+7	; 0x07
     77e:	98 85       	ldd	r25, Y+8	; 0x08
     780:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     784:	dc 01       	movw	r26, r24
     786:	cb 01       	movw	r24, r22
     788:	9a 87       	std	Y+10, r25	; 0x0a
     78a:	89 87       	std	Y+9, r24	; 0x09
     78c:	89 85       	ldd	r24, Y+9	; 0x09
     78e:	9a 85       	ldd	r25, Y+10	; 0x0a
     790:	9e 87       	std	Y+14, r25	; 0x0e
     792:	8d 87       	std	Y+13, r24	; 0x0d
     794:	8d 85       	ldd	r24, Y+13	; 0x0d
     796:	9e 85       	ldd	r25, Y+14	; 0x0e
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <smartDoorLock_FirstStart+0x20a>
     79c:	9e 87       	std	Y+14, r25	; 0x0e
     79e:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1500);
	LCD_writeCMD(LCD, _LCD_CLEAR_DIS);
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     7a6:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     7aa:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     7ae:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     7b2:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     7b6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     7ba:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>

}
     7be:	00 00       	nop
     7c0:	e6 96       	adiw	r28, 0x36	; 54
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <smartDoorLock_getPass>:
 * @brief  : smart lock door project function to get password from user.
 * @param1 : void
 * @RetVal : void
 */
static void smartDoorLock_getPass(void)
{
     7d4:	ef 92       	push	r14
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	2f 97       	sbiw	r28, 0x0f	; 15
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
	uint_8 Lcd_Pos = Zero_INIT;
     7ee:	19 82       	std	Y+1, r1	; 0x01
	LCD_GoTo(LCD, ROW2,6);
     7f0:	06 e0       	ldi	r16, 0x06	; 6
     7f2:	21 e0       	ldi	r18, 0x01	; 1
     7f4:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     7f8:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     7fc:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     800:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     804:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     808:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     80c:	0e 94 9a 12 	call	0x2534	; 0x2534 <LCD_GoTo>
	LCD_writeSTR(LCD,"SET PASSWORD");
     810:	2b e3       	ldi	r18, 0x3B	; 59
     812:	31 e0       	ldi	r19, 0x01	; 1
     814:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     818:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     81c:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     820:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     824:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     828:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     82c:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
	while(1)
	{
		LCD_writeCMD(LCD,_LCD_DISPLAY_ON);
     830:	2c e0       	ldi	r18, 0x0C	; 12
     832:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     836:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     83a:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     83e:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     842:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     846:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     84a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
		KEYPAD_getData(KEYPAD,&KeyVal);
     84e:	00 e7       	ldi	r16, 0x70	; 112
     850:	11 e0       	ldi	r17, 0x01	; 1
     852:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <KEYPAD>
     856:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <KEYPAD+0x1>
     85a:	40 91 d2 00 	lds	r20, 0x00D2	; 0x8000d2 <KEYPAD+0x2>
     85e:	50 91 d3 00 	lds	r21, 0x00D3	; 0x8000d3 <KEYPAD+0x3>
     862:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <KEYPAD+0x4>
     866:	70 91 d5 00 	lds	r23, 0x00D5	; 0x8000d5 <KEYPAD+0x5>
     86a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <KEYPAD+0x6>
     86e:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <KEYPAD+0x7>
     872:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <KEYPAD_getData>
		while(KEYPAD_getData(KEYPAD,&KeyVal) == 0);
     876:	00 00       	nop
     878:	00 e7       	ldi	r16, 0x70	; 112
     87a:	11 e0       	ldi	r17, 0x01	; 1
     87c:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <KEYPAD>
     880:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <KEYPAD+0x1>
     884:	40 91 d2 00 	lds	r20, 0x00D2	; 0x8000d2 <KEYPAD+0x2>
     888:	50 91 d3 00 	lds	r21, 0x00D3	; 0x8000d3 <KEYPAD+0x3>
     88c:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <KEYPAD+0x4>
     890:	70 91 d5 00 	lds	r23, 0x00D5	; 0x8000d5 <KEYPAD+0x5>
     894:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <KEYPAD+0x6>
     898:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <KEYPAD+0x7>
     89c:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <KEYPAD_getData>
     8a0:	88 23       	and	r24, r24
     8a2:	51 f3       	breq	.-44     	; 0x878 <smartDoorLock_getPass+0xa4>
		Lcd_Pos++;
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	89 83       	std	Y+1, r24	; 0x01
		if(KeyVal == '#')
     8aa:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
     8ae:	83 32       	cpi	r24, 0x23	; 35
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <smartDoorLock_getPass+0xe0>
     8b2:	a3 c0       	rjmp	.+326    	; 0x9fa <smartDoorLock_getPass+0x226>
		{
			break;
		}
		LCD_writeCharPosition(LCD, ROW3, Lcd_Pos, KeyVal);
     8b4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
     8b8:	e8 2e       	mov	r14, r24
     8ba:	09 81       	ldd	r16, Y+1	; 0x01
     8bc:	22 e0       	ldi	r18, 0x02	; 2
     8be:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     8c2:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     8c6:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     8ca:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     8ce:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     8d2:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     8d6:	0e 94 82 11 	call	0x2304	; 0x2304 <LCD_writeCharPosition>
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	aa e7       	ldi	r26, 0x7A	; 122
     8e0:	b3 e4       	ldi	r27, 0x43	; 67
     8e2:	8a 83       	std	Y+2, r24	; 0x02
     8e4:	9b 83       	std	Y+3, r25	; 0x03
     8e6:	ac 83       	std	Y+4, r26	; 0x04
     8e8:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	4a e7       	ldi	r20, 0x7A	; 122
     8f0:	53 e4       	ldi	r21, 0x43	; 67
     8f2:	6a 81       	ldd	r22, Y+2	; 0x02
     8f4:	7b 81       	ldd	r23, Y+3	; 0x03
     8f6:	8c 81       	ldd	r24, Y+4	; 0x04
     8f8:	9d 81       	ldd	r25, Y+5	; 0x05
     8fa:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     8fe:	dc 01       	movw	r26, r24
     900:	cb 01       	movw	r24, r22
     902:	8e 83       	std	Y+6, r24	; 0x06
     904:	9f 83       	std	Y+7, r25	; 0x07
     906:	a8 87       	std	Y+8, r26	; 0x08
     908:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e8       	ldi	r20, 0x80	; 128
     910:	5f e3       	ldi	r21, 0x3F	; 63
     912:	6e 81       	ldd	r22, Y+6	; 0x06
     914:	7f 81       	ldd	r23, Y+7	; 0x07
     916:	88 85       	ldd	r24, Y+8	; 0x08
     918:	99 85       	ldd	r25, Y+9	; 0x09
     91a:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
     91e:	88 23       	and	r24, r24
     920:	2c f4       	brge	.+10     	; 0x92c <smartDoorLock_getPass+0x158>
		__ticks = 1;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	9b 87       	std	Y+11, r25	; 0x0b
     928:	8a 87       	std	Y+10, r24	; 0x0a
     92a:	3f c0       	rjmp	.+126    	; 0x9aa <smartDoorLock_getPass+0x1d6>
	else if (__tmp > 65535)
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	3f ef       	ldi	r19, 0xFF	; 255
     930:	4f e7       	ldi	r20, 0x7F	; 127
     932:	57 e4       	ldi	r21, 0x47	; 71
     934:	6e 81       	ldd	r22, Y+6	; 0x06
     936:	7f 81       	ldd	r23, Y+7	; 0x07
     938:	88 85       	ldd	r24, Y+8	; 0x08
     93a:	99 85       	ldd	r25, Y+9	; 0x09
     93c:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
     940:	18 16       	cp	r1, r24
     942:	4c f5       	brge	.+82     	; 0x996 <smartDoorLock_getPass+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e2       	ldi	r20, 0x20	; 32
     94a:	51 e4       	ldi	r21, 0x41	; 65
     94c:	6a 81       	ldd	r22, Y+2	; 0x02
     94e:	7b 81       	ldd	r23, Y+3	; 0x03
     950:	8c 81       	ldd	r24, Y+4	; 0x04
     952:	9d 81       	ldd	r25, Y+5	; 0x05
     954:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     958:	dc 01       	movw	r26, r24
     95a:	cb 01       	movw	r24, r22
     95c:	bc 01       	movw	r22, r24
     95e:	cd 01       	movw	r24, r26
     960:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	9b 87       	std	Y+11, r25	; 0x0b
     96a:	8a 87       	std	Y+10, r24	; 0x0a
     96c:	0f c0       	rjmp	.+30     	; 0x98c <smartDoorLock_getPass+0x1b8>
     96e:	89 e1       	ldi	r24, 0x19	; 25
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	9d 87       	std	Y+13, r25	; 0x0d
     974:	8c 87       	std	Y+12, r24	; 0x0c
     976:	8c 85       	ldd	r24, Y+12	; 0x0c
     978:	9d 85       	ldd	r25, Y+13	; 0x0d
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <smartDoorLock_getPass+0x1a6>
     97e:	9d 87       	std	Y+13, r25	; 0x0d
     980:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     982:	8a 85       	ldd	r24, Y+10	; 0x0a
     984:	9b 85       	ldd	r25, Y+11	; 0x0b
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	9b 87       	std	Y+11, r25	; 0x0b
     98a:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     98c:	8a 85       	ldd	r24, Y+10	; 0x0a
     98e:	9b 85       	ldd	r25, Y+11	; 0x0b
     990:	89 2b       	or	r24, r25
     992:	69 f7       	brne	.-38     	; 0x96e <smartDoorLock_getPass+0x19a>
     994:	14 c0       	rjmp	.+40     	; 0x9be <smartDoorLock_getPass+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	7f 81       	ldd	r23, Y+7	; 0x07
     99a:	88 85       	ldd	r24, Y+8	; 0x08
     99c:	99 85       	ldd	r25, Y+9	; 0x09
     99e:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     9a2:	dc 01       	movw	r26, r24
     9a4:	cb 01       	movw	r24, r22
     9a6:	9b 87       	std	Y+11, r25	; 0x0b
     9a8:	8a 87       	std	Y+10, r24	; 0x0a
     9aa:	8a 85       	ldd	r24, Y+10	; 0x0a
     9ac:	9b 85       	ldd	r25, Y+11	; 0x0b
     9ae:	9f 87       	std	Y+15, r25	; 0x0f
     9b0:	8e 87       	std	Y+14, r24	; 0x0e
     9b2:	8e 85       	ldd	r24, Y+14	; 0x0e
     9b4:	9f 85       	ldd	r25, Y+15	; 0x0f
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <smartDoorLock_getPass+0x1e2>
     9ba:	9f 87       	std	Y+15, r25	; 0x0f
     9bc:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(250);
		LCD_writeCharPosition(LCD, ROW3, Lcd_Pos, '*');
     9be:	0f 2e       	mov	r0, r31
     9c0:	fa e2       	ldi	r31, 0x2A	; 42
     9c2:	ef 2e       	mov	r14, r31
     9c4:	f0 2d       	mov	r31, r0
     9c6:	09 81       	ldd	r16, Y+1	; 0x01
     9c8:	22 e0       	ldi	r18, 0x02	; 2
     9ca:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     9ce:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     9d2:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     9d6:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     9da:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     9de:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     9e2:	0e 94 82 11 	call	0x2304	; 0x2304 <LCD_writeCharPosition>
		PassSet[Lcd_Pos] = KeyVal;
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	88 2f       	mov	r24, r24
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <__data_end>
     9f0:	8f 58       	subi	r24, 0x8F	; 143
     9f2:	9e 4f       	sbci	r25, 0xFE	; 254
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
	uint_8 Lcd_Pos = Zero_INIT;
	LCD_GoTo(LCD, ROW2,6);
	LCD_writeSTR(LCD,"SET PASSWORD");
	while(1)
	{
		LCD_writeCMD(LCD,_LCD_DISPLAY_ON);
     9f8:	1b cf       	rjmp	.-458    	; 0x830 <smartDoorLock_getPass+0x5c>
		KEYPAD_getData(KEYPAD,&KeyVal);
		while(KEYPAD_getData(KEYPAD,&KeyVal) == 0);
		Lcd_Pos++;
		if(KeyVal == '#')
		{
			break;
     9fa:	00 00       	nop
		LCD_writeCharPosition(LCD, ROW3, Lcd_Pos, KeyVal);
		_delay_ms(250);
		LCD_writeCharPosition(LCD, ROW3, Lcd_Pos, '*');
		PassSet[Lcd_Pos] = KeyVal;
	}
}
     9fc:	00 00       	nop
     9fe:	2f 96       	adiw	r28, 0x0f	; 15
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ef 90       	pop	r14
     a14:	08 95       	ret

00000a16 <smartDoorLock_checkpass>:
 * 			 is correct or not if correct return 1 else return 0.
 * @param1 : void
 * @RetVal : Ret1
 */
static uint_8 smartDoorLock_checkpass(void)
{
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <smartDoorLock_checkpass+0x6>
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
	uint_8 Ret1 = Zero_INIT;
     a20:	19 82       	std	Y+1, r1	; 0x01
	for(uint_8 count = Zero_INIT ; count < MAX_SIZE ; count++)
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	15 c0       	rjmp	.+42     	; 0xa50 <smartDoorLock_checkpass+0x3a>
	{
		if(Pass[count] != PassSet[count])
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	86 58       	subi	r24, 0x86	; 134
     a2e:	9e 4f       	sbci	r25, 0xFE	; 254
     a30:	fc 01       	movw	r30, r24
     a32:	20 81       	ld	r18, Z
     a34:	8a 81       	ldd	r24, Y+2	; 0x02
     a36:	88 2f       	mov	r24, r24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	8f 58       	subi	r24, 0x8F	; 143
     a3c:	9e 4f       	sbci	r25, 0xFE	; 254
     a3e:	fc 01       	movw	r30, r24
     a40:	80 81       	ld	r24, Z
     a42:	28 17       	cp	r18, r24
     a44:	11 f0       	breq	.+4      	; 0xa4a <smartDoorLock_checkpass+0x34>
		{
			Ret1 = 1;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	89 83       	std	Y+1, r24	; 0x01
 * @RetVal : Ret1
 */
static uint_8 smartDoorLock_checkpass(void)
{
	uint_8 Ret1 = Zero_INIT;
	for(uint_8 count = Zero_INIT ; count < MAX_SIZE ; count++)
     a4a:	8a 81       	ldd	r24, Y+2	; 0x02
     a4c:	8f 5f       	subi	r24, 0xFF	; 255
     a4e:	8a 83       	std	Y+2, r24	; 0x02
     a50:	8a 81       	ldd	r24, Y+2	; 0x02
     a52:	89 30       	cpi	r24, 0x09	; 9
     a54:	40 f3       	brcs	.-48     	; 0xa26 <smartDoorLock_checkpass+0x10>
		if(Pass[count] != PassSet[count])
		{
			Ret1 = 1;
		}
	}
	return Ret1;
     a56:	89 81       	ldd	r24, Y+1	; 0x01
}
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <smartDoorLock_getpass>:
 * @brief  : smart lock door project function to get password.
 * @param1 : void
 * @RetVal : void
 */
static void smartDoorLock_getpass(void)
{
     a62:	ef 92       	push	r14
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	6d 97       	sbiw	r28, 0x1d	; 29
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
	Pass[MAX_SIZE] = Zero_INIT;
     a7c:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <PassCheck>
	uint_8 Lcd_Pos = Zero_INIT;
     a80:	19 82       	std	Y+1, r1	; 0x01
	LCD_writeCMD(LCD,_LCD_DISPLAY_ON);
     a82:	2c e0       	ldi	r18, 0x0C	; 12
     a84:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     a88:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     a8c:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     a90:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     a94:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     a98:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     a9c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
	LCD_GoTo(LCD, ROW2,4);
     aa0:	04 e0       	ldi	r16, 0x04	; 4
     aa2:	21 e0       	ldi	r18, 0x01	; 1
     aa4:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     aa8:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     aac:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     ab0:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     ab4:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     ab8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     abc:	0e 94 9a 12 	call	0x2534	; 0x2534 <LCD_GoTo>
	LCD_writeSTR(LCD,"Enter Password");
     ac0:	28 e4       	ldi	r18, 0x48	; 72
     ac2:	31 e0       	ldi	r19, 0x01	; 1
     ac4:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     ac8:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     acc:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     ad0:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     ad4:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     ad8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     adc:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
	while(1)
	{
		KEYPAD_getData(KEYPAD,&KeyVal);
     ae0:	00 e7       	ldi	r16, 0x70	; 112
     ae2:	11 e0       	ldi	r17, 0x01	; 1
     ae4:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <KEYPAD>
     ae8:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <KEYPAD+0x1>
     aec:	40 91 d2 00 	lds	r20, 0x00D2	; 0x8000d2 <KEYPAD+0x2>
     af0:	50 91 d3 00 	lds	r21, 0x00D3	; 0x8000d3 <KEYPAD+0x3>
     af4:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <KEYPAD+0x4>
     af8:	70 91 d5 00 	lds	r23, 0x00D5	; 0x8000d5 <KEYPAD+0x5>
     afc:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <KEYPAD+0x6>
     b00:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <KEYPAD+0x7>
     b04:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <KEYPAD_getData>
		while(KEYPAD_getData(KEYPAD,&KeyVal) == 0);
     b08:	00 00       	nop
     b0a:	00 e7       	ldi	r16, 0x70	; 112
     b0c:	11 e0       	ldi	r17, 0x01	; 1
     b0e:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <KEYPAD>
     b12:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <KEYPAD+0x1>
     b16:	40 91 d2 00 	lds	r20, 0x00D2	; 0x8000d2 <KEYPAD+0x2>
     b1a:	50 91 d3 00 	lds	r21, 0x00D3	; 0x8000d3 <KEYPAD+0x3>
     b1e:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <KEYPAD+0x4>
     b22:	70 91 d5 00 	lds	r23, 0x00D5	; 0x8000d5 <KEYPAD+0x5>
     b26:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <KEYPAD+0x6>
     b2a:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <KEYPAD+0x7>
     b2e:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <KEYPAD_getData>
     b32:	88 23       	and	r24, r24
     b34:	51 f3       	breq	.-44     	; 0xb0a <smartDoorLock_getpass+0xa8>
		Lcd_Pos++;
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	89 83       	std	Y+1, r24	; 0x01
		if(KeyVal == '#')
     b3c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
     b40:	83 32       	cpi	r24, 0x23	; 35
     b42:	09 f0       	breq	.+2      	; 0xb46 <smartDoorLock_getpass+0xe4>
     b44:	73 c0       	rjmp	.+230    	; 0xc2c <smartDoorLock_getpass+0x1ca>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	aa e7       	ldi	r26, 0x7A	; 122
     b4c:	b3 e4       	ldi	r27, 0x43	; 67
     b4e:	8a 83       	std	Y+2, r24	; 0x02
     b50:	9b 83       	std	Y+3, r25	; 0x03
     b52:	ac 83       	std	Y+4, r26	; 0x04
     b54:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	4a e7       	ldi	r20, 0x7A	; 122
     b5c:	53 e4       	ldi	r21, 0x43	; 67
     b5e:	6a 81       	ldd	r22, Y+2	; 0x02
     b60:	7b 81       	ldd	r23, Y+3	; 0x03
     b62:	8c 81       	ldd	r24, Y+4	; 0x04
     b64:	9d 81       	ldd	r25, Y+5	; 0x05
     b66:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     b6a:	dc 01       	movw	r26, r24
     b6c:	cb 01       	movw	r24, r22
     b6e:	8e 83       	std	Y+6, r24	; 0x06
     b70:	9f 83       	std	Y+7, r25	; 0x07
     b72:	a8 87       	std	Y+8, r26	; 0x08
     b74:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	40 e8       	ldi	r20, 0x80	; 128
     b7c:	5f e3       	ldi	r21, 0x3F	; 63
     b7e:	6e 81       	ldd	r22, Y+6	; 0x06
     b80:	7f 81       	ldd	r23, Y+7	; 0x07
     b82:	88 85       	ldd	r24, Y+8	; 0x08
     b84:	99 85       	ldd	r25, Y+9	; 0x09
     b86:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
     b8a:	88 23       	and	r24, r24
     b8c:	2c f4       	brge	.+10     	; 0xb98 <smartDoorLock_getpass+0x136>
		__ticks = 1;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	9b 87       	std	Y+11, r25	; 0x0b
     b94:	8a 87       	std	Y+10, r24	; 0x0a
     b96:	3f c0       	rjmp	.+126    	; 0xc16 <smartDoorLock_getpass+0x1b4>
	else if (__tmp > 65535)
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	3f ef       	ldi	r19, 0xFF	; 255
     b9c:	4f e7       	ldi	r20, 0x7F	; 127
     b9e:	57 e4       	ldi	r21, 0x47	; 71
     ba0:	6e 81       	ldd	r22, Y+6	; 0x06
     ba2:	7f 81       	ldd	r23, Y+7	; 0x07
     ba4:	88 85       	ldd	r24, Y+8	; 0x08
     ba6:	99 85       	ldd	r25, Y+9	; 0x09
     ba8:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
     bac:	18 16       	cp	r1, r24
     bae:	4c f5       	brge	.+82     	; 0xc02 <smartDoorLock_getpass+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e2       	ldi	r20, 0x20	; 32
     bb6:	51 e4       	ldi	r21, 0x41	; 65
     bb8:	6a 81       	ldd	r22, Y+2	; 0x02
     bba:	7b 81       	ldd	r23, Y+3	; 0x03
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	9d 81       	ldd	r25, Y+5	; 0x05
     bc0:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	bc 01       	movw	r22, r24
     bca:	cd 01       	movw	r24, r26
     bcc:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	9b 87       	std	Y+11, r25	; 0x0b
     bd6:	8a 87       	std	Y+10, r24	; 0x0a
     bd8:	0f c0       	rjmp	.+30     	; 0xbf8 <smartDoorLock_getpass+0x196>
     bda:	89 e1       	ldi	r24, 0x19	; 25
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	9d 87       	std	Y+13, r25	; 0x0d
     be0:	8c 87       	std	Y+12, r24	; 0x0c
     be2:	8c 85       	ldd	r24, Y+12	; 0x0c
     be4:	9d 85       	ldd	r25, Y+13	; 0x0d
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <smartDoorLock_getpass+0x184>
     bea:	9d 87       	std	Y+13, r25	; 0x0d
     bec:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bee:	8a 85       	ldd	r24, Y+10	; 0x0a
     bf0:	9b 85       	ldd	r25, Y+11	; 0x0b
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	9b 87       	std	Y+11, r25	; 0x0b
     bf6:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf8:	8a 85       	ldd	r24, Y+10	; 0x0a
     bfa:	9b 85       	ldd	r25, Y+11	; 0x0b
     bfc:	89 2b       	or	r24, r25
     bfe:	69 f7       	brne	.-38     	; 0xbda <smartDoorLock_getpass+0x178>
		{
			_delay_ms(250);
			break;
     c00:	b8 c0       	rjmp	.+368    	; 0xd72 <smartDoorLock_getpass+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c02:	6e 81       	ldd	r22, Y+6	; 0x06
     c04:	7f 81       	ldd	r23, Y+7	; 0x07
     c06:	88 85       	ldd	r24, Y+8	; 0x08
     c08:	99 85       	ldd	r25, Y+9	; 0x09
     c0a:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	9b 87       	std	Y+11, r25	; 0x0b
     c14:	8a 87       	std	Y+10, r24	; 0x0a
     c16:	8a 85       	ldd	r24, Y+10	; 0x0a
     c18:	9b 85       	ldd	r25, Y+11	; 0x0b
     c1a:	9f 87       	std	Y+15, r25	; 0x0f
     c1c:	8e 87       	std	Y+14, r24	; 0x0e
     c1e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c20:	9f 85       	ldd	r25, Y+15	; 0x0f
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <smartDoorLock_getpass+0x1c0>
     c26:	9f 87       	std	Y+15, r25	; 0x0f
     c28:	8e 87       	std	Y+14, r24	; 0x0e
     c2a:	a3 c0       	rjmp	.+326    	; 0xd72 <smartDoorLock_getpass+0x310>
		}
		LCD_writeCharPosition(LCD, ROW3, Lcd_Pos, KeyVal);
     c2c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
     c30:	e8 2e       	mov	r14, r24
     c32:	09 81       	ldd	r16, Y+1	; 0x01
     c34:	22 e0       	ldi	r18, 0x02	; 2
     c36:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     c3a:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     c3e:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     c42:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     c46:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     c4a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     c4e:	0e 94 82 11 	call	0x2304	; 0x2304 <LCD_writeCharPosition>
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	a8 ec       	ldi	r26, 0xC8	; 200
     c58:	b2 e4       	ldi	r27, 0x42	; 66
     c5a:	88 8b       	std	Y+16, r24	; 0x10
     c5c:	99 8b       	std	Y+17, r25	; 0x11
     c5e:	aa 8b       	std	Y+18, r26	; 0x12
     c60:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	4a e7       	ldi	r20, 0x7A	; 122
     c68:	53 e4       	ldi	r21, 0x43	; 67
     c6a:	68 89       	ldd	r22, Y+16	; 0x10
     c6c:	79 89       	ldd	r23, Y+17	; 0x11
     c6e:	8a 89       	ldd	r24, Y+18	; 0x12
     c70:	9b 89       	ldd	r25, Y+19	; 0x13
     c72:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	8c 8b       	std	Y+20, r24	; 0x14
     c7c:	9d 8b       	std	Y+21, r25	; 0x15
     c7e:	ae 8b       	std	Y+22, r26	; 0x16
     c80:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e8       	ldi	r20, 0x80	; 128
     c88:	5f e3       	ldi	r21, 0x3F	; 63
     c8a:	6c 89       	ldd	r22, Y+20	; 0x14
     c8c:	7d 89       	ldd	r23, Y+21	; 0x15
     c8e:	8e 89       	ldd	r24, Y+22	; 0x16
     c90:	9f 89       	ldd	r25, Y+23	; 0x17
     c92:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
     c96:	88 23       	and	r24, r24
     c98:	2c f4       	brge	.+10     	; 0xca4 <smartDoorLock_getpass+0x242>
		__ticks = 1;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	99 8f       	std	Y+25, r25	; 0x19
     ca0:	88 8f       	std	Y+24, r24	; 0x18
     ca2:	3f c0       	rjmp	.+126    	; 0xd22 <smartDoorLock_getpass+0x2c0>
	else if (__tmp > 65535)
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	3f ef       	ldi	r19, 0xFF	; 255
     ca8:	4f e7       	ldi	r20, 0x7F	; 127
     caa:	57 e4       	ldi	r21, 0x47	; 71
     cac:	6c 89       	ldd	r22, Y+20	; 0x14
     cae:	7d 89       	ldd	r23, Y+21	; 0x15
     cb0:	8e 89       	ldd	r24, Y+22	; 0x16
     cb2:	9f 89       	ldd	r25, Y+23	; 0x17
     cb4:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
     cb8:	18 16       	cp	r1, r24
     cba:	4c f5       	brge	.+82     	; 0xd0e <smartDoorLock_getpass+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e2       	ldi	r20, 0x20	; 32
     cc2:	51 e4       	ldi	r21, 0x41	; 65
     cc4:	68 89       	ldd	r22, Y+16	; 0x10
     cc6:	79 89       	ldd	r23, Y+17	; 0x11
     cc8:	8a 89       	ldd	r24, Y+18	; 0x12
     cca:	9b 89       	ldd	r25, Y+19	; 0x13
     ccc:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	bc 01       	movw	r22, r24
     cd6:	cd 01       	movw	r24, r26
     cd8:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	99 8f       	std	Y+25, r25	; 0x19
     ce2:	88 8f       	std	Y+24, r24	; 0x18
     ce4:	0f c0       	rjmp	.+30     	; 0xd04 <smartDoorLock_getpass+0x2a2>
     ce6:	89 e1       	ldi	r24, 0x19	; 25
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9b 8f       	std	Y+27, r25	; 0x1b
     cec:	8a 8f       	std	Y+26, r24	; 0x1a
     cee:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cf0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <smartDoorLock_getpass+0x290>
     cf6:	9b 8f       	std	Y+27, r25	; 0x1b
     cf8:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfa:	88 8d       	ldd	r24, Y+24	; 0x18
     cfc:	99 8d       	ldd	r25, Y+25	; 0x19
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	99 8f       	std	Y+25, r25	; 0x19
     d02:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d04:	88 8d       	ldd	r24, Y+24	; 0x18
     d06:	99 8d       	ldd	r25, Y+25	; 0x19
     d08:	89 2b       	or	r24, r25
     d0a:	69 f7       	brne	.-38     	; 0xce6 <smartDoorLock_getpass+0x284>
     d0c:	14 c0       	rjmp	.+40     	; 0xd36 <smartDoorLock_getpass+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0e:	6c 89       	ldd	r22, Y+20	; 0x14
     d10:	7d 89       	ldd	r23, Y+21	; 0x15
     d12:	8e 89       	ldd	r24, Y+22	; 0x16
     d14:	9f 89       	ldd	r25, Y+23	; 0x17
     d16:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	99 8f       	std	Y+25, r25	; 0x19
     d20:	88 8f       	std	Y+24, r24	; 0x18
     d22:	88 8d       	ldd	r24, Y+24	; 0x18
     d24:	99 8d       	ldd	r25, Y+25	; 0x19
     d26:	9d 8f       	std	Y+29, r25	; 0x1d
     d28:	8c 8f       	std	Y+28, r24	; 0x1c
     d2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <smartDoorLock_getpass+0x2cc>
     d32:	9d 8f       	std	Y+29, r25	; 0x1d
     d34:	8c 8f       	std	Y+28, r24	; 0x1c
		_delay_ms(100);
		LCD_writeCharPosition(LCD, ROW3, Lcd_Pos, '*');
     d36:	0f 2e       	mov	r0, r31
     d38:	fa e2       	ldi	r31, 0x2A	; 42
     d3a:	ef 2e       	mov	r14, r31
     d3c:	f0 2d       	mov	r31, r0
     d3e:	09 81       	ldd	r16, Y+1	; 0x01
     d40:	22 e0       	ldi	r18, 0x02	; 2
     d42:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     d46:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     d4a:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     d4e:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     d52:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     d56:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     d5a:	0e 94 82 11 	call	0x2304	; 0x2304 <LCD_writeCharPosition>
		Pass[Lcd_Pos] = KeyVal;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <__data_end>
     d68:	86 58       	subi	r24, 0x86	; 134
     d6a:	9e 4f       	sbci	r25, 0xFE	; 254
     d6c:	fc 01       	movw	r30, r24
     d6e:	20 83       	st	Z, r18
	LCD_writeCMD(LCD,_LCD_DISPLAY_ON);
	LCD_GoTo(LCD, ROW2,4);
	LCD_writeSTR(LCD,"Enter Password");
	while(1)
	{
		KEYPAD_getData(KEYPAD,&KeyVal);
     d70:	b7 ce       	rjmp	.-658    	; 0xae0 <smartDoorLock_getpass+0x7e>
		LCD_writeCharPosition(LCD, ROW3, Lcd_Pos, KeyVal);
		_delay_ms(100);
		LCD_writeCharPosition(LCD, ROW3, Lcd_Pos, '*');
		Pass[Lcd_Pos] = KeyVal;
	}
	LCD_writeCMD(LCD, _LCD_CLEAR_DIS);
     d72:	21 e0       	ldi	r18, 0x01	; 1
     d74:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
     d78:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
     d7c:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
     d80:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
     d84:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
     d88:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
     d8c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
}
     d90:	00 00       	nop
     d92:	6d 96       	adiw	r28, 0x1d	; 29
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ef 90       	pop	r14
     da8:	08 95       	ret

00000daa <UART_init>:
 * 			 and select your configurations from configurations file.
 * @param1 : copyBaudRate
 * @retVal : void
 */
void UART_init(BAUD_RATE copyBaudRate)
{
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	1f 92       	push	r1
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (copyBaudRate >> 8);
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	29 2f       	mov	r18, r25
     dbe:	33 27       	eor	r19, r19
     dc0:	27 fd       	sbrc	r18, 7
     dc2:	3a 95       	dec	r19
     dc4:	80 e4       	ldi	r24, 0x40	; 64
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18
	UBRRL = copyBaudRate;
     dcc:	89 e2       	ldi	r24, 0x29	; 41
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	29 81       	ldd	r18, Y+1	; 0x01
     dd2:	fc 01       	movw	r30, r24
     dd4:	20 83       	st	Z, r18

	/* ----- SYNCH MODE ----- */
#if	(SYNCH_MODE == ASYNCHRONOUS_MODE)
	CLR_BIT(UCSRC,UMSEL);
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	fc 01       	movw	r30, r24
     ddc:	20 81       	ld	r18, Z
     dde:	80 e4       	ldi	r24, 0x40	; 64
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	2f 7b       	andi	r18, 0xBF	; 191
     de4:	fc 01       	movw	r30, r24
     de6:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UPM0);
#endif

	/* ----- STOP NUM BITS MODE ----- */
#if	(STOP_NUM_BITS == STOP_1_BIT)
	CLR_BIT(UCSRC,USBS);
     de8:	80 e4       	ldi	r24, 0x40	; 64
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	fc 01       	movw	r30, r24
     dee:	20 81       	ld	r18, Z
     df0:	80 e4       	ldi	r24, 0x40	; 64
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	27 7f       	andi	r18, 0xF7	; 247
     df6:	fc 01       	movw	r30, r24
     df8:	20 83       	st	Z, r18
#elif (DATA_SIZE == DATA_7_BITS)
	CLR_BIT(UCSRC,UCSZ2);
	SET_BIT(UCSRC,UCSZ1);
	CLR_BIT(UCSRC,UCSZ0);
#elif (DATA_SIZE == DATA_8_BITS)
	 SET_BIT(UCSRC,UCSZ0);
     dfa:	80 e4       	ldi	r24, 0x40	; 64
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	fc 01       	movw	r30, r24
     e00:	20 81       	ld	r18, Z
     e02:	80 e4       	ldi	r24, 0x40	; 64
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	22 60       	ori	r18, 0x02	; 2
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
	 SET_BIT(UCSRC,UCSZ1);
     e0c:	80 e4       	ldi	r24, 0x40	; 64
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	fc 01       	movw	r30, r24
     e12:	20 81       	ld	r18, Z
     e14:	80 e4       	ldi	r24, 0x40	; 64
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	24 60       	ori	r18, 0x04	; 4
     e1a:	fc 01       	movw	r30, r24
     e1c:	20 83       	st	Z, r18
	 CLR_BIT(UCSRC,UCSZ2);
     e1e:	80 e4       	ldi	r24, 0x40	; 64
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	fc 01       	movw	r30, r24
     e24:	20 81       	ld	r18, Z
     e26:	80 e4       	ldi	r24, 0x40	; 64
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	2b 7f       	andi	r18, 0xFB	; 251
     e2c:	fc 01       	movw	r30, r24
     e2e:	20 83       	st	Z, r18
#elif (DATA_SIZE == DATA_9_BITS)
	SET_BIT(UCSRC,UCSZ2);
	SET_BIT(UCSRC,UCSZ1);
	SET_BIT(UCSRC,UCSZ0);
#endif
	 SET_BIT(UCSRB,TXEN);
     e30:	8a e2       	ldi	r24, 0x2A	; 42
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	fc 01       	movw	r30, r24
     e36:	20 81       	ld	r18, Z
     e38:	8a e2       	ldi	r24, 0x2A	; 42
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	28 60       	ori	r18, 0x08	; 8
     e3e:	fc 01       	movw	r30, r24
     e40:	20 83       	st	Z, r18
	 SET_BIT(UCSRB,RXEN);
     e42:	8a e2       	ldi	r24, 0x2A	; 42
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	fc 01       	movw	r30, r24
     e48:	20 81       	ld	r18, Z
     e4a:	8a e2       	ldi	r24, 0x2A	; 42
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	20 61       	ori	r18, 0x10	; 16
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
}
     e54:	00 00       	nop
     e56:	0f 90       	pop	r0
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	08 95       	ret

00000e5e <UART_sendData>:
 * 			 communicated with MCU UART.
 * @param1 : copyData
 * @retVal : void
 */
void UART_sendData(uint_16 copyData)
{
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	00 d0       	rcall	.+0      	; 0xe64 <UART_sendData+0x6>
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UDRE) == 0);
     e6c:	00 00       	nop
     e6e:	8b e2       	ldi	r24, 0x2B	; 43
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	fc 01       	movw	r30, r24
     e74:	80 81       	ld	r24, Z
     e76:	82 95       	swap	r24
     e78:	86 95       	lsr	r24
     e7a:	87 70       	andi	r24, 0x07	; 7
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	81 70       	andi	r24, 0x01	; 1
     e82:	99 27       	eor	r25, r25
     e84:	89 2b       	or	r24, r25
     e86:	99 f3       	breq	.-26     	; 0xe6e <UART_sendData+0x10>
	UDR = copyData;
     e88:	8c e2       	ldi	r24, 0x2C	; 44
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	29 81       	ldd	r18, Y+1	; 0x01
     e8e:	fc 01       	movw	r30, r24
     e90:	20 83       	st	Z, r18
}
     e92:	00 00       	nop
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <UART_receiveData>:
 * 			 communicated with MCU UART.
 * @param1 : copyVar
 * @retVal : Ret1
 */
uint_8 UART_receiveData(uint_8 *copyVar)
{
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <UART_receiveData+0x6>
     ea4:	1f 92       	push	r1
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	9b 83       	std	Y+3, r25	; 0x03
     eac:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Ret1 = 0;
     eae:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(UCSRA,RXC))
     eb0:	8b e2       	ldi	r24, 0x2B	; 43
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	fc 01       	movw	r30, r24
     eb6:	80 81       	ld	r24, Z
     eb8:	88 1f       	adc	r24, r24
     eba:	88 27       	eor	r24, r24
     ebc:	88 1f       	adc	r24, r24
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	81 70       	andi	r24, 0x01	; 1
     ec4:	99 27       	eor	r25, r25
     ec6:	89 2b       	or	r24, r25
     ec8:	59 f0       	breq	.+22     	; 0xee0 <UART_receiveData+0x42>
	{
		*copyVar = UDR;
     eca:	8c e2       	ldi	r24, 0x2C	; 44
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	fc 01       	movw	r30, r24
     ed0:	20 81       	ld	r18, Z
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	9b 81       	ldd	r25, Y+3	; 0x03
     ed6:	fc 01       	movw	r30, r24
     ed8:	20 83       	st	Z, r18
		Ret1 = 1;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <UART_receiveData+0x44>
	}
	else
	{
		Ret1 = 0;
     ee0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Ret1;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	08 95       	ret

00000ef0 <UART_reciveDataBlock>:
 * 			 communicated with MCU UART (polling).
 * @param1 : copyVar
 * @retVal : UDR
 */
uint_8 UART_reciveDataBlock(void)
{
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,RXC) == 0);
     ef8:	00 00       	nop
     efa:	8b e2       	ldi	r24, 0x2B	; 43
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	fc 01       	movw	r30, r24
     f00:	80 81       	ld	r24, Z
     f02:	88 1f       	adc	r24, r24
     f04:	88 27       	eor	r24, r24
     f06:	88 1f       	adc	r24, r24
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	81 70       	andi	r24, 0x01	; 1
     f0e:	99 27       	eor	r25, r25
     f10:	89 2b       	or	r24, r25
     f12:	99 f3       	breq	.-26     	; 0xefa <UART_reciveDataBlock+0xa>
	return UDR;
     f14:	8c e2       	ldi	r24, 0x2C	; 44
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	fc 01       	movw	r30, r24
     f1a:	80 81       	ld	r24, Z
}
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	08 95       	ret

00000f22 <TIMER0_Init>:
 *			 from configuration file.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_Init(void)
{
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
#if TIMER_MODE_WAVE == NORMAL_MODE
	CLR_BIT(TCCR0,WGM00);
     f2a:	83 e5       	ldi	r24, 0x53	; 83
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	fc 01       	movw	r30, r24
     f30:	20 81       	ld	r18, Z
     f32:	83 e5       	ldi	r24, 0x53	; 83
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	2f 7b       	andi	r18, 0xBF	; 191
     f38:	fc 01       	movw	r30, r24
     f3a:	20 83       	st	Z, r18
	CLR_BIT(TCCR0,WGM01);
     f3c:	83 e5       	ldi	r24, 0x53	; 83
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	fc 01       	movw	r30, r24
     f42:	20 81       	ld	r18, Z
     f44:	83 e5       	ldi	r24, 0x53	; 83
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	27 7f       	andi	r18, 0xF7	; 247
     f4a:	fc 01       	movw	r30, r24
     f4c:	20 83       	st	Z, r18
#elif TIMER_MODE_WAVE == FAST_PWM_MODE
	SET_BIT(TCCR0,WGM00);
	SET_BIT(TCCR0,WGM01);
	TCCR0 |= TIMER_COMP_OUTPUT_MODE;
#endif
}
     f4e:	00 00       	nop
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <TIMER0_Start>:
 * @brief  : Timer/Counter {0} Start counting by select prescaler from configuration file.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_Start(void)
{
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= _PRESCALER_SELECT_;
     f5e:	83 e5       	ldi	r24, 0x53	; 83
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	fc 01       	movw	r30, r24
     f64:	20 81       	ld	r18, Z
     f66:	83 e5       	ldi	r24, 0x53	; 83
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	22 60       	ori	r18, 0x02	; 2
     f6c:	fc 01       	movw	r30, r24
     f6e:	20 83       	st	Z, r18
}
     f70:	00 00       	nop
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <TIMER0_Stop>:
 * @brief  : Timer/Counter {0} Stop counting.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_Stop(void)
{
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLOCK_STOP;
     f80:	83 e5       	ldi	r24, 0x53	; 83
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	fc 01       	movw	r30, r24
     f86:	20 81       	ld	r18, Z
     f88:	83 e5       	ldi	r24, 0x53	; 83
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	28 7f       	andi	r18, 0xF8	; 248
     f8e:	fc 01       	movw	r30, r24
     f90:	20 83       	st	Z, r18
}
     f92:	00 00       	nop
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <TIMER0_writeOVR>:
 * @brief  : Timer/Counter {0} write over flow by put start value over flow.
 * @param1 : Copy_Start_Value
 * @retVal : void
 */
void TIMER0_writeOVR(uint_8 Copy_Start_Value)
{
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	1f 92       	push	r1
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_Start_Value;
     fa6:	82 e5       	ldi	r24, 0x52	; 82
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	29 81       	ldd	r18, Y+1	; 0x01
     fac:	fc 01       	movw	r30, r24
     fae:	20 83       	st	Z, r18
}
     fb0:	00 00       	nop
     fb2:	0f 90       	pop	r0
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <TIMER0_writeCOM>:
 * @brief  : Timer/Counter {0} write Compare match put start value comparing.
 * @param1 : Copy_Start_Value
 * @retVal : void
 */
void TIMER0_writeCOM(uint_8 Copy_Start_Value)
{
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	1f 92       	push	r1
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_Start_Value;
     fc6:	8c e5       	ldi	r24, 0x5C	; 92
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	29 81       	ldd	r18, Y+1	; 0x01
     fcc:	fc 01       	movw	r30, r24
     fce:	20 83       	st	Z, r18
}
     fd0:	00 00       	nop
     fd2:	0f 90       	pop	r0
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <TIMER0_ovrInterruptEnable>:
 * 			 &  write one in TIMSK register in TOIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_ovrInterruptEnable(void)
{
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     fe2:	8f e5       	ldi	r24, 0x5F	; 95
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 81       	ld	r18, Z
     fea:	8f e5       	ldi	r24, 0x5F	; 95
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	20 68       	ori	r18, 0x80	; 128
     ff0:	fc 01       	movw	r30, r24
     ff2:	20 83       	st	Z, r18
	SET_BIT(TIMSK,TOIE0);
     ff4:	89 e5       	ldi	r24, 0x59	; 89
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	fc 01       	movw	r30, r24
     ffa:	20 81       	ld	r18, Z
     ffc:	89 e5       	ldi	r24, 0x59	; 89
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	21 60       	ori	r18, 0x01	; 1
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
}
    1006:	00 00       	nop
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <TIMER0_ovrInterruptDisable>:
 * @brief  : Timer/Counter {0} interrupt over flow disable by write zero in TIMSK register in TOIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_ovrInterruptDisable(void)
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    1016:	89 e5       	ldi	r24, 0x59	; 89
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	fc 01       	movw	r30, r24
    101c:	20 81       	ld	r18, Z
    101e:	89 e5       	ldi	r24, 0x59	; 89
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	2e 7f       	andi	r18, 0xFE	; 254
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18
}
    1028:	00 00       	nop
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <TIMER0_compInterruptEnable>:
 * 			 &  write one in TIMSK register in OCIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_compInterruptEnable(void)
{
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
    1038:	8f e5       	ldi	r24, 0x5F	; 95
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	fc 01       	movw	r30, r24
    103e:	20 81       	ld	r18, Z
    1040:	8f e5       	ldi	r24, 0x5F	; 95
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	20 68       	ori	r18, 0x80	; 128
    1046:	fc 01       	movw	r30, r24
    1048:	20 83       	st	Z, r18
	SET_BIT(TIMSK,OCIE0);
    104a:	89 e5       	ldi	r24, 0x59	; 89
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	fc 01       	movw	r30, r24
    1050:	20 81       	ld	r18, Z
    1052:	89 e5       	ldi	r24, 0x59	; 89
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	22 60       	ori	r18, 0x02	; 2
    1058:	fc 01       	movw	r30, r24
    105a:	20 83       	st	Z, r18
}
    105c:	00 00       	nop
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <TIMER0_comInterruptDisable>:
 * @brief  : Timer/Counter {0} interrupt Compare match disable by write zero in TIMSK register in OCIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_comInterruptDisable(void)
{
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
    106c:	89 e5       	ldi	r24, 0x59	; 89
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	fc 01       	movw	r30, r24
    1072:	20 81       	ld	r18, Z
    1074:	89 e5       	ldi	r24, 0x59	; 89
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	2d 7f       	andi	r18, 0xFD	; 253
    107a:	fc 01       	movw	r30, r24
    107c:	20 83       	st	Z, r18
}
    107e:	00 00       	nop
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <SPI_init>:
 * @brief  : SPI initialization function select your configurations from configurations file.
 * @param1 : void
 * @retVal : void
 */
void SPI_init(void)
{
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPE); // enable SPI
    108e:	8d e2       	ldi	r24, 0x2D	; 45
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	fc 01       	movw	r30, r24
    1094:	20 81       	ld	r18, Z
    1096:	8d e2       	ldi	r24, 0x2D	; 45
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	20 64       	ori	r18, 0x40	; 64
    109c:	fc 01       	movw	r30, r24
    109e:	20 83       	st	Z, r18

#if(_SPI_DATA_ORDER == LSB)
	SET_BIT(SPCR,DORD);
    10a0:	8d e2       	ldi	r24, 0x2D	; 45
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	fc 01       	movw	r30, r24
    10a6:	20 81       	ld	r18, Z
    10a8:	8d e2       	ldi	r24, 0x2D	; 45
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	20 62       	ori	r18, 0x20	; 32
    10ae:	fc 01       	movw	r30, r24
    10b0:	20 83       	st	Z, r18
#elif (_SPI_DATA_ORDER == MSB)
	CLR_BIT(SPCR,DORD);
#endif

#if (_SPI_MODE == _SPI_MASTER)
	SET_BIT(SPCR,MSTR);
    10b2:	8d e2       	ldi	r24, 0x2D	; 45
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	fc 01       	movw	r30, r24
    10b8:	20 81       	ld	r18, Z
    10ba:	8d e2       	ldi	r24, 0x2D	; 45
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	20 61       	ori	r18, 0x10	; 16
    10c0:	fc 01       	movw	r30, r24
    10c2:	20 83       	st	Z, r18
#elif (_SPI_MODE == _SPI_SLAVE)
	CLR_BIT(SPCR,MSTR);
#endif

#if (CPOL_MODE == _FALLING_RISING)
	SET_BIT(SPCR,CPOL);
    10c4:	8d e2       	ldi	r24, 0x2D	; 45
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 81       	ld	r18, Z
    10cc:	8d e2       	ldi	r24, 0x2D	; 45
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	28 60       	ori	r18, 0x08	; 8
    10d2:	fc 01       	movw	r30, r24
    10d4:	20 83       	st	Z, r18
#endif

#if (CPHA_MODE == _SAMPLE_SETUP)
	CLR_BIT(SPCR,CPHA);
#elif (CPHA_MODE == _SETUP_SAMPLE)
	SET_BIT(SPCR,CPHA);
    10d6:	8d e2       	ldi	r24, 0x2D	; 45
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	fc 01       	movw	r30, r24
    10dc:	20 81       	ld	r18, Z
    10de:	8d e2       	ldi	r24, 0x2D	; 45
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	24 60       	ori	r18, 0x04	; 4
    10e4:	fc 01       	movw	r30, r24
    10e6:	20 83       	st	Z, r18
#endif
}
    10e8:	00 00       	nop
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <SPI_interruptEnable>:
 * 			 & set SPIE bit in SPCR register.
 * @param1 : void
 * @retVal : void
 */
void SPI_interruptEnable(void)
{
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
    10f8:	8f e5       	ldi	r24, 0x5F	; 95
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	fc 01       	movw	r30, r24
    10fe:	20 81       	ld	r18, Z
    1100:	8f e5       	ldi	r24, 0x5F	; 95
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	20 68       	ori	r18, 0x80	; 128
    1106:	fc 01       	movw	r30, r24
    1108:	20 83       	st	Z, r18
	SET_BIT(SPCR,SPIE);
    110a:	8d e2       	ldi	r24, 0x2D	; 45
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	fc 01       	movw	r30, r24
    1110:	20 81       	ld	r18, Z
    1112:	8d e2       	ldi	r24, 0x2D	; 45
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	20 68       	ori	r18, 0x80	; 128
    1118:	fc 01       	movw	r30, r24
    111a:	20 83       	st	Z, r18
}
    111c:	00 00       	nop
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <SPI_interruptDisable>:
 * @brief  : SPI interrupt disable function by clear SPIE bit in SPCR register.
 * @param1 : void
 * @retVal : void
 */
void SPI_interruptDisable(void)
{
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPIE);
    112c:	8d e2       	ldi	r24, 0x2D	; 45
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	fc 01       	movw	r30, r24
    1132:	20 81       	ld	r18, Z
    1134:	8d e2       	ldi	r24, 0x2D	; 45
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	2f 77       	andi	r18, 0x7F	; 127
    113a:	fc 01       	movw	r30, r24
    113c:	20 83       	st	Z, r18
}
    113e:	00 00       	nop
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <EXINTER_init>:
  * 		  put status or sense of signal.
  * @param1  : copyNumInt
  * @param2  : copySense
  */
void EXINTER_init(_NUM_EX_INTERRUPT copyNumInt,_SENSE_SELECT copySense)
{
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	00 d0       	rcall	.+0      	; 0x114c <EXINTER_init+0x6>
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT(SREG,GIE);	// set general interrupt bit
    1154:	8f e5       	ldi	r24, 0x5F	; 95
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	fc 01       	movw	r30, r24
    115a:	20 81       	ld	r18, Z
    115c:	8f e5       	ldi	r24, 0x5F	; 95
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	20 68       	ori	r18, 0x80	; 128
    1162:	fc 01       	movw	r30, r24
    1164:	20 83       	st	Z, r18

	switch(copyNumInt)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	b9 f0       	breq	.+46     	; 0x11a0 <EXINTER_init+0x5a>
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	91 05       	cpc	r25, r1
    1176:	29 f1       	breq	.+74     	; 0x11c2 <EXINTER_init+0x7c>
    1178:	89 2b       	or	r24, r25
    117a:	09 f0       	breq	.+2      	; 0x117e <EXINTER_init+0x38>
			EXINTER_controlINT2(copySense);
			SET_BIT(GICR,_INT2);
			DIO_setPinDIR(PINB2, _DIRECTION_PIN_INPUT);
			break;
	}
}
    117c:	33 c0       	rjmp	.+102    	; 0x11e4 <EXINTER_init+0x9e>
	SET_BIT(SREG,GIE);	// set general interrupt bit

	switch(copyNumInt)
	{
		case INT0:
			EXINTER_controlINT0(copySense);
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <EXINTER_controlINT0>
			SET_BIT(GICR,_INT0);
    1184:	8b e5       	ldi	r24, 0x5B	; 91
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	fc 01       	movw	r30, r24
    118a:	20 81       	ld	r18, Z
    118c:	8b e5       	ldi	r24, 0x5B	; 91
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	20 64       	ori	r18, 0x40	; 64
    1192:	fc 01       	movw	r30, r24
    1194:	20 83       	st	Z, r18
			DIO_setPinDIR(PIND2, _DIRECTION_PIN_INPUT);
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	8a e1       	ldi	r24, 0x1A	; 26
    119a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
			break;
    119e:	22 c0       	rjmp	.+68     	; 0x11e4 <EXINTER_init+0x9e>
		case INT1:
			EXINTER_controlINT1(copySense);
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	0e 94 61 09 	call	0x12c2	; 0x12c2 <EXINTER_controlINT1>
			SET_BIT(GICR,_INT1);
    11a6:	8b e5       	ldi	r24, 0x5B	; 91
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	fc 01       	movw	r30, r24
    11ac:	20 81       	ld	r18, Z
    11ae:	8b e5       	ldi	r24, 0x5B	; 91
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	20 68       	ori	r18, 0x80	; 128
    11b4:	fc 01       	movw	r30, r24
    11b6:	20 83       	st	Z, r18
			DIO_setPinDIR(PIND3, _DIRECTION_PIN_INPUT);
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	8b e1       	ldi	r24, 0x1B	; 27
    11bc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
			break;
    11c0:	11 c0       	rjmp	.+34     	; 0x11e4 <EXINTER_init+0x9e>
		case INT2:
			EXINTER_controlINT2(copySense);
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	0e 94 ca 09 	call	0x1394	; 0x1394 <EXINTER_controlINT2>
			SET_BIT(GICR,_INT2);
    11c8:	8b e5       	ldi	r24, 0x5B	; 91
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	fc 01       	movw	r30, r24
    11ce:	20 81       	ld	r18, Z
    11d0:	8b e5       	ldi	r24, 0x5B	; 91
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	20 62       	ori	r18, 0x20	; 32
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18
			DIO_setPinDIR(PINB2, _DIRECTION_PIN_INPUT);
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	8a e0       	ldi	r24, 0x0A	; 10
    11de:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
			break;
    11e2:	00 00       	nop
	}
}
    11e4:	00 00       	nop
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <EXINTER_controlINT0>:
  * @brief  : Static Function Control Direction of External Interrupt {0}
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT0(_SENSE_SELECT copySense)
{
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	1f 92       	push	r1
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	89 83       	std	Y+1, r24	; 0x01
	switch (copySense)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	f9 f0       	breq	.+62     	; 0x1246 <EXINTER_controlINT0+0x56>
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	91 05       	cpc	r25, r1
    120c:	1c f4       	brge	.+6      	; 0x1214 <EXINTER_controlINT0+0x24>
    120e:	89 2b       	or	r24, r25
    1210:	39 f0       	breq	.+14     	; 0x1220 <EXINTER_controlINT0+0x30>
		case RISING:
			SET_BIT(MCUCR,ISC01);
			SET_BIT(MCUCR,ISC00);
			break;
	}
}
    1212:	52 c0       	rjmp	.+164    	; 0x12b8 <EXINTER_controlINT0+0xc8>
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT0(_SENSE_SELECT copySense)
{
	switch (copySense)
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	91 05       	cpc	r25, r1
    1218:	49 f1       	breq	.+82     	; 0x126c <EXINTER_controlINT0+0x7c>
    121a:	03 97       	sbiw	r24, 0x03	; 3
    121c:	d1 f1       	breq	.+116    	; 0x1292 <EXINTER_controlINT0+0xa2>
		case RISING:
			SET_BIT(MCUCR,ISC01);
			SET_BIT(MCUCR,ISC00);
			break;
	}
}
    121e:	4c c0       	rjmp	.+152    	; 0x12b8 <EXINTER_controlINT0+0xc8>
static void EXINTER_controlINT0(_SENSE_SELECT copySense)
{
	switch (copySense)
	{
		case LOW:
			CLR_BIT(MCUCR,ISC01);
    1220:	85 e5       	ldi	r24, 0x55	; 85
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	fc 01       	movw	r30, r24
    1226:	20 81       	ld	r18, Z
    1228:	85 e5       	ldi	r24, 0x55	; 85
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	2d 7f       	andi	r18, 0xFD	; 253
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC00);
    1232:	85 e5       	ldi	r24, 0x55	; 85
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	fc 01       	movw	r30, r24
    1238:	20 81       	ld	r18, Z
    123a:	85 e5       	ldi	r24, 0x55	; 85
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	2e 7f       	andi	r18, 0xFE	; 254
    1240:	fc 01       	movw	r30, r24
    1242:	20 83       	st	Z, r18
			break;
    1244:	39 c0       	rjmp	.+114    	; 0x12b8 <EXINTER_controlINT0+0xc8>
		case ANY:
			CLR_BIT(MCUCR,ISC01);
    1246:	85 e5       	ldi	r24, 0x55	; 85
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	fc 01       	movw	r30, r24
    124c:	20 81       	ld	r18, Z
    124e:	85 e5       	ldi	r24, 0x55	; 85
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	2d 7f       	andi	r18, 0xFD	; 253
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC00);
    1258:	85 e5       	ldi	r24, 0x55	; 85
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	fc 01       	movw	r30, r24
    125e:	20 81       	ld	r18, Z
    1260:	85 e5       	ldi	r24, 0x55	; 85
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	21 60       	ori	r18, 0x01	; 1
    1266:	fc 01       	movw	r30, r24
    1268:	20 83       	st	Z, r18
			break;
    126a:	26 c0       	rjmp	.+76     	; 0x12b8 <EXINTER_controlINT0+0xc8>
		case FALLING:
			SET_BIT(MCUCR,ISC01);
    126c:	85 e5       	ldi	r24, 0x55	; 85
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	fc 01       	movw	r30, r24
    1272:	20 81       	ld	r18, Z
    1274:	85 e5       	ldi	r24, 0x55	; 85
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	22 60       	ori	r18, 0x02	; 2
    127a:	fc 01       	movw	r30, r24
    127c:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC00);
    127e:	85 e5       	ldi	r24, 0x55	; 85
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	fc 01       	movw	r30, r24
    1284:	20 81       	ld	r18, Z
    1286:	85 e5       	ldi	r24, 0x55	; 85
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	2e 7f       	andi	r18, 0xFE	; 254
    128c:	fc 01       	movw	r30, r24
    128e:	20 83       	st	Z, r18
			break;
    1290:	13 c0       	rjmp	.+38     	; 0x12b8 <EXINTER_controlINT0+0xc8>
		case RISING:
			SET_BIT(MCUCR,ISC01);
    1292:	85 e5       	ldi	r24, 0x55	; 85
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	fc 01       	movw	r30, r24
    1298:	20 81       	ld	r18, Z
    129a:	85 e5       	ldi	r24, 0x55	; 85
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	22 60       	ori	r18, 0x02	; 2
    12a0:	fc 01       	movw	r30, r24
    12a2:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC00);
    12a4:	85 e5       	ldi	r24, 0x55	; 85
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	fc 01       	movw	r30, r24
    12aa:	20 81       	ld	r18, Z
    12ac:	85 e5       	ldi	r24, 0x55	; 85
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	21 60       	ori	r18, 0x01	; 1
    12b2:	fc 01       	movw	r30, r24
    12b4:	20 83       	st	Z, r18
			break;
    12b6:	00 00       	nop
	}
}
    12b8:	00 00       	nop
    12ba:	0f 90       	pop	r0
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <EXINTER_controlINT1>:
  * @brief  : Static Function Control Direction of External Interrupt {1}
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT1(_SENSE_SELECT copySense)
{
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	1f 92       	push	r1
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	89 83       	std	Y+1, r24	; 0x01
	switch (copySense)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	91 05       	cpc	r25, r1
    12d8:	f9 f0       	breq	.+62     	; 0x1318 <EXINTER_controlINT1+0x56>
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	91 05       	cpc	r25, r1
    12de:	1c f4       	brge	.+6      	; 0x12e6 <EXINTER_controlINT1+0x24>
    12e0:	89 2b       	or	r24, r25
    12e2:	39 f0       	breq	.+14     	; 0x12f2 <EXINTER_controlINT1+0x30>
		case RISING:
			SET_BIT(MCUCR,ISC11);
			SET_BIT(MCUCR,ISC10);
			break;
	}
}
    12e4:	52 c0       	rjmp	.+164    	; 0x138a <EXINTER_controlINT1+0xc8>
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT1(_SENSE_SELECT copySense)
{
	switch (copySense)
    12e6:	82 30       	cpi	r24, 0x02	; 2
    12e8:	91 05       	cpc	r25, r1
    12ea:	49 f1       	breq	.+82     	; 0x133e <EXINTER_controlINT1+0x7c>
    12ec:	03 97       	sbiw	r24, 0x03	; 3
    12ee:	d1 f1       	breq	.+116    	; 0x1364 <EXINTER_controlINT1+0xa2>
		case RISING:
			SET_BIT(MCUCR,ISC11);
			SET_BIT(MCUCR,ISC10);
			break;
	}
}
    12f0:	4c c0       	rjmp	.+152    	; 0x138a <EXINTER_controlINT1+0xc8>
static void EXINTER_controlINT1(_SENSE_SELECT copySense)
{
	switch (copySense)
	{
		case LOW:
			CLR_BIT(MCUCR,ISC11);
    12f2:	85 e5       	ldi	r24, 0x55	; 85
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 81       	ld	r18, Z
    12fa:	85 e5       	ldi	r24, 0x55	; 85
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	27 7f       	andi	r18, 0xF7	; 247
    1300:	fc 01       	movw	r30, r24
    1302:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC10);
    1304:	85 e5       	ldi	r24, 0x55	; 85
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	fc 01       	movw	r30, r24
    130a:	20 81       	ld	r18, Z
    130c:	85 e5       	ldi	r24, 0x55	; 85
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	2b 7f       	andi	r18, 0xFB	; 251
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
			break;
    1316:	39 c0       	rjmp	.+114    	; 0x138a <EXINTER_controlINT1+0xc8>
		case ANY:
			CLR_BIT(MCUCR,ISC11);
    1318:	85 e5       	ldi	r24, 0x55	; 85
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	fc 01       	movw	r30, r24
    131e:	20 81       	ld	r18, Z
    1320:	85 e5       	ldi	r24, 0x55	; 85
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	27 7f       	andi	r18, 0xF7	; 247
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC10);
    132a:	85 e5       	ldi	r24, 0x55	; 85
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	fc 01       	movw	r30, r24
    1330:	20 81       	ld	r18, Z
    1332:	85 e5       	ldi	r24, 0x55	; 85
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	24 60       	ori	r18, 0x04	; 4
    1338:	fc 01       	movw	r30, r24
    133a:	20 83       	st	Z, r18
			break;
    133c:	26 c0       	rjmp	.+76     	; 0x138a <EXINTER_controlINT1+0xc8>
		case FALLING:
			SET_BIT(MCUCR,ISC11);
    133e:	85 e5       	ldi	r24, 0x55	; 85
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	fc 01       	movw	r30, r24
    1344:	20 81       	ld	r18, Z
    1346:	85 e5       	ldi	r24, 0x55	; 85
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	28 60       	ori	r18, 0x08	; 8
    134c:	fc 01       	movw	r30, r24
    134e:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC10);
    1350:	85 e5       	ldi	r24, 0x55	; 85
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	fc 01       	movw	r30, r24
    1356:	20 81       	ld	r18, Z
    1358:	85 e5       	ldi	r24, 0x55	; 85
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	2b 7f       	andi	r18, 0xFB	; 251
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
			break;
    1362:	13 c0       	rjmp	.+38     	; 0x138a <EXINTER_controlINT1+0xc8>
		case RISING:
			SET_BIT(MCUCR,ISC11);
    1364:	85 e5       	ldi	r24, 0x55	; 85
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	fc 01       	movw	r30, r24
    136a:	20 81       	ld	r18, Z
    136c:	85 e5       	ldi	r24, 0x55	; 85
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	28 60       	ori	r18, 0x08	; 8
    1372:	fc 01       	movw	r30, r24
    1374:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC10);
    1376:	85 e5       	ldi	r24, 0x55	; 85
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	fc 01       	movw	r30, r24
    137c:	20 81       	ld	r18, Z
    137e:	85 e5       	ldi	r24, 0x55	; 85
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	24 60       	ori	r18, 0x04	; 4
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
			break;
    1388:	00 00       	nop
	}
}
    138a:	00 00       	nop
    138c:	0f 90       	pop	r0
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <EXINTER_controlINT2>:
  * @brief  : Static Function Control Direction of External Interrupt {2}
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT2(_SENSE_SELECT copySense)
{
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	1f 92       	push	r1
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	89 83       	std	Y+1, r24	; 0x01
	switch (copySense)
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	82 30       	cpi	r24, 0x02	; 2
    13a8:	91 05       	cpc	r25, r1
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <EXINTER_controlINT2+0x1e>
    13ac:	03 97       	sbiw	r24, 0x03	; 3
    13ae:	59 f0       	breq	.+22     	; 0x13c6 <EXINTER_controlINT2+0x32>
    13b0:	14 c0       	rjmp	.+40     	; 0x13da <EXINTER_controlINT2+0x46>
	{
		case FALLING:
			CLR_BIT(MCUCR,ISC2);
    13b2:	85 e5       	ldi	r24, 0x55	; 85
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	fc 01       	movw	r30, r24
    13b8:	20 81       	ld	r18, Z
    13ba:	85 e5       	ldi	r24, 0x55	; 85
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	2f 7b       	andi	r18, 0xBF	; 191
    13c0:	fc 01       	movw	r30, r24
    13c2:	20 83       	st	Z, r18
			break;
    13c4:	14 c0       	rjmp	.+40     	; 0x13ee <EXINTER_controlINT2+0x5a>
		case RISING:
			SET_BIT(MCUCR,ISC2);
    13c6:	85 e5       	ldi	r24, 0x55	; 85
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 81       	ld	r18, Z
    13ce:	85 e5       	ldi	r24, 0x55	; 85
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	20 64       	ori	r18, 0x40	; 64
    13d4:	fc 01       	movw	r30, r24
    13d6:	20 83       	st	Z, r18
			break;
    13d8:	0a c0       	rjmp	.+20     	; 0x13ee <EXINTER_controlINT2+0x5a>
		default:
			CLR_BIT(MCUCSR,ISC2);
    13da:	84 e5       	ldi	r24, 0x54	; 84
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	fc 01       	movw	r30, r24
    13e0:	20 81       	ld	r18, Z
    13e2:	84 e5       	ldi	r24, 0x54	; 84
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	2f 7b       	andi	r18, 0xBF	; 191
    13e8:	fc 01       	movw	r30, r24
    13ea:	20 83       	st	Z, r18
			break;
    13ec:	00 00       	nop
	}
}
    13ee:	00 00       	nop
    13f0:	0f 90       	pop	r0
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <DIO_setPinDIR>:
 * @param2 : copyPinNum
 * @param3 : copyDir
 * @retVal : void
 */
void DIO_setPinDIR(_GPIO_PINS copyPinNum,_DIRECTION_PINS copyDir)
{
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <DIO_setPinDIR+0x6>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	6a 83       	std	Y+2, r22	; 0x02
	switch (copyDir)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	19 f0       	breq	.+6      	; 0x1416 <DIO_setPinDIR+0x1e>
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	89 f1       	breq	.+98     	; 0x1476 <DIO_setPinDIR+0x7e>
	{
		case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
		case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
	}
}
    1414:	5f c0       	rjmp	.+190    	; 0x14d4 <DIO_setPinDIR+0xdc>
 */
void DIO_setPinDIR(_GPIO_PINS copyPinNum,_DIRECTION_PINS copyDir)
{
	switch (copyDir)
	{
		case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	86 95       	lsr	r24
    141a:	86 95       	lsr	r24
    141c:	86 95       	lsr	r24
    141e:	88 2f       	mov	r24, r24
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	8c 58       	subi	r24, 0x8C	; 140
    1428:	9f 4f       	sbci	r25, 0xFF	; 255
    142a:	fc 01       	movw	r30, r24
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	fc 01       	movw	r30, r24
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9c 01       	movw	r18, r24
    143e:	27 70       	andi	r18, 0x07	; 7
    1440:	33 27       	eor	r19, r19
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_setPinDIR+0x54>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	2a 95       	dec	r18
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_setPinDIR+0x50>
    1450:	80 95       	com	r24
    1452:	24 2f       	mov	r18, r20
    1454:	28 23       	and	r18, r24
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	86 95       	lsr	r24
    145a:	86 95       	lsr	r24
    145c:	86 95       	lsr	r24
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	8c 58       	subi	r24, 0x8C	; 140
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	fc 01       	movw	r30, r24
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	fc 01       	movw	r30, r24
    1472:	20 83       	st	Z, r18
    1474:	2f c0       	rjmp	.+94     	; 0x14d4 <DIO_setPinDIR+0xdc>
		case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	86 95       	lsr	r24
    147a:	86 95       	lsr	r24
    147c:	86 95       	lsr	r24
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	8c 58       	subi	r24, 0x8C	; 140
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	fc 01       	movw	r30, r24
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	fc 01       	movw	r30, r24
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	88 2f       	mov	r24, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9c 01       	movw	r18, r24
    149e:	27 70       	andi	r18, 0x07	; 7
    14a0:	33 27       	eor	r19, r19
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_setPinDIR+0xb4>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	2a 95       	dec	r18
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_setPinDIR+0xb0>
    14b0:	24 2f       	mov	r18, r20
    14b2:	28 2b       	or	r18, r24
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	86 95       	lsr	r24
    14b8:	86 95       	lsr	r24
    14ba:	86 95       	lsr	r24
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	8c 58       	subi	r24, 0x8C	; 140
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	fc 01       	movw	r30, r24
    14ca:	80 81       	ld	r24, Z
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 83       	st	Z, r18
    14d2:	00 00       	nop
	}
}
    14d4:	00 00       	nop
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	08 95       	ret

000014e0 <DIO_setPinVAL>:
 * @param2 : copyPinNum
 * @param3 : copyVal
 * @retVal : void
 */
void DIO_setPinVAL(_GPIO_PINS copyPinNum,_STATUS_PINS copyVal)
{
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <DIO_setPinVAL+0x6>
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	6a 83       	std	Y+2, r22	; 0x02
	switch (copyVal)
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	91 05       	cpc	r25, r1
    14f8:	b9 f1       	breq	.+110    	; 0x1568 <DIO_setPinVAL+0x88>
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	91 05       	cpc	r25, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <DIO_setPinVAL+0x22>
    1500:	62 c0       	rjmp	.+196    	; 0x15c6 <DIO_setPinVAL+0xe6>
    1502:	89 2b       	or	r24, r25
    1504:	09 f0       	breq	.+2      	; 0x1508 <DIO_setPinVAL+0x28>
	{
		case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
		case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
		case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8)); break;
	}
}
    1506:	8e c0       	rjmp	.+284    	; 0x1624 <DIO_setPinVAL+0x144>
 */
void DIO_setPinVAL(_GPIO_PINS copyPinNum,_STATUS_PINS copyVal)
{
	switch (copyVal)
	{
		case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	86 95       	lsr	r24
    150c:	86 95       	lsr	r24
    150e:	86 95       	lsr	r24
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	86 57       	subi	r24, 0x76	; 118
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	fc 01       	movw	r30, r24
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	fc 01       	movw	r30, r24
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9c 01       	movw	r18, r24
    1530:	27 70       	andi	r18, 0x07	; 7
    1532:	33 27       	eor	r19, r19
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_setPinVAL+0x5e>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	2a 95       	dec	r18
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_setPinVAL+0x5a>
    1542:	80 95       	com	r24
    1544:	24 2f       	mov	r18, r20
    1546:	28 23       	and	r18, r24
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	86 95       	lsr	r24
    154c:	86 95       	lsr	r24
    154e:	86 95       	lsr	r24
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	86 57       	subi	r24, 0x76	; 118
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	fc 01       	movw	r30, r24
    155e:	80 81       	ld	r24, Z
    1560:	91 81       	ldd	r25, Z+1	; 0x01
    1562:	fc 01       	movw	r30, r24
    1564:	20 83       	st	Z, r18
    1566:	5e c0       	rjmp	.+188    	; 0x1624 <DIO_setPinVAL+0x144>
		case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	86 95       	lsr	r24
    156c:	86 95       	lsr	r24
    156e:	86 95       	lsr	r24
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	86 57       	subi	r24, 0x76	; 118
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	fc 01       	movw	r30, r24
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	fc 01       	movw	r30, r24
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	9c 01       	movw	r18, r24
    1590:	27 70       	andi	r18, 0x07	; 7
    1592:	33 27       	eor	r19, r19
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_setPinVAL+0xbe>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	2a 95       	dec	r18
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_setPinVAL+0xba>
    15a2:	24 2f       	mov	r18, r20
    15a4:	28 2b       	or	r18, r24
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	86 95       	lsr	r24
    15aa:	86 95       	lsr	r24
    15ac:	86 95       	lsr	r24
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	86 57       	subi	r24, 0x76	; 118
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	fc 01       	movw	r30, r24
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	fc 01       	movw	r30, r24
    15c2:	20 83       	st	Z, r18
    15c4:	2f c0       	rjmp	.+94     	; 0x1624 <DIO_setPinVAL+0x144>
		case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8)); break;
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	86 95       	lsr	r24
    15ca:	86 95       	lsr	r24
    15cc:	86 95       	lsr	r24
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	86 57       	subi	r24, 0x76	; 118
    15d8:	9f 4f       	sbci	r25, 0xFF	; 255
    15da:	fc 01       	movw	r30, r24
    15dc:	80 81       	ld	r24, Z
    15de:	91 81       	ldd	r25, Z+1	; 0x01
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	88 2f       	mov	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	9c 01       	movw	r18, r24
    15ee:	27 70       	andi	r18, 0x07	; 7
    15f0:	33 27       	eor	r19, r19
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_setPinVAL+0x11c>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	2a 95       	dec	r18
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_setPinVAL+0x118>
    1600:	24 2f       	mov	r18, r20
    1602:	28 27       	eor	r18, r24
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	86 95       	lsr	r24
    1608:	86 95       	lsr	r24
    160a:	86 95       	lsr	r24
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	86 57       	subi	r24, 0x76	; 118
    1616:	9f 4f       	sbci	r25, 0xFF	; 255
    1618:	fc 01       	movw	r30, r24
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	fc 01       	movw	r30, r24
    1620:	20 83       	st	Z, r18
    1622:	00 00       	nop
	}
}
    1624:	00 00       	nop
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <DIO_setPINSDIR>:
 * @param3 : copyEndPin
 * @param4 : copyDir
 * @retVal : void
 */
void DIO_setPINSDIR(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _DIRECTION_PINS copyDir)
{
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	00 d0       	rcall	.+0      	; 0x1636 <DIO_setPINSDIR+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <DIO_setPINSDIR+0x8>
    1638:	1f 92       	push	r1
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	9b 83       	std	Y+3, r25	; 0x03
    1640:	8a 83       	std	Y+2, r24	; 0x02
    1642:	6c 83       	std	Y+4, r22	; 0x04
    1644:	4d 83       	std	Y+5, r20	; 0x05
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
    1646:	19 82       	std	Y+1, r1	; 0x01
    1648:	9b c0       	rjmp	.+310    	; 0x1780 <DIO_setPINSDIR+0x150>
	{
		switch (copyDir)
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	21 f0       	breq	.+8      	; 0x165c <DIO_setPINSDIR+0x2c>
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	09 f4       	brne	.+2      	; 0x165a <DIO_setPINSDIR+0x2a>
    1658:	49 c0       	rjmp	.+146    	; 0x16ec <DIO_setPINSDIR+0xbc>
    165a:	8f c0       	rjmp	.+286    	; 0x177a <DIO_setPINSDIR+0x14a>
		{
			case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	88 2f       	mov	r24, r24
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	2a 81       	ldd	r18, Y+2	; 0x02
    1664:	3b 81       	ldd	r19, Y+3	; 0x03
    1666:	82 0f       	add	r24, r18
    1668:	93 1f       	adc	r25, r19
    166a:	fc 01       	movw	r30, r24
    166c:	80 81       	ld	r24, Z
    166e:	86 95       	lsr	r24
    1670:	86 95       	lsr	r24
    1672:	86 95       	lsr	r24
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	8c 58       	subi	r24, 0x8C	; 140
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	fc 01       	movw	r30, r24
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	fc 01       	movw	r30, r24
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	2a 81       	ldd	r18, Y+2	; 0x02
    1694:	3b 81       	ldd	r19, Y+3	; 0x03
    1696:	82 0f       	add	r24, r18
    1698:	93 1f       	adc	r25, r19
    169a:	fc 01       	movw	r30, r24
    169c:	80 81       	ld	r24, Z
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9c 01       	movw	r18, r24
    16a4:	27 70       	andi	r18, 0x07	; 7
    16a6:	33 27       	eor	r19, r19
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_setPINSDIR+0x82>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	2a 95       	dec	r18
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_setPINSDIR+0x7e>
    16b6:	80 95       	com	r24
    16b8:	48 23       	and	r20, r24
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	2a 81       	ldd	r18, Y+2	; 0x02
    16c2:	3b 81       	ldd	r19, Y+3	; 0x03
    16c4:	82 0f       	add	r24, r18
    16c6:	93 1f       	adc	r25, r19
    16c8:	fc 01       	movw	r30, r24
    16ca:	80 81       	ld	r24, Z
    16cc:	86 95       	lsr	r24
    16ce:	86 95       	lsr	r24
    16d0:	86 95       	lsr	r24
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	8c 58       	subi	r24, 0x8C	; 140
    16dc:	9f 4f       	sbci	r25, 0xFF	; 255
    16de:	fc 01       	movw	r30, r24
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	24 2f       	mov	r18, r20
    16e6:	fc 01       	movw	r30, r24
    16e8:	20 83       	st	Z, r18
    16ea:	47 c0       	rjmp	.+142    	; 0x177a <DIO_setPINSDIR+0x14a>
			case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	2a 81       	ldd	r18, Y+2	; 0x02
    16f4:	3b 81       	ldd	r19, Y+3	; 0x03
    16f6:	82 0f       	add	r24, r18
    16f8:	93 1f       	adc	r25, r19
    16fa:	fc 01       	movw	r30, r24
    16fc:	80 81       	ld	r24, Z
    16fe:	86 95       	lsr	r24
    1700:	86 95       	lsr	r24
    1702:	86 95       	lsr	r24
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	8c 58       	subi	r24, 0x8C	; 140
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	fc 01       	movw	r30, r24
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	fc 01       	movw	r30, r24
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	2a 81       	ldd	r18, Y+2	; 0x02
    1724:	3b 81       	ldd	r19, Y+3	; 0x03
    1726:	82 0f       	add	r24, r18
    1728:	93 1f       	adc	r25, r19
    172a:	fc 01       	movw	r30, r24
    172c:	80 81       	ld	r24, Z
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9c 01       	movw	r18, r24
    1734:	27 70       	andi	r18, 0x07	; 7
    1736:	33 27       	eor	r19, r19
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_setPINSDIR+0x112>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	2a 95       	dec	r18
    1744:	e2 f7       	brpl	.-8      	; 0x173e <DIO_setPINSDIR+0x10e>
    1746:	48 2b       	or	r20, r24
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	2a 81       	ldd	r18, Y+2	; 0x02
    1750:	3b 81       	ldd	r19, Y+3	; 0x03
    1752:	82 0f       	add	r24, r18
    1754:	93 1f       	adc	r25, r19
    1756:	fc 01       	movw	r30, r24
    1758:	80 81       	ld	r24, Z
    175a:	86 95       	lsr	r24
    175c:	86 95       	lsr	r24
    175e:	86 95       	lsr	r24
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	8c 58       	subi	r24, 0x8C	; 140
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	fc 01       	movw	r30, r24
    176e:	80 81       	ld	r24, Z
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	24 2f       	mov	r18, r20
    1774:	fc 01       	movw	r30, r24
    1776:	20 83       	st	Z, r18
    1778:	00 00       	nop
 * @param4 : copyDir
 * @retVal : void
 */
void DIO_setPINSDIR(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _DIRECTION_PINS copyDir)
{
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	8f 5f       	subi	r24, 0xFF	; 255
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	99 81       	ldd	r25, Y+1	; 0x01
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	98 17       	cp	r25, r24
    1786:	08 f4       	brcc	.+2      	; 0x178a <DIO_setPINSDIR+0x15a>
    1788:	60 cf       	rjmp	.-320    	; 0x164a <DIO_setPINSDIR+0x1a>
		{
			case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
			case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
		}
	}
}
    178a:	00 00       	nop
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <DIO_setPINSVAL>:
 * @param3 : copyEndPin
 * @param4 : copyVal
 * @retVal : void
 */
void DIO_setPINSVAL(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _STATUS_PINS copyVal)
{
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <DIO_setPINSVAL+0x6>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <DIO_setPINSVAL+0x8>
    17a4:	1f 92       	push	r1
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	9b 83       	std	Y+3, r25	; 0x03
    17ac:	8a 83       	std	Y+2, r24	; 0x02
    17ae:	6c 83       	std	Y+4, r22	; 0x04
    17b0:	4d 83       	std	Y+5, r20	; 0x05
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
    17b2:	19 82       	std	Y+1, r1	; 0x01
    17b4:	e7 c0       	rjmp	.+462    	; 0x1984 <DIO_setPINSVAL+0x1e8>
	{
		switch (copyVal)
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	91 05       	cpc	r25, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <DIO_setPINSVAL+0x28>
    17c2:	4f c0       	rjmp	.+158    	; 0x1862 <DIO_setPINSVAL+0xc6>
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	91 05       	cpc	r25, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <DIO_setPINSVAL+0x30>
    17ca:	92 c0       	rjmp	.+292    	; 0x18f0 <DIO_setPINSVAL+0x154>
    17cc:	89 2b       	or	r24, r25
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <DIO_setPINSVAL+0x36>
    17d0:	d6 c0       	rjmp	.+428    	; 0x197e <DIO_setPINSVAL+0x1e2>
		{
			case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2a 81       	ldd	r18, Y+2	; 0x02
    17da:	3b 81       	ldd	r19, Y+3	; 0x03
    17dc:	82 0f       	add	r24, r18
    17de:	93 1f       	adc	r25, r19
    17e0:	fc 01       	movw	r30, r24
    17e2:	80 81       	ld	r24, Z
    17e4:	86 95       	lsr	r24
    17e6:	86 95       	lsr	r24
    17e8:	86 95       	lsr	r24
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	86 57       	subi	r24, 0x76	; 118
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	fc 01       	movw	r30, r24
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	fc 01       	movw	r30, r24
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	2a 81       	ldd	r18, Y+2	; 0x02
    180a:	3b 81       	ldd	r19, Y+3	; 0x03
    180c:	82 0f       	add	r24, r18
    180e:	93 1f       	adc	r25, r19
    1810:	fc 01       	movw	r30, r24
    1812:	80 81       	ld	r24, Z
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9c 01       	movw	r18, r24
    181a:	27 70       	andi	r18, 0x07	; 7
    181c:	33 27       	eor	r19, r19
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <DIO_setPINSVAL+0x8c>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	2a 95       	dec	r18
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <DIO_setPINSVAL+0x88>
    182c:	80 95       	com	r24
    182e:	48 23       	and	r20, r24
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	2a 81       	ldd	r18, Y+2	; 0x02
    1838:	3b 81       	ldd	r19, Y+3	; 0x03
    183a:	82 0f       	add	r24, r18
    183c:	93 1f       	adc	r25, r19
    183e:	fc 01       	movw	r30, r24
    1840:	80 81       	ld	r24, Z
    1842:	86 95       	lsr	r24
    1844:	86 95       	lsr	r24
    1846:	86 95       	lsr	r24
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	86 57       	subi	r24, 0x76	; 118
    1852:	9f 4f       	sbci	r25, 0xFF	; 255
    1854:	fc 01       	movw	r30, r24
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	24 2f       	mov	r18, r20
    185c:	fc 01       	movw	r30, r24
    185e:	20 83       	st	Z, r18
    1860:	8e c0       	rjmp	.+284    	; 0x197e <DIO_setPINSVAL+0x1e2>
			case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	2a 81       	ldd	r18, Y+2	; 0x02
    186a:	3b 81       	ldd	r19, Y+3	; 0x03
    186c:	82 0f       	add	r24, r18
    186e:	93 1f       	adc	r25, r19
    1870:	fc 01       	movw	r30, r24
    1872:	80 81       	ld	r24, Z
    1874:	86 95       	lsr	r24
    1876:	86 95       	lsr	r24
    1878:	86 95       	lsr	r24
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	86 57       	subi	r24, 0x76	; 118
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	fc 01       	movw	r30, r24
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	fc 01       	movw	r30, r24
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	2a 81       	ldd	r18, Y+2	; 0x02
    189a:	3b 81       	ldd	r19, Y+3	; 0x03
    189c:	82 0f       	add	r24, r18
    189e:	93 1f       	adc	r25, r19
    18a0:	fc 01       	movw	r30, r24
    18a2:	80 81       	ld	r24, Z
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	9c 01       	movw	r18, r24
    18aa:	27 70       	andi	r18, 0x07	; 7
    18ac:	33 27       	eor	r19, r19
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_setPINSVAL+0x11c>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	2a 95       	dec	r18
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_setPINSVAL+0x118>
    18bc:	48 2b       	or	r20, r24
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	2a 81       	ldd	r18, Y+2	; 0x02
    18c6:	3b 81       	ldd	r19, Y+3	; 0x03
    18c8:	82 0f       	add	r24, r18
    18ca:	93 1f       	adc	r25, r19
    18cc:	fc 01       	movw	r30, r24
    18ce:	80 81       	ld	r24, Z
    18d0:	86 95       	lsr	r24
    18d2:	86 95       	lsr	r24
    18d4:	86 95       	lsr	r24
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	86 57       	subi	r24, 0x76	; 118
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	fc 01       	movw	r30, r24
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	24 2f       	mov	r18, r20
    18ea:	fc 01       	movw	r30, r24
    18ec:	20 83       	st	Z, r18
    18ee:	47 c0       	rjmp	.+142    	; 0x197e <DIO_setPINSVAL+0x1e2>
			case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	2a 81       	ldd	r18, Y+2	; 0x02
    18f8:	3b 81       	ldd	r19, Y+3	; 0x03
    18fa:	82 0f       	add	r24, r18
    18fc:	93 1f       	adc	r25, r19
    18fe:	fc 01       	movw	r30, r24
    1900:	80 81       	ld	r24, Z
    1902:	86 95       	lsr	r24
    1904:	86 95       	lsr	r24
    1906:	86 95       	lsr	r24
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	86 57       	subi	r24, 0x76	; 118
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	fc 01       	movw	r30, r24
    1916:	80 81       	ld	r24, Z
    1918:	91 81       	ldd	r25, Z+1	; 0x01
    191a:	fc 01       	movw	r30, r24
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	2a 81       	ldd	r18, Y+2	; 0x02
    1928:	3b 81       	ldd	r19, Y+3	; 0x03
    192a:	82 0f       	add	r24, r18
    192c:	93 1f       	adc	r25, r19
    192e:	fc 01       	movw	r30, r24
    1930:	80 81       	ld	r24, Z
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 01       	movw	r18, r24
    1938:	27 70       	andi	r18, 0x07	; 7
    193a:	33 27       	eor	r19, r19
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_setPINSVAL+0x1aa>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	2a 95       	dec	r18
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_setPINSVAL+0x1a6>
    194a:	48 27       	eor	r20, r24
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	2a 81       	ldd	r18, Y+2	; 0x02
    1954:	3b 81       	ldd	r19, Y+3	; 0x03
    1956:	82 0f       	add	r24, r18
    1958:	93 1f       	adc	r25, r19
    195a:	fc 01       	movw	r30, r24
    195c:	80 81       	ld	r24, Z
    195e:	86 95       	lsr	r24
    1960:	86 95       	lsr	r24
    1962:	86 95       	lsr	r24
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	86 57       	subi	r24, 0x76	; 118
    196e:	9f 4f       	sbci	r25, 0xFF	; 255
    1970:	fc 01       	movw	r30, r24
    1972:	80 81       	ld	r24, Z
    1974:	91 81       	ldd	r25, Z+1	; 0x01
    1976:	24 2f       	mov	r18, r20
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18
    197c:	00 00       	nop
 * @param4 : copyVal
 * @retVal : void
 */
void DIO_setPINSVAL(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _STATUS_PINS copyVal)
{
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	8f 5f       	subi	r24, 0xFF	; 255
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	99 81       	ldd	r25, Y+1	; 0x01
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	98 17       	cp	r25, r24
    198a:	08 f4       	brcc	.+2      	; 0x198e <DIO_setPINSVAL+0x1f2>
    198c:	14 cf       	rjmp	.-472    	; 0x17b6 <DIO_setPINSVAL+0x1a>
			case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
			case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
			case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
		}
	}
}
    198e:	00 00       	nop
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <DIO_getPinVAL>:
 * @param1 : copyPortNum
 * @param2 : copyPinNum
 * @retVal : Ret1
 */
Return_Value DIO_getPinVAL(_GPIO_PINS copyPinNum)
{
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <DIO_getPinVAL+0x6>
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Ret = Zero_INIT;
    19ac:	19 82       	std	Y+1, r1	; 0x01
	Ret = GET_BIT(*(ARR_PIN[copyPinNum / 8]),(copyPinNum % 8));
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	86 95       	lsr	r24
    19b2:	86 95       	lsr	r24
    19b4:	86 95       	lsr	r24
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	80 56       	subi	r24, 0x60	; 96
    19c0:	9f 4f       	sbci	r25, 0xFF	; 255
    19c2:	fc 01       	movw	r30, r24
    19c4:	80 81       	ld	r24, Z
    19c6:	91 81       	ldd	r25, Z+1	; 0x01
    19c8:	fc 01       	movw	r30, r24
    19ca:	80 81       	ld	r24, Z
    19cc:	88 2f       	mov	r24, r24
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	2a 81       	ldd	r18, Y+2	; 0x02
    19d2:	22 2f       	mov	r18, r18
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	27 70       	andi	r18, 0x07	; 7
    19d8:	33 27       	eor	r19, r19
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <DIO_getPinVAL+0x40>
    19dc:	95 95       	asr	r25
    19de:	87 95       	ror	r24
    19e0:	2a 95       	dec	r18
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <DIO_getPinVAL+0x3c>
    19e4:	81 70       	andi	r24, 0x01	; 1
    19e6:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <DIO_setPortDIR>:
 * @param1 : copyPortNum
 * @param2 : copyDir
 * @retVal : void
 */
void DIO_setPortDIR(_GPIO_PORTS copyPortNum,_DIRECTION_PORTS copyDir)
{
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <DIO_setPortDIR+0x6>
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	6a 83       	std	Y+2, r22	; 0x02
	*ARR_DDR[copyPortNum] = copyDir;
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	8c 58       	subi	r24, 0x8C	; 140
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	fc 01       	movw	r30, r24
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	2a 81       	ldd	r18, Y+2	; 0x02
    1a18:	fc 01       	movw	r30, r24
    1a1a:	20 83       	st	Z, r18
}
    1a1c:	00 00       	nop
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	08 95       	ret

00001a28 <DIO_setPortVAL>:
 * @param1 : copyPortNum
 * @param2 : copyVal
 * @retVal : void
 */
void DIO_setPortVAL(_GPIO_PORTS copyPortNum,_STATUS_PORTS copyVal)
{
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <DIO_setPortVAL+0x6>
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	6a 83       	std	Y+2, r22	; 0x02
	*ARR_PORT[copyPortNum] = copyVal;
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	88 2f       	mov	r24, r24
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	86 57       	subi	r24, 0x76	; 118
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	fc 01       	movw	r30, r24
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	2a 81       	ldd	r18, Y+2	; 0x02
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	20 83       	st	Z, r18
}
    1a50:	00 00       	nop
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <DIO_getPortVAL>:
 * @brief  : if DDxn configured input All port This function get Status from PINxn Register
 * @param1 : copyPortNum
 * @retVal : Ret1
 */
Return_Value DIO_getPortVAL(_GPIO_PORTS copyPortNum)
{
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <DIO_getPortVAL+0x6>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Ret = Zero_INIT;
    1a68:	19 82       	std	Y+1, r1	; 0x01
	Ret = *ARR_PIN[copyPortNum];
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	88 2f       	mov	r24, r24
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	80 56       	subi	r24, 0x60	; 96
    1a76:	9f 4f       	sbci	r25, 0xFF	; 255
    1a78:	fc 01       	movw	r30, r24
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	fc 01       	movw	r30, r24
    1a80:	80 81       	ld	r24, Z
    1a82:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	08 95       	ret

00001a90 <ADC_init>:
  * 		  By writing it to zero, the ADC is turned off. Select ADC VOLT Reference.
  * @param1 : void
  * @retVal : void
  */
void ADC_init(void)
{
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
#if (_ADC_VOLT == AVCC)
	CLR_BIT(ADMUX,REFS1);
    1a98:	87 e2       	ldi	r24, 0x27	; 39
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	20 81       	ld	r18, Z
    1aa0:	87 e2       	ldi	r24, 0x27	; 39
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	2f 77       	andi	r18, 0x7F	; 127
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	20 83       	st	Z, r18
	SET_BIT(ADMUX,REFS0);
    1aaa:	87 e2       	ldi	r24, 0x27	; 39
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	fc 01       	movw	r30, r24
    1ab0:	20 81       	ld	r18, Z
    1ab2:	87 e2       	ldi	r24, 0x27	; 39
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	20 64       	ori	r18, 0x40	; 64
    1ab8:	fc 01       	movw	r30, r24
    1aba:	20 83       	st	Z, r18
	SET_BIT(ADMUX,REFS1);
	SET_BIT(ADMUX,REFS0);
#endif

#if (ADC_AUTO_TRIGGER == FREE_RUNNING_MODE)
	CLR_BIT(SFIOR,ADTS2);
    1abc:	80 e5       	ldi	r24, 0x50	; 80
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	20 81       	ld	r18, Z
    1ac4:	80 e5       	ldi	r24, 0x50	; 80
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	2f 77       	andi	r18, 0x7F	; 127
    1aca:	fc 01       	movw	r30, r24
    1acc:	20 83       	st	Z, r18
	CLR_BIT(SFIOR,ADTS1);
    1ace:	80 e5       	ldi	r24, 0x50	; 80
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	20 81       	ld	r18, Z
    1ad6:	80 e5       	ldi	r24, 0x50	; 80
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	2f 7b       	andi	r18, 0xBF	; 191
    1adc:	fc 01       	movw	r30, r24
    1ade:	20 83       	st	Z, r18
	CLR_BIT(SFIOR,ADTS0);
    1ae0:	80 e5       	ldi	r24, 0x50	; 80
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	20 81       	ld	r18, Z
    1ae8:	80 e5       	ldi	r24, 0x50	; 80
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	2f 7d       	andi	r18, 0xDF	; 223
    1aee:	fc 01       	movw	r30, r24
    1af0:	20 83       	st	Z, r18
#elif (ADC_AUTO_TRIGGER == TIMER1_CAPTURE_MODE)
	SET_BIT(SFIOR,ADTS2);
	SET_BIT(SFIOR,ADTS1);
	SET_BIT(SFIOR,ADTS0);
#endif
	SET_BIT(ADCSRA,ADEN);
    1af2:	86 e2       	ldi	r24, 0x26	; 38
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	fc 01       	movw	r30, r24
    1af8:	20 81       	ld	r18, Z
    1afa:	86 e2       	ldi	r24, 0x26	; 38
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	20 68       	ori	r18, 0x80	; 128
    1b00:	fc 01       	movw	r30, r24
    1b02:	20 83       	st	Z, r18
	ADCSRA |= _ADC_PRESCALER_SELECT;
    1b04:	26 e2       	ldi	r18, 0x26	; 38
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	86 e2       	ldi	r24, 0x26	; 38
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	f9 01       	movw	r30, r18
    1b0e:	20 81       	ld	r18, Z
    1b10:	fc 01       	movw	r30, r24
    1b12:	20 83       	st	Z, r18
}
    1b14:	00 00       	nop
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <ADC_analogRead>:
  * 		  in variable uint_16
  * @param1 : copyChannel
  * @retVal : Ret1
  */
uint_16 ADC_analogRead(_ADC_CHANNELS copyChannel)
{
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <ADC_analogRead+0x6>
    1b22:	1f 92       	push	r1
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	8b 83       	std	Y+3, r24	; 0x03
	uint_16 Ret1 = Zero_INIT;
    1b2a:	1a 82       	std	Y+2, r1	; 0x02
    1b2c:	19 82       	std	Y+1, r1	; 0x01
	ADMUX &= _ADC_CLEAR_MASK;
    1b2e:	87 e2       	ldi	r24, 0x27	; 39
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	fc 01       	movw	r30, r24
    1b34:	20 81       	ld	r18, Z
    1b36:	87 e2       	ldi	r24, 0x27	; 39
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	20 7e       	andi	r18, 0xE0	; 224
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	20 83       	st	Z, r18
	ADMUX |= copyChannel;
    1b40:	87 e2       	ldi	r24, 0x27	; 39
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	fc 01       	movw	r30, r24
    1b46:	30 81       	ld	r19, Z
    1b48:	87 e2       	ldi	r24, 0x27	; 39
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4e:	23 2b       	or	r18, r19
    1b50:	fc 01       	movw	r30, r24
    1b52:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADSC);
    1b54:	86 e2       	ldi	r24, 0x26	; 38
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	fc 01       	movw	r30, r24
    1b5a:	20 81       	ld	r18, Z
    1b5c:	86 e2       	ldi	r24, 0x26	; 38
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	20 64       	ori	r18, 0x40	; 64
    1b62:	fc 01       	movw	r30, r24
    1b64:	20 83       	st	Z, r18
	while((GET_BIT(ADCSRA,ADSC)));	// polling data
    1b66:	00 00       	nop
    1b68:	86 e2       	ldi	r24, 0x26	; 38
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	80 81       	ld	r24, Z
    1b70:	82 95       	swap	r24
    1b72:	86 95       	lsr	r24
    1b74:	86 95       	lsr	r24
    1b76:	83 70       	andi	r24, 0x03	; 3
    1b78:	88 2f       	mov	r24, r24
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	81 70       	andi	r24, 0x01	; 1
    1b7e:	99 27       	eor	r25, r25
    1b80:	89 2b       	or	r24, r25
    1b82:	91 f7       	brne	.-28     	; 0x1b68 <ADC_analogRead+0x4c>
	Ret1 = ADCL;
    1b84:	84 e2       	ldi	r24, 0x24	; 36
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	fc 01       	movw	r30, r24
    1b8a:	80 81       	ld	r24, Z
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
	Ret1 |= (ADCH << 8);
    1b94:	85 e2       	ldi	r24, 0x25	; 37
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	fc 01       	movw	r30, r24
    1b9a:	80 81       	ld	r24, Z
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	98 2f       	mov	r25, r24
    1ba2:	88 27       	eor	r24, r24
    1ba4:	9c 01       	movw	r18, r24
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	82 2b       	or	r24, r18
    1bac:	93 2b       	or	r25, r19
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
	return Ret1;
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <ADC_enable>:
  * @brief  : ADC enable Writing the ADEN bit to one the ADC is turned on.
  * @param1 : void
  * @retVal : void
  */
void ADC_enable(void)
{
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
    1bca:	86 e2       	ldi	r24, 0x26	; 38
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	fc 01       	movw	r30, r24
    1bd0:	20 81       	ld	r18, Z
    1bd2:	86 e2       	ldi	r24, 0x26	; 38
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	20 68       	ori	r18, 0x80	; 128
    1bd8:	fc 01       	movw	r30, r24
    1bda:	20 83       	st	Z, r18
}
    1bdc:	00 00       	nop
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <ADC_disable>:
  * @brief  : ADC disable By writing it to zero, the ADC is turned off.
  * @param1 : void
  * @retVal : void
  */
void ADC_disable(void)
{
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADEN);
    1bec:	86 e2       	ldi	r24, 0x26	; 38
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	20 81       	ld	r18, Z
    1bf4:	86 e2       	ldi	r24, 0x26	; 38
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	2f 77       	andi	r18, 0x7F	; 127
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	20 83       	st	Z, r18
}
    1bfe:	00 00       	nop
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <ADC_enableInterrupt>:
  *  		  the ADC Conversion Complete Interrupt is activated.
  * @param1 : void
  * @retVal : void
  */
void ADC_enableInterrupt(void)
{
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
    1c0e:	8f e5       	ldi	r24, 0x5F	; 95
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	fc 01       	movw	r30, r24
    1c14:	20 81       	ld	r18, Z
    1c16:	8f e5       	ldi	r24, 0x5F	; 95
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	20 68       	ori	r18, 0x80	; 128
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADIE);
    1c20:	86 e2       	ldi	r24, 0x26	; 38
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	fc 01       	movw	r30, r24
    1c26:	20 81       	ld	r18, Z
    1c28:	86 e2       	ldi	r24, 0x26	; 38
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	28 60       	ori	r18, 0x08	; 8
    1c2e:	fc 01       	movw	r30, r24
    1c30:	20 83       	st	Z, r18
}
    1c32:	00 00       	nop
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	08 95       	ret

00001c3a <ADC_disableInterrupt>:
  *  		  the ADC Conversion Complete Interrupt is activated.
  * @param1 : void
  * @retVal : void
  */
void ADC_disableInterrupt(void)
{
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIE);
    1c42:	86 e2       	ldi	r24, 0x26	; 38
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	fc 01       	movw	r30, r24
    1c48:	20 81       	ld	r18, Z
    1c4a:	86 e2       	ldi	r24, 0x26	; 38
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	27 7f       	andi	r18, 0xF7	; 247
    1c50:	fc 01       	movw	r30, r24
    1c52:	20 83       	st	Z, r18
}
    1c54:	00 00       	nop
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	08 95       	ret

00001c5c <ADC_clearFlag>:
  * 		  conversion.
  * @param1 : void
  * @retVal : void
  */
void ADC_clearFlag(void)
{
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIF);
    1c64:	86 e2       	ldi	r24, 0x26	; 38
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	fc 01       	movw	r30, r24
    1c6a:	20 81       	ld	r18, Z
    1c6c:	86 e2       	ldi	r24, 0x26	; 38
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	2f 7e       	andi	r18, 0xEF	; 239
    1c72:	fc 01       	movw	r30, r24
    1c74:	20 83       	st	Z, r18
}
    1c76:	00 00       	nop
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <LCD_init>:
 *           if _LCD_MODE is _4_BIT_MODE_LCD then EN , RS , D4 ~ D7 is output pins.
 * @param1 : copyLCDNum
 * @retVal : void
 */
void LCD_init(PINS_LCD copyLCDNum)
{
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	e1 97       	sbiw	r28, 0x31	; 49
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	4c a7       	std	Y+44, r20	; 0x2c
    1c94:	5d a7       	std	Y+45, r21	; 0x2d
    1c96:	6e a7       	std	Y+46, r22	; 0x2e
    1c98:	7f a7       	std	Y+47, r23	; 0x2f
    1c9a:	88 ab       	std	Y+48, r24	; 0x30
    1c9c:	99 ab       	std	Y+49, r25	; 0x31
	LCD_writeCMD(copyLCDNum,_LCD_ENTERY_INC);
	LCD_writeCMD(copyLCDNum,_LCD_DISPLAY_ON);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
	LCD_writeCMD(copyLCDNum,0x80);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinDIR(copyLCDNum.EN, _DIRECTION_PIN_OUTPUT);
    1c9e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ca0:	61 e0       	ldi	r22, 0x01	; 1
    1ca2:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
	DIO_setPinDIR(copyLCDNum.RS, _DIRECTION_PIN_OUTPUT);
    1ca6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
	for(uint_8 count = Zero_INIT ; count < 4 ; count++)
    1cae:	19 82       	std	Y+1, r1	; 0x01
    1cb0:	10 c0       	rjmp	.+32     	; 0x1cd2 <LCD_init+0x54>
	{
		DIO_setPinDIR(copyLCDNum.D[count],_DIRECTION_PIN_OUTPUT);
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9e 01       	movw	r18, r28
    1cba:	22 5d       	subi	r18, 0xD2	; 210
    1cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbe:	82 0f       	add	r24, r18
    1cc0:	93 1f       	adc	r25, r19
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	80 81       	ld	r24, Z
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
	LCD_writeCMD(copyLCDNum,0x80);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinDIR(copyLCDNum.EN, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyLCDNum.RS, _DIRECTION_PIN_OUTPUT);
	for(uint_8 count = Zero_INIT ; count < 4 ; count++)
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	8f 5f       	subi	r24, 0xFF	; 255
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	84 30       	cpi	r24, 0x04	; 4
    1cd6:	68 f3       	brcs	.-38     	; 0x1cb2 <LCD_init+0x34>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 ea       	ldi	r26, 0xA0	; 160
    1cde:	b1 e4       	ldi	r27, 0x41	; 65
    1ce0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ce2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ce4:	a8 a3       	std	Y+32, r26	; 0x20
    1ce6:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a e7       	ldi	r20, 0x7A	; 122
    1cee:	53 e4       	ldi	r21, 0x43	; 67
    1cf0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1cf2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1cf4:	88 a1       	ldd	r24, Y+32	; 0x20
    1cf6:	99 a1       	ldd	r25, Y+33	; 0x21
    1cf8:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	8a a3       	std	Y+34, r24	; 0x22
    1d02:	9b a3       	std	Y+35, r25	; 0x23
    1d04:	ac a3       	std	Y+36, r26	; 0x24
    1d06:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e8       	ldi	r20, 0x80	; 128
    1d0e:	5f e3       	ldi	r21, 0x3F	; 63
    1d10:	6a a1       	ldd	r22, Y+34	; 0x22
    1d12:	7b a1       	ldd	r23, Y+35	; 0x23
    1d14:	8c a1       	ldd	r24, Y+36	; 0x24
    1d16:	9d a1       	ldd	r25, Y+37	; 0x25
    1d18:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <LCD_init+0xac>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9f a3       	std	Y+39, r25	; 0x27
    1d26:	8e a3       	std	Y+38, r24	; 0x26
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <LCD_init+0x12a>
	else if (__tmp > 65535)
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	3f ef       	ldi	r19, 0xFF	; 255
    1d2e:	4f e7       	ldi	r20, 0x7F	; 127
    1d30:	57 e4       	ldi	r21, 0x47	; 71
    1d32:	6a a1       	ldd	r22, Y+34	; 0x22
    1d34:	7b a1       	ldd	r23, Y+35	; 0x23
    1d36:	8c a1       	ldd	r24, Y+36	; 0x24
    1d38:	9d a1       	ldd	r25, Y+37	; 0x25
    1d3a:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <LCD_init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e2       	ldi	r20, 0x20	; 32
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1d4c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1d4e:	88 a1       	ldd	r24, Y+32	; 0x20
    1d50:	99 a1       	ldd	r25, Y+33	; 0x21
    1d52:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9f a3       	std	Y+39, r25	; 0x27
    1d68:	8e a3       	std	Y+38, r24	; 0x26
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <LCD_init+0x10c>
    1d6c:	89 e1       	ldi	r24, 0x19	; 25
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	99 a7       	std	Y+41, r25	; 0x29
    1d72:	88 a7       	std	Y+40, r24	; 0x28
    1d74:	88 a5       	ldd	r24, Y+40	; 0x28
    1d76:	99 a5       	ldd	r25, Y+41	; 0x29
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_init+0xfa>
    1d7c:	99 a7       	std	Y+41, r25	; 0x29
    1d7e:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8e a1       	ldd	r24, Y+38	; 0x26
    1d82:	9f a1       	ldd	r25, Y+39	; 0x27
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	9f a3       	std	Y+39, r25	; 0x27
    1d88:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8e a1       	ldd	r24, Y+38	; 0x26
    1d8c:	9f a1       	ldd	r25, Y+39	; 0x27
    1d8e:	89 2b       	or	r24, r25
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <LCD_init+0xee>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <LCD_init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	6a a1       	ldd	r22, Y+34	; 0x22
    1d96:	7b a1       	ldd	r23, Y+35	; 0x23
    1d98:	8c a1       	ldd	r24, Y+36	; 0x24
    1d9a:	9d a1       	ldd	r25, Y+37	; 0x25
    1d9c:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9f a3       	std	Y+39, r25	; 0x27
    1da6:	8e a3       	std	Y+38, r24	; 0x26
    1da8:	8e a1       	ldd	r24, Y+38	; 0x26
    1daa:	9f a1       	ldd	r25, Y+39	; 0x27
    1dac:	9b a7       	std	Y+43, r25	; 0x2b
    1dae:	8a a7       	std	Y+42, r24	; 0x2a
    1db0:	8a a5       	ldd	r24, Y+42	; 0x2a
    1db2:	9b a5       	ldd	r25, Y+43	; 0x2b
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_init+0x136>
    1db8:	9b a7       	std	Y+43, r25	; 0x2b
    1dba:	8a a7       	std	Y+42, r24	; 0x2a
	{
		DIO_setPinDIR(copyLCDNum.D[count],_DIRECTION_PIN_OUTPUT);
	}
	_delay_ms(20);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
    1dbc:	28 e3       	ldi	r18, 0x38	; 56
    1dbe:	4c a5       	ldd	r20, Y+44	; 0x2c
    1dc0:	5d a5       	ldd	r21, Y+45	; 0x2d
    1dc2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1dc4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1dc6:	88 a9       	ldd	r24, Y+48	; 0x30
    1dc8:	99 a9       	ldd	r25, Y+49	; 0x31
    1dca:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a0 ea       	ldi	r26, 0xA0	; 160
    1dd4:	b0 e4       	ldi	r27, 0x40	; 64
    1dd6:	88 8b       	std	Y+16, r24	; 0x10
    1dd8:	99 8b       	std	Y+17, r25	; 0x11
    1dda:	aa 8b       	std	Y+18, r26	; 0x12
    1ddc:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a e7       	ldi	r20, 0x7A	; 122
    1de4:	53 e4       	ldi	r21, 0x43	; 67
    1de6:	68 89       	ldd	r22, Y+16	; 0x10
    1de8:	79 89       	ldd	r23, Y+17	; 0x11
    1dea:	8a 89       	ldd	r24, Y+18	; 0x12
    1dec:	9b 89       	ldd	r25, Y+19	; 0x13
    1dee:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	8c 8b       	std	Y+20, r24	; 0x14
    1df8:	9d 8b       	std	Y+21, r25	; 0x15
    1dfa:	ae 8b       	std	Y+22, r26	; 0x16
    1dfc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	6c 89       	ldd	r22, Y+20	; 0x14
    1e08:	7d 89       	ldd	r23, Y+21	; 0x15
    1e0a:	8e 89       	ldd	r24, Y+22	; 0x16
    1e0c:	9f 89       	ldd	r25, Y+23	; 0x17
    1e0e:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
    1e12:	88 23       	and	r24, r24
    1e14:	2c f4       	brge	.+10     	; 0x1e20 <LCD_init+0x1a2>
		__ticks = 1;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	99 8f       	std	Y+25, r25	; 0x19
    1e1c:	88 8f       	std	Y+24, r24	; 0x18
    1e1e:	3f c0       	rjmp	.+126    	; 0x1e9e <LCD_init+0x220>
	else if (__tmp > 65535)
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	6c 89       	ldd	r22, Y+20	; 0x14
    1e2a:	7d 89       	ldd	r23, Y+21	; 0x15
    1e2c:	8e 89       	ldd	r24, Y+22	; 0x16
    1e2e:	9f 89       	ldd	r25, Y+23	; 0x17
    1e30:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	4c f5       	brge	.+82     	; 0x1e8a <LCD_init+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	68 89       	ldd	r22, Y+16	; 0x10
    1e42:	79 89       	ldd	r23, Y+17	; 0x11
    1e44:	8a 89       	ldd	r24, Y+18	; 0x12
    1e46:	9b 89       	ldd	r25, Y+19	; 0x13
    1e48:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	99 8f       	std	Y+25, r25	; 0x19
    1e5e:	88 8f       	std	Y+24, r24	; 0x18
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <LCD_init+0x202>
    1e62:	89 e1       	ldi	r24, 0x19	; 25
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9b 8f       	std	Y+27, r25	; 0x1b
    1e68:	8a 8f       	std	Y+26, r24	; 0x1a
    1e6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_init+0x1f0>
    1e72:	9b 8f       	std	Y+27, r25	; 0x1b
    1e74:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e76:	88 8d       	ldd	r24, Y+24	; 0x18
    1e78:	99 8d       	ldd	r25, Y+25	; 0x19
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	99 8f       	std	Y+25, r25	; 0x19
    1e7e:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e80:	88 8d       	ldd	r24, Y+24	; 0x18
    1e82:	99 8d       	ldd	r25, Y+25	; 0x19
    1e84:	89 2b       	or	r24, r25
    1e86:	69 f7       	brne	.-38     	; 0x1e62 <LCD_init+0x1e4>
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <LCD_init+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8a:	6c 89       	ldd	r22, Y+20	; 0x14
    1e8c:	7d 89       	ldd	r23, Y+21	; 0x15
    1e8e:	8e 89       	ldd	r24, Y+22	; 0x16
    1e90:	9f 89       	ldd	r25, Y+23	; 0x17
    1e92:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	99 8f       	std	Y+25, r25	; 0x19
    1e9c:	88 8f       	std	Y+24, r24	; 0x18
    1e9e:	88 8d       	ldd	r24, Y+24	; 0x18
    1ea0:	99 8d       	ldd	r25, Y+25	; 0x19
    1ea2:	9d 8f       	std	Y+29, r25	; 0x1d
    1ea4:	8c 8f       	std	Y+28, r24	; 0x1c
    1ea6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ea8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <LCD_init+0x22c>
    1eae:	9d 8f       	std	Y+29, r25	; 0x1d
    1eb0:	8c 8f       	std	Y+28, r24	; 0x1c
	_delay_ms(5);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
    1eb2:	28 e3       	ldi	r18, 0x38	; 56
    1eb4:	4c a5       	ldd	r20, Y+44	; 0x2c
    1eb6:	5d a5       	ldd	r21, Y+45	; 0x2d
    1eb8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1eba:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ebc:	88 a9       	ldd	r24, Y+48	; 0x30
    1ebe:	99 a9       	ldd	r25, Y+49	; 0x31
    1ec0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a6 e1       	ldi	r26, 0x16	; 22
    1eca:	b3 e4       	ldi	r27, 0x43	; 67
    1ecc:	8a 83       	std	Y+2, r24	; 0x02
    1ece:	9b 83       	std	Y+3, r25	; 0x03
    1ed0:	ac 83       	std	Y+4, r26	; 0x04
    1ed2:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4a e7       	ldi	r20, 0x7A	; 122
    1eda:	53 e4       	ldi	r21, 0x43	; 67
    1edc:	6a 81       	ldd	r22, Y+2	; 0x02
    1ede:	7b 81       	ldd	r23, Y+3	; 0x03
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	8e 83       	std	Y+6, r24	; 0x06
    1eee:	9f 83       	std	Y+7, r25	; 0x07
    1ef0:	a8 87       	std	Y+8, r26	; 0x08
    1ef2:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	6e 81       	ldd	r22, Y+6	; 0x06
    1efe:	7f 81       	ldd	r23, Y+7	; 0x07
    1f00:	88 85       	ldd	r24, Y+8	; 0x08
    1f02:	99 85       	ldd	r25, Y+9	; 0x09
    1f04:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	2c f4       	brge	.+10     	; 0x1f16 <LCD_init+0x298>
		__ticks = 1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9b 87       	std	Y+11, r25	; 0x0b
    1f12:	8a 87       	std	Y+10, r24	; 0x0a
    1f14:	3f c0       	rjmp	.+126    	; 0x1f94 <LCD_init+0x316>
	else if (__tmp > 65535)
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	4f e7       	ldi	r20, 0x7F	; 127
    1f1c:	57 e4       	ldi	r21, 0x47	; 71
    1f1e:	6e 81       	ldd	r22, Y+6	; 0x06
    1f20:	7f 81       	ldd	r23, Y+7	; 0x07
    1f22:	88 85       	ldd	r24, Y+8	; 0x08
    1f24:	99 85       	ldd	r25, Y+9	; 0x09
    1f26:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
    1f2a:	18 16       	cp	r1, r24
    1f2c:	4c f5       	brge	.+82     	; 0x1f80 <LCD_init+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e2       	ldi	r20, 0x20	; 32
    1f34:	51 e4       	ldi	r21, 0x41	; 65
    1f36:	6a 81       	ldd	r22, Y+2	; 0x02
    1f38:	7b 81       	ldd	r23, Y+3	; 0x03
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3e:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9b 87       	std	Y+11, r25	; 0x0b
    1f54:	8a 87       	std	Y+10, r24	; 0x0a
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <LCD_init+0x2f8>
    1f58:	89 e1       	ldi	r24, 0x19	; 25
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9d 87       	std	Y+13, r25	; 0x0d
    1f5e:	8c 87       	std	Y+12, r24	; 0x0c
    1f60:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f62:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <LCD_init+0x2e6>
    1f68:	9d 87       	std	Y+13, r25	; 0x0d
    1f6a:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	9b 87       	std	Y+11, r25	; 0x0b
    1f74:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f78:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7a:	89 2b       	or	r24, r25
    1f7c:	69 f7       	brne	.-38     	; 0x1f58 <LCD_init+0x2da>
    1f7e:	14 c0       	rjmp	.+40     	; 0x1fa8 <LCD_init+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f80:	6e 81       	ldd	r22, Y+6	; 0x06
    1f82:	7f 81       	ldd	r23, Y+7	; 0x07
    1f84:	88 85       	ldd	r24, Y+8	; 0x08
    1f86:	99 85       	ldd	r25, Y+9	; 0x09
    1f88:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9b 87       	std	Y+11, r25	; 0x0b
    1f92:	8a 87       	std	Y+10, r24	; 0x0a
    1f94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f98:	9f 87       	std	Y+15, r25	; 0x0f
    1f9a:	8e 87       	std	Y+14, r24	; 0x0e
    1f9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_init+0x322>
    1fa4:	9f 87       	std	Y+15, r25	; 0x0f
    1fa6:	8e 87       	std	Y+14, r24	; 0x0e
	_delay_ms(150);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
    1fa8:	28 e3       	ldi	r18, 0x38	; 56
    1faa:	4c a5       	ldd	r20, Y+44	; 0x2c
    1fac:	5d a5       	ldd	r21, Y+45	; 0x2d
    1fae:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fb0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fb2:	88 a9       	ldd	r24, Y+48	; 0x30
    1fb4:	99 a9       	ldd	r25, Y+49	; 0x31
    1fb6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_CLEAR_DIS);
    1fba:	21 e0       	ldi	r18, 0x01	; 1
    1fbc:	4c a5       	ldd	r20, Y+44	; 0x2c
    1fbe:	5d a5       	ldd	r21, Y+45	; 0x2d
    1fc0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fc2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fc4:	88 a9       	ldd	r24, Y+48	; 0x30
    1fc6:	99 a9       	ldd	r25, Y+49	; 0x31
    1fc8:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_RETURN_HOME);
    1fcc:	22 e0       	ldi	r18, 0x02	; 2
    1fce:	4c a5       	ldd	r20, Y+44	; 0x2c
    1fd0:	5d a5       	ldd	r21, Y+45	; 0x2d
    1fd2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fd4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fd6:	88 a9       	ldd	r24, Y+48	; 0x30
    1fd8:	99 a9       	ldd	r25, Y+49	; 0x31
    1fda:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_ENTERY_INC);
    1fde:	26 e0       	ldi	r18, 0x06	; 6
    1fe0:	4c a5       	ldd	r20, Y+44	; 0x2c
    1fe2:	5d a5       	ldd	r21, Y+45	; 0x2d
    1fe4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fe6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fe8:	88 a9       	ldd	r24, Y+48	; 0x30
    1fea:	99 a9       	ldd	r25, Y+49	; 0x31
    1fec:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_DISPLAY_ON);
    1ff0:	2c e0       	ldi	r18, 0x0C	; 12
    1ff2:	4c a5       	ldd	r20, Y+44	; 0x2c
    1ff4:	5d a5       	ldd	r21, Y+45	; 0x2d
    1ff6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ff8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ffa:	88 a9       	ldd	r24, Y+48	; 0x30
    1ffc:	99 a9       	ldd	r25, Y+49	; 0x31
    1ffe:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_4_BIT_MODE);
    2002:	28 e2       	ldi	r18, 0x28	; 40
    2004:	4c a5       	ldd	r20, Y+44	; 0x2c
    2006:	5d a5       	ldd	r21, Y+45	; 0x2d
    2008:	6e a5       	ldd	r22, Y+46	; 0x2e
    200a:	7f a5       	ldd	r23, Y+47	; 0x2f
    200c:	88 a9       	ldd	r24, Y+48	; 0x30
    200e:	99 a9       	ldd	r25, Y+49	; 0x31
    2010:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,0x80);
    2014:	20 e8       	ldi	r18, 0x80	; 128
    2016:	4c a5       	ldd	r20, Y+44	; 0x2c
    2018:	5d a5       	ldd	r21, Y+45	; 0x2d
    201a:	6e a5       	ldd	r22, Y+46	; 0x2e
    201c:	7f a5       	ldd	r23, Y+47	; 0x2f
    201e:	88 a9       	ldd	r24, Y+48	; 0x30
    2020:	99 a9       	ldd	r25, Y+49	; 0x31
    2022:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
	#endif
}
    2026:	00 00       	nop
    2028:	e1 96       	adiw	r28, 0x31	; 49
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <LCD_writeCMD>:
 * @param1 : copyLCDNum
 * @param2 : copyCMD
 * @retVal : void
 */
void LCD_writeCMD(PINS_LCD copyLCDNum, _LCD_COMMANDS copyCMD)
{
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	00 d0       	rcall	.+0      	; 0x2040 <LCD_writeCMD+0x6>
    2040:	00 d0       	rcall	.+0      	; 0x2042 <LCD_writeCMD+0x8>
    2042:	00 d0       	rcall	.+0      	; 0x2044 <LCD_writeCMD+0xa>
    2044:	1f 92       	push	r1
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	49 83       	std	Y+1, r20	; 0x01
    204c:	5a 83       	std	Y+2, r21	; 0x02
    204e:	6b 83       	std	Y+3, r22	; 0x03
    2050:	7c 83       	std	Y+4, r23	; 0x04
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	9e 83       	std	Y+6, r25	; 0x06
    2056:	2f 83       	std	Y+7, r18	; 0x07
#if (_LCD_MODE == _8_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_LOW);
	DIO_setPortVAL(copyLCDNum.PORT_DATA_PIN_NUM, copyCMD);
	LCD_enableSignal(LCD);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_LOW);
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	LCD_getData(copyLCDNum , copyCMD >> 4);
    2060:	8f 81       	ldd	r24, Y+7	; 0x07
    2062:	82 95       	swap	r24
    2064:	8f 70       	andi	r24, 0x0F	; 15
    2066:	28 2f       	mov	r18, r24
    2068:	49 81       	ldd	r20, Y+1	; 0x01
    206a:	5a 81       	ldd	r21, Y+2	; 0x02
    206c:	6b 81       	ldd	r22, Y+3	; 0x03
    206e:	7c 81       	ldd	r23, Y+4	; 0x04
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_getData>
	LCD_enableSignal(LCD);
    2078:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
    207c:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
    2080:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
    2084:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
    2088:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
    208c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
    2090:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_enableSignal>
	LCD_getData(copyLCDNum,copyCMD);
    2094:	2f 81       	ldd	r18, Y+7	; 0x07
    2096:	49 81       	ldd	r20, Y+1	; 0x01
    2098:	5a 81       	ldd	r21, Y+2	; 0x02
    209a:	6b 81       	ldd	r22, Y+3	; 0x03
    209c:	7c 81       	ldd	r23, Y+4	; 0x04
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_getData>
	LCD_enableSignal(LCD);
    20a6:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
    20aa:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
    20ae:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
    20b2:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
    20b6:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
    20ba:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
    20be:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_enableSignal>
#endif
}
    20c2:	00 00       	nop
    20c4:	27 96       	adiw	r28, 0x07	; 7
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	08 95       	ret

000020d6 <LCD_writeChar>:
 * @param1 : copyLCDNum
 * @param2 : copyChar
 * @retVal : void
 */
void LCD_writeChar(PINS_LCD copyLCDNum, uint_8 copyChar)
{
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	00 d0       	rcall	.+0      	; 0x20dc <LCD_writeChar+0x6>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <LCD_writeChar+0x8>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <LCD_writeChar+0xa>
    20e0:	1f 92       	push	r1
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	49 83       	std	Y+1, r20	; 0x01
    20e8:	5a 83       	std	Y+2, r21	; 0x02
    20ea:	6b 83       	std	Y+3, r22	; 0x03
    20ec:	7c 83       	std	Y+4, r23	; 0x04
    20ee:	8d 83       	std	Y+5, r24	; 0x05
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	2f 83       	std	Y+7, r18	; 0x07
#if (_LCD_MODE == _8_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_HIGH);
	DIO_setPortVAL(copyLCDNum.PORT_DATA_PIN_NUM, copyChar);
	LCD_enableSignal(LCD);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_HIGH);
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	61 e0       	ldi	r22, 0x01	; 1
    20f8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	LCD_getData(copyLCDNum , copyChar >> 4);
    20fc:	8f 81       	ldd	r24, Y+7	; 0x07
    20fe:	82 95       	swap	r24
    2100:	8f 70       	andi	r24, 0x0F	; 15
    2102:	28 2f       	mov	r18, r24
    2104:	49 81       	ldd	r20, Y+1	; 0x01
    2106:	5a 81       	ldd	r21, Y+2	; 0x02
    2108:	6b 81       	ldd	r22, Y+3	; 0x03
    210a:	7c 81       	ldd	r23, Y+4	; 0x04
    210c:	8d 81       	ldd	r24, Y+5	; 0x05
    210e:	9e 81       	ldd	r25, Y+6	; 0x06
    2110:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_getData>
	LCD_enableSignal(LCD);
    2114:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
    2118:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
    211c:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
    2120:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
    2124:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
    2128:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
    212c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_enableSignal>
	LCD_getData(copyLCDNum,copyChar);
    2130:	2f 81       	ldd	r18, Y+7	; 0x07
    2132:	49 81       	ldd	r20, Y+1	; 0x01
    2134:	5a 81       	ldd	r21, Y+2	; 0x02
    2136:	6b 81       	ldd	r22, Y+3	; 0x03
    2138:	7c 81       	ldd	r23, Y+4	; 0x04
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_getData>
	LCD_enableSignal(LCD);
    2142:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
    2146:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
    214a:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
    214e:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
    2152:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
    2156:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
    215a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_enableSignal>
#endif
}
    215e:	00 00       	nop
    2160:	27 96       	adiw	r28, 0x07	; 7
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	08 95       	ret

00002172 <LCD_writeSTR>:
 * @param1 : copyLCDNum
 * @param2 : copySTR
 * @retVal : void
 */
void LCD_writeSTR(PINS_LCD copyLCDNum, uint_8 *copySTR)
{
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	28 97       	sbiw	r28, 0x08	; 8
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	49 83       	std	Y+1, r20	; 0x01
    2188:	5a 83       	std	Y+2, r21	; 0x02
    218a:	6b 83       	std	Y+3, r22	; 0x03
    218c:	7c 83       	std	Y+4, r23	; 0x04
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	38 87       	std	Y+8, r19	; 0x08
    2194:	2f 83       	std	Y+7, r18	; 0x07
	while(*copySTR)
    2196:	12 c0       	rjmp	.+36     	; 0x21bc <LCD_writeSTR+0x4a>
	{
		LCD_writeChar(copyLCDNum, *copySTR++);
    2198:	8f 81       	ldd	r24, Y+7	; 0x07
    219a:	98 85       	ldd	r25, Y+8	; 0x08
    219c:	9c 01       	movw	r18, r24
    219e:	2f 5f       	subi	r18, 0xFF	; 255
    21a0:	3f 4f       	sbci	r19, 0xFF	; 255
    21a2:	38 87       	std	Y+8, r19	; 0x08
    21a4:	2f 83       	std	Y+7, r18	; 0x07
    21a6:	fc 01       	movw	r30, r24
    21a8:	80 81       	ld	r24, Z
    21aa:	28 2f       	mov	r18, r24
    21ac:	49 81       	ldd	r20, Y+1	; 0x01
    21ae:	5a 81       	ldd	r21, Y+2	; 0x02
    21b0:	6b 81       	ldd	r22, Y+3	; 0x03
    21b2:	7c 81       	ldd	r23, Y+4	; 0x04
    21b4:	8d 81       	ldd	r24, Y+5	; 0x05
    21b6:	9e 81       	ldd	r25, Y+6	; 0x06
    21b8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_writeChar>
 * @param2 : copySTR
 * @retVal : void
 */
void LCD_writeSTR(PINS_LCD copyLCDNum, uint_8 *copySTR)
{
	while(*copySTR)
    21bc:	8f 81       	ldd	r24, Y+7	; 0x07
    21be:	98 85       	ldd	r25, Y+8	; 0x08
    21c0:	fc 01       	movw	r30, r24
    21c2:	80 81       	ld	r24, Z
    21c4:	88 23       	and	r24, r24
    21c6:	41 f7       	brne	.-48     	; 0x2198 <LCD_writeSTR+0x26>
	{
		LCD_writeChar(copyLCDNum, *copySTR++);
	}
}
    21c8:	00 00       	nop
    21ca:	28 96       	adiw	r28, 0x08	; 8
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	08 95       	ret

000021dc <LCD_writeNum_u8>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u8(PINS_LCD copyLCDNum, uint_8 *copyNum)
{
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	2d 97       	sbiw	r28, 0x0d	; 13
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	4e 83       	std	Y+6, r20	; 0x06
    21f2:	5f 83       	std	Y+7, r21	; 0x07
    21f4:	68 87       	std	Y+8, r22	; 0x08
    21f6:	79 87       	std	Y+9, r23	; 0x09
    21f8:	8a 87       	std	Y+10, r24	; 0x0a
    21fa:	9b 87       	std	Y+11, r25	; 0x0b
    21fc:	3d 87       	std	Y+13, r19	; 0x0d
    21fe:	2c 87       	std	Y+12, r18	; 0x0c
	uint_8 Ret[5];
	LCD_convertNum_u8(copyNum, &Ret);
    2200:	8c 85       	ldd	r24, Y+12	; 0x0c
    2202:	9d 85       	ldd	r25, Y+13	; 0x0d
    2204:	28 2f       	mov	r18, r24
    2206:	ce 01       	movw	r24, r28
    2208:	01 96       	adiw	r24, 0x01	; 1
    220a:	bc 01       	movw	r22, r24
    220c:	82 2f       	mov	r24, r18
    220e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_convertNum_u8>
	LCD_writeSTR(copyLCDNum, Ret);
    2212:	ce 01       	movw	r24, r28
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	9c 01       	movw	r18, r24
    2218:	4e 81       	ldd	r20, Y+6	; 0x06
    221a:	5f 81       	ldd	r21, Y+7	; 0x07
    221c:	68 85       	ldd	r22, Y+8	; 0x08
    221e:	79 85       	ldd	r23, Y+9	; 0x09
    2220:	8a 85       	ldd	r24, Y+10	; 0x0a
    2222:	9b 85       	ldd	r25, Y+11	; 0x0b
    2224:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
}
    2228:	00 00       	nop
    222a:	2d 96       	adiw	r28, 0x0d	; 13
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	08 95       	ret

0000223c <LCD_writeNum_u16>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u16(PINS_LCD copyLCDNum, uint_16 *copyNum)
{
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	62 97       	sbiw	r28, 0x12	; 18
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	4b 87       	std	Y+11, r20	; 0x0b
    2252:	5c 87       	std	Y+12, r21	; 0x0c
    2254:	6d 87       	std	Y+13, r22	; 0x0d
    2256:	7e 87       	std	Y+14, r23	; 0x0e
    2258:	8f 87       	std	Y+15, r24	; 0x0f
    225a:	98 8b       	std	Y+16, r25	; 0x10
    225c:	3a 8b       	std	Y+18, r19	; 0x12
    225e:	29 8b       	std	Y+17, r18	; 0x11
	uint_16 Ret[5];
	LCD_convertNum_u16(copyNum, &Ret);
    2260:	89 89       	ldd	r24, Y+17	; 0x11
    2262:	9a 89       	ldd	r25, Y+18	; 0x12
    2264:	9e 01       	movw	r18, r28
    2266:	2f 5f       	subi	r18, 0xFF	; 255
    2268:	3f 4f       	sbci	r19, 0xFF	; 255
    226a:	b9 01       	movw	r22, r18
    226c:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_convertNum_u16>
	LCD_writeSTR(copyLCDNum, Ret);
    2270:	ce 01       	movw	r24, r28
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	9c 01       	movw	r18, r24
    2276:	4b 85       	ldd	r20, Y+11	; 0x0b
    2278:	5c 85       	ldd	r21, Y+12	; 0x0c
    227a:	6d 85       	ldd	r22, Y+13	; 0x0d
    227c:	7e 85       	ldd	r23, Y+14	; 0x0e
    227e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2280:	98 89       	ldd	r25, Y+16	; 0x10
    2282:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
}
    2286:	00 00       	nop
    2288:	62 96       	adiw	r28, 0x12	; 18
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	08 95       	ret

0000229a <LCD_writeNum_u32>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u32(PINS_LCD copyLCDNum, uint_32 *copyNum)
{
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	6c 97       	sbiw	r28, 0x1c	; 28
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	4d 8b       	std	Y+21, r20	; 0x15
    22b0:	5e 8b       	std	Y+22, r21	; 0x16
    22b2:	6f 8b       	std	Y+23, r22	; 0x17
    22b4:	78 8f       	std	Y+24, r23	; 0x18
    22b6:	89 8f       	std	Y+25, r24	; 0x19
    22b8:	9a 8f       	std	Y+26, r25	; 0x1a
    22ba:	3c 8f       	std	Y+28, r19	; 0x1c
    22bc:	2b 8f       	std	Y+27, r18	; 0x1b
	uint_32 Ret[5];
	LCD_convertNum_u32(copyNum, &Ret);
    22be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c2:	09 2e       	mov	r0, r25
    22c4:	00 0c       	add	r0, r0
    22c6:	aa 0b       	sbc	r26, r26
    22c8:	bb 0b       	sbc	r27, r27
    22ca:	9e 01       	movw	r18, r28
    22cc:	2f 5f       	subi	r18, 0xFF	; 255
    22ce:	3f 4f       	sbci	r19, 0xFF	; 255
    22d0:	a9 01       	movw	r20, r18
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_convertNum_u32>
	LCD_writeSTR(copyLCDNum, Ret);
    22da:	ce 01       	movw	r24, r28
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	9c 01       	movw	r18, r24
    22e0:	4d 89       	ldd	r20, Y+21	; 0x15
    22e2:	5e 89       	ldd	r21, Y+22	; 0x16
    22e4:	6f 89       	ldd	r22, Y+23	; 0x17
    22e6:	78 8d       	ldd	r23, Y+24	; 0x18
    22e8:	89 8d       	ldd	r24, Y+25	; 0x19
    22ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22ec:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
}
    22f0:	00 00       	nop
    22f2:	6c 96       	adiw	r28, 0x1c	; 28
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	08 95       	ret

00002304 <LCD_writeCharPosition>:
 * @param3 : copyColumn
 * @param4 : copyChar
 * @retVal : void
 */
void LCD_writeCharPosition(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn, uint_8 copyChar)
{
    2304:	ef 92       	push	r14
    2306:	0f 93       	push	r16
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	29 97       	sbiw	r28, 0x09	; 9
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	49 83       	std	Y+1, r20	; 0x01
    231e:	5a 83       	std	Y+2, r21	; 0x02
    2320:	6b 83       	std	Y+3, r22	; 0x03
    2322:	7c 83       	std	Y+4, r23	; 0x04
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	2f 83       	std	Y+7, r18	; 0x07
    232a:	08 87       	std	Y+8, r16	; 0x08
    232c:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    232e:	08 85       	ldd	r16, Y+8	; 0x08
    2330:	2f 81       	ldd	r18, Y+7	; 0x07
    2332:	49 81       	ldd	r20, Y+1	; 0x01
    2334:	5a 81       	ldd	r21, Y+2	; 0x02
    2336:	6b 81       	ldd	r22, Y+3	; 0x03
    2338:	7c 81       	ldd	r23, Y+4	; 0x04
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_setCursorPosition>
	LCD_writeChar(copyLCDNum, copyChar);
    2342:	29 85       	ldd	r18, Y+9	; 0x09
    2344:	49 81       	ldd	r20, Y+1	; 0x01
    2346:	5a 81       	ldd	r21, Y+2	; 0x02
    2348:	6b 81       	ldd	r22, Y+3	; 0x03
    234a:	7c 81       	ldd	r23, Y+4	; 0x04
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_writeChar>
}
    2354:	00 00       	nop
    2356:	29 96       	adiw	r28, 0x09	; 9
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	0f 91       	pop	r16
    2368:	ef 90       	pop	r14
    236a:	08 95       	ret

0000236c <LCD_writeSTRPosition>:
 * @param3 : copyColumn
 * @param4 : copySTR
 * @retVal : void
 */
void LCD_writeSTRPosition(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_8 *copySTR)
{
    236c:	ef 92       	push	r14
    236e:	ff 92       	push	r15
    2370:	0f 93       	push	r16
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	2a 97       	sbiw	r28, 0x0a	; 10
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	49 83       	std	Y+1, r20	; 0x01
    2388:	5a 83       	std	Y+2, r21	; 0x02
    238a:	6b 83       	std	Y+3, r22	; 0x03
    238c:	7c 83       	std	Y+4, r23	; 0x04
    238e:	8d 83       	std	Y+5, r24	; 0x05
    2390:	9e 83       	std	Y+6, r25	; 0x06
    2392:	2f 83       	std	Y+7, r18	; 0x07
    2394:	08 87       	std	Y+8, r16	; 0x08
    2396:	fa 86       	std	Y+10, r15	; 0x0a
    2398:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    239a:	08 85       	ldd	r16, Y+8	; 0x08
    239c:	2f 81       	ldd	r18, Y+7	; 0x07
    239e:	49 81       	ldd	r20, Y+1	; 0x01
    23a0:	5a 81       	ldd	r21, Y+2	; 0x02
    23a2:	6b 81       	ldd	r22, Y+3	; 0x03
    23a4:	7c 81       	ldd	r23, Y+4	; 0x04
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_setCursorPosition>
	LCD_writeSTR(copyLCDNum, copySTR);
    23ae:	89 85       	ldd	r24, Y+9	; 0x09
    23b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b2:	9c 01       	movw	r18, r24
    23b4:	49 81       	ldd	r20, Y+1	; 0x01
    23b6:	5a 81       	ldd	r21, Y+2	; 0x02
    23b8:	6b 81       	ldd	r22, Y+3	; 0x03
    23ba:	7c 81       	ldd	r23, Y+4	; 0x04
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
}
    23c4:	00 00       	nop
    23c6:	2a 96       	adiw	r28, 0x0a	; 10
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	0f 91       	pop	r16
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	08 95       	ret

000023de <LCD_writeNum_u8Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u8Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_8 *copyNum)
{
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	0f 93       	push	r16
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	2a 97       	sbiw	r28, 0x0a	; 10
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	49 83       	std	Y+1, r20	; 0x01
    23fa:	5a 83       	std	Y+2, r21	; 0x02
    23fc:	6b 83       	std	Y+3, r22	; 0x03
    23fe:	7c 83       	std	Y+4, r23	; 0x04
    2400:	8d 83       	std	Y+5, r24	; 0x05
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	2f 83       	std	Y+7, r18	; 0x07
    2406:	08 87       	std	Y+8, r16	; 0x08
    2408:	fa 86       	std	Y+10, r15	; 0x0a
    240a:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    240c:	08 85       	ldd	r16, Y+8	; 0x08
    240e:	2f 81       	ldd	r18, Y+7	; 0x07
    2410:	49 81       	ldd	r20, Y+1	; 0x01
    2412:	5a 81       	ldd	r21, Y+2	; 0x02
    2414:	6b 81       	ldd	r22, Y+3	; 0x03
    2416:	7c 81       	ldd	r23, Y+4	; 0x04
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_setCursorPosition>
	LCD_writeNum_u8(copyLCDNum, copyNum);
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	9c 01       	movw	r18, r24
    2426:	49 81       	ldd	r20, Y+1	; 0x01
    2428:	5a 81       	ldd	r21, Y+2	; 0x02
    242a:	6b 81       	ldd	r22, Y+3	; 0x03
    242c:	7c 81       	ldd	r23, Y+4	; 0x04
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_writeNum_u8>
}
    2436:	00 00       	nop
    2438:	2a 96       	adiw	r28, 0x0a	; 10
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	08 95       	ret

00002450 <LCD_writeNum_u16Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u16Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_16 *copyNum)
{
    2450:	ef 92       	push	r14
    2452:	ff 92       	push	r15
    2454:	0f 93       	push	r16
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	2a 97       	sbiw	r28, 0x0a	; 10
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	49 83       	std	Y+1, r20	; 0x01
    246c:	5a 83       	std	Y+2, r21	; 0x02
    246e:	6b 83       	std	Y+3, r22	; 0x03
    2470:	7c 83       	std	Y+4, r23	; 0x04
    2472:	8d 83       	std	Y+5, r24	; 0x05
    2474:	9e 83       	std	Y+6, r25	; 0x06
    2476:	2f 83       	std	Y+7, r18	; 0x07
    2478:	08 87       	std	Y+8, r16	; 0x08
    247a:	fa 86       	std	Y+10, r15	; 0x0a
    247c:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    247e:	08 85       	ldd	r16, Y+8	; 0x08
    2480:	2f 81       	ldd	r18, Y+7	; 0x07
    2482:	49 81       	ldd	r20, Y+1	; 0x01
    2484:	5a 81       	ldd	r21, Y+2	; 0x02
    2486:	6b 81       	ldd	r22, Y+3	; 0x03
    2488:	7c 81       	ldd	r23, Y+4	; 0x04
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_setCursorPosition>
	LCD_writeNum_u16(copyLCDNum, copyNum);
    2492:	89 85       	ldd	r24, Y+9	; 0x09
    2494:	9a 85       	ldd	r25, Y+10	; 0x0a
    2496:	9c 01       	movw	r18, r24
    2498:	49 81       	ldd	r20, Y+1	; 0x01
    249a:	5a 81       	ldd	r21, Y+2	; 0x02
    249c:	6b 81       	ldd	r22, Y+3	; 0x03
    249e:	7c 81       	ldd	r23, Y+4	; 0x04
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	9e 81       	ldd	r25, Y+6	; 0x06
    24a4:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_writeNum_u16>
}
    24a8:	00 00       	nop
    24aa:	2a 96       	adiw	r28, 0x0a	; 10
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	0f 91       	pop	r16
    24bc:	ff 90       	pop	r15
    24be:	ef 90       	pop	r14
    24c0:	08 95       	ret

000024c2 <LCD_writeNum_u32Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u32Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_32 *copyNum)
{
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	0f 93       	push	r16
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	2a 97       	sbiw	r28, 0x0a	; 10
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	49 83       	std	Y+1, r20	; 0x01
    24de:	5a 83       	std	Y+2, r21	; 0x02
    24e0:	6b 83       	std	Y+3, r22	; 0x03
    24e2:	7c 83       	std	Y+4, r23	; 0x04
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	2f 83       	std	Y+7, r18	; 0x07
    24ea:	08 87       	std	Y+8, r16	; 0x08
    24ec:	fa 86       	std	Y+10, r15	; 0x0a
    24ee:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    24f0:	08 85       	ldd	r16, Y+8	; 0x08
    24f2:	2f 81       	ldd	r18, Y+7	; 0x07
    24f4:	49 81       	ldd	r20, Y+1	; 0x01
    24f6:	5a 81       	ldd	r21, Y+2	; 0x02
    24f8:	6b 81       	ldd	r22, Y+3	; 0x03
    24fa:	7c 81       	ldd	r23, Y+4	; 0x04
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_setCursorPosition>
	LCD_writeNum_u32(copyLCDNum, copyNum);
    2504:	89 85       	ldd	r24, Y+9	; 0x09
    2506:	9a 85       	ldd	r25, Y+10	; 0x0a
    2508:	9c 01       	movw	r18, r24
    250a:	49 81       	ldd	r20, Y+1	; 0x01
    250c:	5a 81       	ldd	r21, Y+2	; 0x02
    250e:	6b 81       	ldd	r22, Y+3	; 0x03
    2510:	7c 81       	ldd	r23, Y+4	; 0x04
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_writeNum_u32>
}
    251a:	00 00       	nop
    251c:	2a 96       	adiw	r28, 0x0a	; 10
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	0f 91       	pop	r16
    252e:	ff 90       	pop	r15
    2530:	ef 90       	pop	r14
    2532:	08 95       	ret

00002534 <LCD_GoTo>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_GoTo(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn)
{
    2534:	0f 93       	push	r16
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	28 97       	sbiw	r28, 0x08	; 8
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	49 83       	std	Y+1, r20	; 0x01
    254c:	5a 83       	std	Y+2, r21	; 0x02
    254e:	6b 83       	std	Y+3, r22	; 0x03
    2550:	7c 83       	std	Y+4, r23	; 0x04
    2552:	8d 83       	std	Y+5, r24	; 0x05
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	2f 83       	std	Y+7, r18	; 0x07
    2558:	08 87       	std	Y+8, r16	; 0x08
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    255a:	08 85       	ldd	r16, Y+8	; 0x08
    255c:	2f 81       	ldd	r18, Y+7	; 0x07
    255e:	49 81       	ldd	r20, Y+1	; 0x01
    2560:	5a 81       	ldd	r21, Y+2	; 0x02
    2562:	6b 81       	ldd	r22, Y+3	; 0x03
    2564:	7c 81       	ldd	r23, Y+4	; 0x04
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_setCursorPosition>
}
    256e:	00 00       	nop
    2570:	28 96       	adiw	r28, 0x08	; 8
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	0f 91       	pop	r16
    2582:	08 95       	ret

00002584 <LCD_getData>:
 * @param1 : copyLCDNum
 * @param2 : copyCMD
 * @retVal : void
 */
static void LCD_getData(PINS_LCD copyLCDNum, _LCD_COMMANDS copyCMD)
{
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	00 d0       	rcall	.+0      	; 0x258a <LCD_getData+0x6>
    258a:	00 d0       	rcall	.+0      	; 0x258c <LCD_getData+0x8>
    258c:	00 d0       	rcall	.+0      	; 0x258e <LCD_getData+0xa>
    258e:	1f 92       	push	r1
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	49 83       	std	Y+1, r20	; 0x01
    2596:	5a 83       	std	Y+2, r21	; 0x02
    2598:	6b 83       	std	Y+3, r22	; 0x03
    259a:	7c 83       	std	Y+4, r23	; 0x04
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	2f 83       	std	Y+7, r18	; 0x07
	DIO_setPinVAL(copyLCDNum.D[0], (copyCMD >> 0) & (uint_8)0x01);
    25a2:	8f 81       	ldd	r24, Y+7	; 0x07
    25a4:	98 2f       	mov	r25, r24
    25a6:	91 70       	andi	r25, 0x01	; 1
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	69 2f       	mov	r22, r25
    25ac:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyLCDNum.D[1], (copyCMD >> 1) & (uint_8)0x01);
    25b0:	8f 81       	ldd	r24, Y+7	; 0x07
    25b2:	86 95       	lsr	r24
    25b4:	98 2f       	mov	r25, r24
    25b6:	91 70       	andi	r25, 0x01	; 1
    25b8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ba:	69 2f       	mov	r22, r25
    25bc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyLCDNum.D[2], (copyCMD >> 2) & (uint_8)0x01);
    25c0:	8f 81       	ldd	r24, Y+7	; 0x07
    25c2:	86 95       	lsr	r24
    25c4:	86 95       	lsr	r24
    25c6:	98 2f       	mov	r25, r24
    25c8:	91 70       	andi	r25, 0x01	; 1
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	69 2f       	mov	r22, r25
    25ce:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyLCDNum.D[3], (copyCMD >> 3) & (uint_8)0x01);
    25d2:	8f 81       	ldd	r24, Y+7	; 0x07
    25d4:	86 95       	lsr	r24
    25d6:	86 95       	lsr	r24
    25d8:	86 95       	lsr	r24
    25da:	98 2f       	mov	r25, r24
    25dc:	91 70       	andi	r25, 0x01	; 1
    25de:	8e 81       	ldd	r24, Y+6	; 0x06
    25e0:	69 2f       	mov	r22, r25
    25e2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
}
    25e6:	00 00       	nop
    25e8:	27 96       	adiw	r28, 0x07	; 7
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	08 95       	ret

000025fa <LCD_enableSignal>:
 * @brief  : LCD enable signal static function
 * @param1 : copyLCDNum
 * @retVal : void
 */
static void LCD_enableSignal(PINS_LCD copyLCDNum)
{
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	a6 97       	sbiw	r28, 0x26	; 38
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	49 a3       	std	Y+33, r20	; 0x21
    2610:	5a a3       	std	Y+34, r21	; 0x22
    2612:	6b a3       	std	Y+35, r22	; 0x23
    2614:	7c a3       	std	Y+36, r23	; 0x24
    2616:	8d a3       	std	Y+37, r24	; 0x25
    2618:	9e a3       	std	Y+38, r25	; 0x26
#if (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_HIGH);
    261a:	89 a1       	ldd	r24, Y+33	; 0x21
    261c:	61 e0       	ldi	r22, 0x01	; 1
    261e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	a0 ea       	ldi	r26, 0xA0	; 160
    2628:	b0 e4       	ldi	r27, 0x40	; 64
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	ab 83       	std	Y+3, r26	; 0x03
    2630:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2632:	2b ea       	ldi	r18, 0xAB	; 171
    2634:	3a ea       	ldi	r19, 0xAA	; 170
    2636:	4a ea       	ldi	r20, 0xAA	; 170
    2638:	5e e3       	ldi	r21, 0x3E	; 62
    263a:	69 81       	ldd	r22, Y+1	; 0x01
    263c:	7a 81       	ldd	r23, Y+2	; 0x02
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	8d 83       	std	Y+5, r24	; 0x05
    264c:	9e 83       	std	Y+6, r25	; 0x06
    264e:	af 83       	std	Y+7, r26	; 0x07
    2650:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5e e3       	ldi	r21, 0x3E	; 62
    265a:	69 81       	ldd	r22, Y+1	; 0x01
    265c:	7a 81       	ldd	r23, Y+2	; 0x02
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	9c 81       	ldd	r25, Y+4	; 0x04
    2662:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	89 87       	std	Y+9, r24	; 0x09
    266c:	9a 87       	std	Y+10, r25	; 0x0a
    266e:	ab 87       	std	Y+11, r26	; 0x0b
    2670:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e8       	ldi	r20, 0x80	; 128
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	6d 81       	ldd	r22, Y+5	; 0x05
    267c:	7e 81       	ldd	r23, Y+6	; 0x06
    267e:	8f 81       	ldd	r24, Y+7	; 0x07
    2680:	98 85       	ldd	r25, Y+8	; 0x08
    2682:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
    2686:	88 23       	and	r24, r24
    2688:	1c f4       	brge	.+6      	; 0x2690 <LCD_enableSignal+0x96>
		__ticks = 1;
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	8d 87       	std	Y+13, r24	; 0x0d
    268e:	b2 c0       	rjmp	.+356    	; 0x27f4 <LCD_enableSignal+0x1fa>
	else if (__tmp2 > 65535)
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	3f ef       	ldi	r19, 0xFF	; 255
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	57 e4       	ldi	r21, 0x47	; 71
    2698:	69 85       	ldd	r22, Y+9	; 0x09
    269a:	7a 85       	ldd	r23, Y+10	; 0x0a
    269c:	8b 85       	ldd	r24, Y+11	; 0x0b
    269e:	9c 85       	ldd	r25, Y+12	; 0x0c
    26a0:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
    26a4:	18 16       	cp	r1, r24
    26a6:	0c f0       	brlt	.+2      	; 0x26aa <LCD_enableSignal+0xb0>
    26a8:	7b c0       	rjmp	.+246    	; 0x27a0 <LCD_enableSignal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	4a e7       	ldi	r20, 0x7A	; 122
    26b0:	54 e4       	ldi	r21, 0x44	; 68
    26b2:	69 81       	ldd	r22, Y+1	; 0x01
    26b4:	7a 81       	ldd	r23, Y+2	; 0x02
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <__divsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	8e 87       	std	Y+14, r24	; 0x0e
    26c4:	9f 87       	std	Y+15, r25	; 0x0f
    26c6:	a8 8b       	std	Y+16, r26	; 0x10
    26c8:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a e7       	ldi	r20, 0x7A	; 122
    26d0:	53 e4       	ldi	r21, 0x43	; 67
    26d2:	6e 85       	ldd	r22, Y+14	; 0x0e
    26d4:	7f 85       	ldd	r23, Y+15	; 0x0f
    26d6:	88 89       	ldd	r24, Y+16	; 0x10
    26d8:	99 89       	ldd	r25, Y+17	; 0x11
    26da:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	8a 8b       	std	Y+18, r24	; 0x12
    26e4:	9b 8b       	std	Y+19, r25	; 0x13
    26e6:	ac 8b       	std	Y+20, r26	; 0x14
    26e8:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	6a 89       	ldd	r22, Y+18	; 0x12
    26f4:	7b 89       	ldd	r23, Y+19	; 0x13
    26f6:	8c 89       	ldd	r24, Y+20	; 0x14
    26f8:	9d 89       	ldd	r25, Y+21	; 0x15
    26fa:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
    26fe:	88 23       	and	r24, r24
    2700:	2c f4       	brge	.+10     	; 0x270c <LCD_enableSignal+0x112>
		__ticks = 1;
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9f 8b       	std	Y+23, r25	; 0x17
    2708:	8e 8b       	std	Y+22, r24	; 0x16
    270a:	3f c0       	rjmp	.+126    	; 0x278a <LCD_enableSignal+0x190>
	else if (__tmp > 65535)
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	6a 89       	ldd	r22, Y+18	; 0x12
    2716:	7b 89       	ldd	r23, Y+19	; 0x13
    2718:	8c 89       	ldd	r24, Y+20	; 0x14
    271a:	9d 89       	ldd	r25, Y+21	; 0x15
    271c:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
    2720:	18 16       	cp	r1, r24
    2722:	4c f5       	brge	.+82     	; 0x2776 <LCD_enableSignal+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	6e 85       	ldd	r22, Y+14	; 0x0e
    272e:	7f 85       	ldd	r23, Y+15	; 0x0f
    2730:	88 89       	ldd	r24, Y+16	; 0x10
    2732:	99 89       	ldd	r25, Y+17	; 0x11
    2734:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	9f 8b       	std	Y+23, r25	; 0x17
    274a:	8e 8b       	std	Y+22, r24	; 0x16
    274c:	0f c0       	rjmp	.+30     	; 0x276c <LCD_enableSignal+0x172>
    274e:	89 e1       	ldi	r24, 0x19	; 25
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	99 8f       	std	Y+25, r25	; 0x19
    2754:	88 8f       	std	Y+24, r24	; 0x18
    2756:	88 8d       	ldd	r24, Y+24	; 0x18
    2758:	99 8d       	ldd	r25, Y+25	; 0x19
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <LCD_enableSignal+0x160>
    275e:	99 8f       	std	Y+25, r25	; 0x19
    2760:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2762:	8e 89       	ldd	r24, Y+22	; 0x16
    2764:	9f 89       	ldd	r25, Y+23	; 0x17
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	9f 8b       	std	Y+23, r25	; 0x17
    276a:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276c:	8e 89       	ldd	r24, Y+22	; 0x16
    276e:	9f 89       	ldd	r25, Y+23	; 0x17
    2770:	89 2b       	or	r24, r25
    2772:	69 f7       	brne	.-38     	; 0x274e <LCD_enableSignal+0x154>
    2774:	3f c0       	rjmp	.+126    	; 0x27f4 <LCD_enableSignal+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2776:	6a 89       	ldd	r22, Y+18	; 0x12
    2778:	7b 89       	ldd	r23, Y+19	; 0x13
    277a:	8c 89       	ldd	r24, Y+20	; 0x14
    277c:	9d 89       	ldd	r25, Y+21	; 0x15
    277e:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9f 8b       	std	Y+23, r25	; 0x17
    2788:	8e 8b       	std	Y+22, r24	; 0x16
    278a:	8e 89       	ldd	r24, Y+22	; 0x16
    278c:	9f 89       	ldd	r25, Y+23	; 0x17
    278e:	9b 8f       	std	Y+27, r25	; 0x1b
    2790:	8a 8f       	std	Y+26, r24	; 0x1a
    2792:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2794:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <LCD_enableSignal+0x19c>
    279a:	9b 8f       	std	Y+27, r25	; 0x1b
    279c:	8a 8f       	std	Y+26, r24	; 0x1a
    279e:	2a c0       	rjmp	.+84     	; 0x27f4 <LCD_enableSignal+0x1fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	53 e4       	ldi	r21, 0x43	; 67
    27a8:	6d 81       	ldd	r22, Y+5	; 0x05
    27aa:	7e 81       	ldd	r23, Y+6	; 0x06
    27ac:	8f 81       	ldd	r24, Y+7	; 0x07
    27ae:	98 85       	ldd	r25, Y+8	; 0x08
    27b0:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
    27b4:	18 16       	cp	r1, r24
    27b6:	ac f4       	brge	.+42     	; 0x27e2 <LCD_enableSignal+0x1e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    27b8:	69 85       	ldd	r22, Y+9	; 0x09
    27ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    27bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    27be:	9c 85       	ldd	r25, Y+12	; 0x0c
    27c0:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9d 8f       	std	Y+29, r25	; 0x1d
    27ca:	8c 8f       	std	Y+28, r24	; 0x1c
    27cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27d0:	9f 8f       	std	Y+31, r25	; 0x1f
    27d2:	8e 8f       	std	Y+30, r24	; 0x1e
    27d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	f1 f7       	brne	.-4      	; 0x27d8 <LCD_enableSignal+0x1de>
    27dc:	9f 8f       	std	Y+31, r25	; 0x1f
    27de:	8e 8f       	std	Y+30, r24	; 0x1e
    27e0:	0f c0       	rjmp	.+30     	; 0x2800 <LCD_enableSignal+0x206>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27e2:	6d 81       	ldd	r22, Y+5	; 0x05
    27e4:	7e 81       	ldd	r23, Y+6	; 0x06
    27e6:	8f 81       	ldd	r24, Y+7	; 0x07
    27e8:	98 85       	ldd	r25, Y+8	; 0x08
    27ea:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	8d 87       	std	Y+13, r24	; 0x0d
    27f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f6:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27f8:	88 a1       	ldd	r24, Y+32	; 0x20
    27fa:	8a 95       	dec	r24
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <LCD_enableSignal+0x200>
    27fe:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(5);
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_LOW);
    2800:	89 a1       	ldd	r24, Y+33	; 0x21
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
#elif (_LCD_MODE == _8_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_HIGH);
	_delay_ms(5);
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_LOW);
#endif
}
    2808:	00 00       	nop
    280a:	a6 96       	adiw	r28, 0x26	; 38
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	08 95       	ret

0000281c <LCD_setCursorPosition>:
* @param2 : copyRow
* @param3 : copyColumn
* @retVal : void
*/
static void LCD_setCursorPosition(PINS_LCD copyLCDNum , ROW_NUM copyRow , uint_8 copyColumn)
{
    281c:	0f 93       	push	r16
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	28 97       	sbiw	r28, 0x08	; 8
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	49 83       	std	Y+1, r20	; 0x01
    2834:	5a 83       	std	Y+2, r21	; 0x02
    2836:	6b 83       	std	Y+3, r22	; 0x03
    2838:	7c 83       	std	Y+4, r23	; 0x04
    283a:	8d 83       	std	Y+5, r24	; 0x05
    283c:	9e 83       	std	Y+6, r25	; 0x06
    283e:	2f 83       	std	Y+7, r18	; 0x07
    2840:	08 87       	std	Y+8, r16	; 0x08
	copyColumn--;
    2842:	88 85       	ldd	r24, Y+8	; 0x08
    2844:	81 50       	subi	r24, 0x01	; 1
    2846:	88 87       	std	Y+8, r24	; 0x08
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
    2848:	8f 81       	ldd	r24, Y+7	; 0x07
    284a:	88 2f       	mov	r24, r24
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	81 30       	cpi	r24, 0x01	; 1
    2850:	91 05       	cpc	r25, r1
    2852:	c1 f0       	breq	.+48     	; 0x2884 <LCD_setCursorPosition+0x68>
    2854:	82 30       	cpi	r24, 0x02	; 2
    2856:	91 05       	cpc	r25, r1
    2858:	1c f4       	brge	.+6      	; 0x2860 <LCD_setCursorPosition+0x44>
    285a:	89 2b       	or	r24, r25
    285c:	39 f0       	breq	.+14     	; 0x286c <LCD_setCursorPosition+0x50>
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    285e:	36 c0       	rjmp	.+108    	; 0x28cc <LCD_setCursorPosition+0xb0>
*/
static void LCD_setCursorPosition(PINS_LCD copyLCDNum , ROW_NUM copyRow , uint_8 copyColumn)
{
	copyColumn--;
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
    2860:	82 30       	cpi	r24, 0x02	; 2
    2862:	91 05       	cpc	r25, r1
    2864:	d9 f0       	breq	.+54     	; 0x289c <LCD_setCursorPosition+0x80>
    2866:	03 97       	sbiw	r24, 0x03	; 3
    2868:	29 f1       	breq	.+74     	; 0x28b4 <LCD_setCursorPosition+0x98>
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    286a:	30 c0       	rjmp	.+96     	; 0x28cc <LCD_setCursorPosition+0xb0>
{
	copyColumn--;
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
    286c:	88 85       	ldd	r24, Y+8	; 0x08
    286e:	80 58       	subi	r24, 0x80	; 128
    2870:	28 2f       	mov	r18, r24
    2872:	49 81       	ldd	r20, Y+1	; 0x01
    2874:	5a 81       	ldd	r21, Y+2	; 0x02
    2876:	6b 81       	ldd	r22, Y+3	; 0x03
    2878:	7c 81       	ldd	r23, Y+4	; 0x04
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
    2882:	24 c0       	rjmp	.+72     	; 0x28cc <LCD_setCursorPosition+0xb0>
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
    2884:	88 85       	ldd	r24, Y+8	; 0x08
    2886:	80 54       	subi	r24, 0x40	; 64
    2888:	28 2f       	mov	r18, r24
    288a:	49 81       	ldd	r20, Y+1	; 0x01
    288c:	5a 81       	ldd	r21, Y+2	; 0x02
    288e:	6b 81       	ldd	r22, Y+3	; 0x03
    2890:	7c 81       	ldd	r23, Y+4	; 0x04
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	9e 81       	ldd	r25, Y+6	; 0x06
    2896:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
    289a:	18 c0       	rjmp	.+48     	; 0x28cc <LCD_setCursorPosition+0xb0>
		case ROW3:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_3 + copyColumn)); break;
    289c:	88 85       	ldd	r24, Y+8	; 0x08
    289e:	8c 56       	subi	r24, 0x6C	; 108
    28a0:	28 2f       	mov	r18, r24
    28a2:	49 81       	ldd	r20, Y+1	; 0x01
    28a4:	5a 81       	ldd	r21, Y+2	; 0x02
    28a6:	6b 81       	ldd	r22, Y+3	; 0x03
    28a8:	7c 81       	ldd	r23, Y+4	; 0x04
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
    28b2:	0c c0       	rjmp	.+24     	; 0x28cc <LCD_setCursorPosition+0xb0>
		case ROW4:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_4 + copyColumn)); break;
    28b4:	88 85       	ldd	r24, Y+8	; 0x08
    28b6:	8c 52       	subi	r24, 0x2C	; 44
    28b8:	28 2f       	mov	r18, r24
    28ba:	49 81       	ldd	r20, Y+1	; 0x01
    28bc:	5a 81       	ldd	r21, Y+2	; 0x02
    28be:	6b 81       	ldd	r22, Y+3	; 0x03
    28c0:	7c 81       	ldd	r23, Y+4	; 0x04
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
    28ca:	00 00       	nop
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    28cc:	00 00       	nop
    28ce:	28 96       	adiw	r28, 0x08	; 8
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	df 91       	pop	r29
    28dc:	cf 91       	pop	r28
    28de:	0f 91       	pop	r16
    28e0:	08 95       	ret

000028e2 <LCD_convertNum_u8>:
* @param1 : copyLCDNum
* @param2 : copySTR
* @retVal : void
*/
static void LCD_convertNum_u8(uint_8 copyNum , uint_8 *copySTR)
{
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <LCD_convertNum_u8+0x6>
    28e8:	1f 92       	push	r1
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	7b 83       	std	Y+3, r23	; 0x03
    28f2:	6a 83       	std	Y+2, r22	; 0x02
	memset(copySTR , '\0' , 4);
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	9b 81       	ldd	r25, Y+3	; 0x03
    28f8:	44 e0       	ldi	r20, 0x04	; 4
    28fa:	50 e0       	ldi	r21, 0x00	; 0
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	0e 94 83 1c 	call	0x3906	; 0x3906 <memset>
	sprintf(copySTR , "%i", copyNum);
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	88 2f       	mov	r24, r24
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	29 2f       	mov	r18, r25
    290c:	2f 93       	push	r18
    290e:	8f 93       	push	r24
    2910:	87 e5       	ldi	r24, 0x57	; 87
    2912:	91 e0       	ldi	r25, 0x01	; 1
    2914:	89 2f       	mov	r24, r25
    2916:	8f 93       	push	r24
    2918:	87 e5       	ldi	r24, 0x57	; 87
    291a:	91 e0       	ldi	r25, 0x01	; 1
    291c:	8f 93       	push	r24
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	8f 93       	push	r24
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	8f 93       	push	r24
    2926:	0e 94 8a 1c 	call	0x3914	; 0x3914 <sprintf>
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
}
    2936:	00 00       	nop
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	08 95       	ret

00002944 <LCD_convertNum_u16>:
* @param1 : copyLCDNum
* @param2 : copyNum
* @retVal : void
*/
static void LCD_convertNum_u16(uint_16 copyNum , uint_8 *copySTR)
{
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29
    2948:	00 d0       	rcall	.+0      	; 0x294a <LCD_convertNum_u16+0x6>
    294a:	00 d0       	rcall	.+0      	; 0x294c <LCD_convertNum_u16+0x8>
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	7c 83       	std	Y+4, r23	; 0x04
    2956:	6b 83       	std	Y+3, r22	; 0x03
	memset(copySTR , '\0' , 6);
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	46 e0       	ldi	r20, 0x06	; 6
    295e:	50 e0       	ldi	r21, 0x00	; 0
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	0e 94 83 1c 	call	0x3906	; 0x3906 <memset>
	sprintf(copySTR , "%i", copyNum);
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	8f 93       	push	r24
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	8f 93       	push	r24
    2970:	87 e5       	ldi	r24, 0x57	; 87
    2972:	91 e0       	ldi	r25, 0x01	; 1
    2974:	89 2f       	mov	r24, r25
    2976:	8f 93       	push	r24
    2978:	87 e5       	ldi	r24, 0x57	; 87
    297a:	91 e0       	ldi	r25, 0x01	; 1
    297c:	8f 93       	push	r24
    297e:	8c 81       	ldd	r24, Y+4	; 0x04
    2980:	8f 93       	push	r24
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	8f 93       	push	r24
    2986:	0e 94 8a 1c 	call	0x3914	; 0x3914 <sprintf>
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
}
    2996:	00 00       	nop
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	08 95       	ret

000029a6 <LCD_convertNum_u32>:
* @param1 : copyLCDNum
* @param2 : copyNum
* @retVal : void
*/
static void LCD_convertNum_u32(uint_32 copyNum , uint_8 *copySTR)
{
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <LCD_convertNum_u32+0x6>
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <LCD_convertNum_u32+0x8>
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <LCD_convertNum_u32+0xa>
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	69 83       	std	Y+1, r22	; 0x01
    29b6:	7a 83       	std	Y+2, r23	; 0x02
    29b8:	8b 83       	std	Y+3, r24	; 0x03
    29ba:	9c 83       	std	Y+4, r25	; 0x04
    29bc:	5e 83       	std	Y+6, r21	; 0x06
    29be:	4d 83       	std	Y+5, r20	; 0x05
	memset(copySTR , '\0' , 11);
    29c0:	8d 81       	ldd	r24, Y+5	; 0x05
    29c2:	9e 81       	ldd	r25, Y+6	; 0x06
    29c4:	4b e0       	ldi	r20, 0x0B	; 11
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	70 e0       	ldi	r23, 0x00	; 0
    29cc:	0e 94 83 1c 	call	0x3906	; 0x3906 <memset>
	sprintf(copySTR , "%i", copyNum);
    29d0:	8c 81       	ldd	r24, Y+4	; 0x04
    29d2:	8f 93       	push	r24
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	8f 93       	push	r24
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	8f 93       	push	r24
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	8f 93       	push	r24
    29e0:	87 e5       	ldi	r24, 0x57	; 87
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	89 2f       	mov	r24, r25
    29e6:	8f 93       	push	r24
    29e8:	87 e5       	ldi	r24, 0x57	; 87
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	8f 93       	push	r24
    29ee:	8e 81       	ldd	r24, Y+6	; 0x06
    29f0:	8f 93       	push	r24
    29f2:	8d 81       	ldd	r24, Y+5	; 0x05
    29f4:	8f 93       	push	r24
    29f6:	0e 94 8a 1c 	call	0x3914	; 0x3914 <sprintf>
    29fa:	8d b7       	in	r24, 0x3d	; 61
    29fc:	9e b7       	in	r25, 0x3e	; 62
    29fe:	08 96       	adiw	r24, 0x08	; 8
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
}
    2a0a:	00 00       	nop
    2a0c:	26 96       	adiw	r28, 0x06	; 6
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	08 95       	ret

00002a1e <DCMOTOR_init>:
  * @brief   : Motors Initialization H-bridge l298 by Configure all pin IN0 ~ IN4 output.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_init(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <DCMOTOR_init+0x6>
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <DCMOTOR_init+0x8>
    2a26:	1f 92       	push	r1
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	9b 83       	std	Y+3, r25	; 0x03
    2a2e:	8a 83       	std	Y+2, r24	; 0x02
    2a30:	7d 83       	std	Y+5, r23	; 0x05
    2a32:	6c 83       	std	Y+4, r22	; 0x04
	for(uint_8 count = Zero_INIT ; count < 2 ; count++)
    2a34:	19 82       	std	Y+1, r1	; 0x01
    2a36:	1d c0       	rjmp	.+58     	; 0x2a72 <DCMOTOR_init+0x54>
	{
		DIO_setPinDIR(copyMotor1.motor[count], _DIRECTION_PIN_OUTPUT);
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	88 2f       	mov	r24, r24
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9e 01       	movw	r18, r28
    2a40:	2e 5f       	subi	r18, 0xFE	; 254
    2a42:	3f 4f       	sbci	r19, 0xFF	; 255
    2a44:	82 0f       	add	r24, r18
    2a46:	93 1f       	adc	r25, r19
    2a48:	fc 01       	movw	r30, r24
    2a4a:	80 81       	ld	r24, Z
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
		DIO_setPinDIR(copyMotor2.motor[count], _DIRECTION_PIN_OUTPUT);
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	88 2f       	mov	r24, r24
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9e 01       	movw	r18, r28
    2a5a:	2c 5f       	subi	r18, 0xFC	; 252
    2a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5e:	82 0f       	add	r24, r18
    2a60:	93 1f       	adc	r25, r19
    2a62:	fc 01       	movw	r30, r24
    2a64:	80 81       	ld	r24, Z
    2a66:	61 e0       	ldi	r22, 0x01	; 1
    2a68:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_init(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
	for(uint_8 count = Zero_INIT ; count < 2 ; count++)
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	8f 5f       	subi	r24, 0xFF	; 255
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	82 30       	cpi	r24, 0x02	; 2
    2a76:	00 f3       	brcs	.-64     	; 0x2a38 <DCMOTOR_init+0x1a>
	{
		DIO_setPinDIR(copyMotor1.motor[count], _DIRECTION_PIN_OUTPUT);
		DIO_setPinDIR(copyMotor2.motor[count], _DIRECTION_PIN_OUTPUT);
	}
}
    2a78:	00 00       	nop
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	08 95       	ret

00002a8a <DCMOTOR_motorForward>:
  * @brief   : Motors move forward by configure pin high & next pin low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorForward(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    2a8a:	cf 93       	push	r28
    2a8c:	df 93       	push	r29
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <DCMOTOR_motorForward+0x6>
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <DCMOTOR_motorForward+0x8>
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	7c 83       	std	Y+4, r23	; 0x04
    2a9c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_HIGH);
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	61 e0       	ldi	r22, 0x01	; 1
    2aa2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_LOW);
    2aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_HIGH);
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	61 e0       	ldi	r22, 0x01	; 1
    2ab2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_LOW);
    2ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab8:	60 e0       	ldi	r22, 0x00	; 0
    2aba:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
}
    2abe:	00 00       	nop
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	df 91       	pop	r29
    2aca:	cf 91       	pop	r28
    2acc:	08 95       	ret

00002ace <DCMOTOR_motorReverse>:
  * @brief   : Motors move forward by configure pin low & next pin high.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorReverse(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    2ace:	cf 93       	push	r28
    2ad0:	df 93       	push	r29
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <DCMOTOR_motorReverse+0x6>
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <DCMOTOR_motorReverse+0x8>
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
    2ade:	7c 83       	std	Y+4, r23	; 0x04
    2ae0:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	60 e0       	ldi	r22, 0x00	; 0
    2ae6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_HIGH);
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	60 e0       	ldi	r22, 0x00	; 0
    2af6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_HIGH);
    2afa:	8c 81       	ldd	r24, Y+4	; 0x04
    2afc:	61 e0       	ldi	r22, 0x01	; 1
    2afe:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
}
    2b02:	00 00       	nop
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	08 95       	ret

00002b12 <DCMOTOR_motorRight>:
  * @brief   : Motors move forward by configure all pins high but right motor in4 low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorRight(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29
    2b16:	00 d0       	rcall	.+0      	; 0x2b18 <DCMOTOR_motorRight+0x6>
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <DCMOTOR_motorRight+0x8>
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	9a 83       	std	Y+2, r25	; 0x02
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	7c 83       	std	Y+4, r23	; 0x04
    2b24:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
    2b28:	60 e0       	ldi	r22, 0x00	; 0
    2b2a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_LOW);
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	60 e0       	ldi	r22, 0x00	; 0
    2b3a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_HIGH);
    2b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b40:	61 e0       	ldi	r22, 0x01	; 1
    2b42:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
}
    2b46:	00 00       	nop
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	08 95       	ret

00002b56 <DCMOTOR_motorLeft>:
  * @brief   : Motors move forward by configure all pins high but left motor in2 low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorLeft(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <DCMOTOR_motorLeft+0x6>
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <DCMOTOR_motorLeft+0x8>
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	9a 83       	std	Y+2, r25	; 0x02
    2b64:	89 83       	std	Y+1, r24	; 0x01
    2b66:	7c 83       	std	Y+4, r23	; 0x04
    2b68:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_HIGH);
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	61 e0       	ldi	r22, 0x01	; 1
    2b76:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
    2b7e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_LOW);
    2b82:	8c 81       	ldd	r24, Y+4	; 0x04
    2b84:	60 e0       	ldi	r22, 0x00	; 0
    2b86:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
}
    2b8a:	00 00       	nop
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	08 95       	ret

00002b9a <DCMOTOR_motorStop>:
  * @brief   : Motors move forward by configure all pins low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorStop(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	00 d0       	rcall	.+0      	; 0x2ba0 <DCMOTOR_motorStop+0x6>
    2ba0:	00 d0       	rcall	.+0      	; 0x2ba2 <DCMOTOR_motorStop+0x8>
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	7c 83       	std	Y+4, r23	; 0x04
    2bac:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	60 e0       	ldi	r22, 0x00	; 0
    2bb2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_LOW);
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_LOW);
    2bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
}
    2bce:	00 00       	nop
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	08 95       	ret

00002bde <KEYPAD_init>:
 *           keypad is DIRECTION_PIN_INPUTS & COLUMN PINS Directions DIRECTION_PIN_OUTPUT.
 * @param1 : copyKEYPAD
 * @retVal : void
 */
void KEYPAD_init(PINS_KEYPAD copyKEYPAD)
{
    2bde:	cf 93       	push	r28
    2be0:	df 93       	push	r29
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
    2be6:	2a 97       	sbiw	r28, 0x0a	; 10
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	2b 83       	std	Y+3, r18	; 0x03
    2bf4:	3c 83       	std	Y+4, r19	; 0x04
    2bf6:	4d 83       	std	Y+5, r20	; 0x05
    2bf8:	5e 83       	std	Y+6, r21	; 0x06
    2bfa:	6f 83       	std	Y+7, r22	; 0x07
    2bfc:	78 87       	std	Y+8, r23	; 0x08
    2bfe:	89 87       	std	Y+9, r24	; 0x09
    2c00:	9a 87       	std	Y+10, r25	; 0x0a
	for(uint_8 count1 = Zero_INIT ; count1 < MAX_ROWS ; count1++)
    2c02:	19 82       	std	Y+1, r1	; 0x01
    2c04:	1d c0       	rjmp	.+58     	; 0x2c40 <KEYPAD_init+0x62>
	{
		DIO_setPinDIR(copyKEYPAD.ROWS[count1], _DIRECTION_PIN_INPUT);
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	88 2f       	mov	r24, r24
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9e 01       	movw	r18, r28
    2c0e:	2d 5f       	subi	r18, 0xFD	; 253
    2c10:	3f 4f       	sbci	r19, 0xFF	; 255
    2c12:	82 0f       	add	r24, r18
    2c14:	93 1f       	adc	r25, r19
    2c16:	fc 01       	movw	r30, r24
    2c18:	80 81       	ld	r24, Z
    2c1a:	60 e0       	ldi	r22, 0x00	; 0
    2c1c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
		DIO_setPinVAL(copyKEYPAD.ROWS[count1], _STATUS_PIN_HIGH);
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	88 2f       	mov	r24, r24
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9e 01       	movw	r18, r28
    2c28:	2d 5f       	subi	r18, 0xFD	; 253
    2c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2c:	82 0f       	add	r24, r18
    2c2e:	93 1f       	adc	r25, r19
    2c30:	fc 01       	movw	r30, r24
    2c32:	80 81       	ld	r24, Z
    2c34:	61 e0       	ldi	r22, 0x01	; 1
    2c36:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
 * @param1 : copyKEYPAD
 * @retVal : void
 */
void KEYPAD_init(PINS_KEYPAD copyKEYPAD)
{
	for(uint_8 count1 = Zero_INIT ; count1 < MAX_ROWS ; count1++)
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	8f 5f       	subi	r24, 0xFF	; 255
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	84 30       	cpi	r24, 0x04	; 4
    2c44:	00 f3       	brcs	.-64     	; 0x2c06 <KEYPAD_init+0x28>
	{
		DIO_setPinDIR(copyKEYPAD.ROWS[count1], _DIRECTION_PIN_INPUT);
		DIO_setPinVAL(copyKEYPAD.ROWS[count1], _STATUS_PIN_HIGH);
	}

	for (uint_8 count2 = Zero_INIT ; count2 < MAX_COLUMN; count2++)
    2c46:	1a 82       	std	Y+2, r1	; 0x02
    2c48:	1d c0       	rjmp	.+58     	; 0x2c84 <KEYPAD_init+0xa6>
	{
		DIO_setPinDIR(copyKEYPAD.COLUMNS[count2], _DIRECTION_PIN_OUTPUT);
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	88 2f       	mov	r24, r24
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	9e 01       	movw	r18, r28
    2c52:	29 5f       	subi	r18, 0xF9	; 249
    2c54:	3f 4f       	sbci	r19, 0xFF	; 255
    2c56:	82 0f       	add	r24, r18
    2c58:	93 1f       	adc	r25, r19
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	80 81       	ld	r24, Z
    2c5e:	61 e0       	ldi	r22, 0x01	; 1
    2c60:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count2], _STATUS_PIN_HIGH);
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	88 2f       	mov	r24, r24
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9e 01       	movw	r18, r28
    2c6c:	29 5f       	subi	r18, 0xF9	; 249
    2c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c70:	82 0f       	add	r24, r18
    2c72:	93 1f       	adc	r25, r19
    2c74:	fc 01       	movw	r30, r24
    2c76:	80 81       	ld	r24, Z
    2c78:	61 e0       	ldi	r22, 0x01	; 1
    2c7a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	{
		DIO_setPinDIR(copyKEYPAD.ROWS[count1], _DIRECTION_PIN_INPUT);
		DIO_setPinVAL(copyKEYPAD.ROWS[count1], _STATUS_PIN_HIGH);
	}

	for (uint_8 count2 = Zero_INIT ; count2 < MAX_COLUMN; count2++)
    2c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c80:	8f 5f       	subi	r24, 0xFF	; 255
    2c82:	8a 83       	std	Y+2, r24	; 0x02
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	84 30       	cpi	r24, 0x04	; 4
    2c88:	00 f3       	brcs	.-64     	; 0x2c4a <KEYPAD_init+0x6c>
	{
		DIO_setPinDIR(copyKEYPAD.COLUMNS[count2], _DIRECTION_PIN_OUTPUT);
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count2], _STATUS_PIN_HIGH);
	}
}
    2c8a:	00 00       	nop
    2c8c:	2a 96       	adiw	r28, 0x0a	; 10
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	f8 94       	cli
    2c92:	de bf       	out	0x3e, r29	; 62
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	cd bf       	out	0x3d, r28	; 61
    2c98:	df 91       	pop	r29
    2c9a:	cf 91       	pop	r28
    2c9c:	08 95       	ret

00002c9e <KEYPAD_getData>:
 * @brief  : Keypad function to get data from column & row pins .
 * @param1 : copyKEYPAD
 * @retVal : void
 */
Return_Value KEYPAD_getData(PINS_KEYPAD copyKEYPAD , uint_8 *copyKeypadValue)
{
    2c9e:	0f 93       	push	r16
    2ca0:	1f 93       	push	r17
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	6b 97       	sbiw	r28, 0x1b	; 27
    2cac:	0f b6       	in	r0, 0x3f	; 63
    2cae:	f8 94       	cli
    2cb0:	de bf       	out	0x3e, r29	; 62
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	cd bf       	out	0x3d, r28	; 61
    2cb6:	2a 8b       	std	Y+18, r18	; 0x12
    2cb8:	3b 8b       	std	Y+19, r19	; 0x13
    2cba:	4c 8b       	std	Y+20, r20	; 0x14
    2cbc:	5d 8b       	std	Y+21, r21	; 0x15
    2cbe:	6e 8b       	std	Y+22, r22	; 0x16
    2cc0:	7f 8b       	std	Y+23, r23	; 0x17
    2cc2:	88 8f       	std	Y+24, r24	; 0x18
    2cc4:	99 8f       	std	Y+25, r25	; 0x19
    2cc6:	1b 8f       	std	Y+27, r17	; 0x1b
    2cc8:	0a 8f       	std	Y+26, r16	; 0x1a
	uint_8 count1;
	uint_8 count2;
	uint_8 flag = 0;
    2cca:	1b 82       	std	Y+3, r1	; 0x03

	for(count1 = 0 ; count1 < 4 ; count1++)
    2ccc:	19 82       	std	Y+1, r1	; 0x01
    2cce:	db c0       	rjmp	.+438    	; 0x2e86 <KEYPAD_getData+0x1e8>
	{
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_LOW);
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	9e 01       	movw	r18, r28
    2cd8:	2a 5e       	subi	r18, 0xEA	; 234
    2cda:	3f 4f       	sbci	r19, 0xFF	; 255
    2cdc:	82 0f       	add	r24, r18
    2cde:	93 1f       	adc	r25, r19
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	80 81       	ld	r24, Z
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
		for(count2 = 0 ; count2 < 4 ; count2++)
    2cea:	1a 82       	std	Y+2, r1	; 0x02
    2cec:	b8 c0       	rjmp	.+368    	; 0x2e5e <KEYPAD_getData+0x1c0>
		{
			if(DIO_getPinVAL(copyKEYPAD.ROWS[count2]) == 0)
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	88 2f       	mov	r24, r24
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	9e 01       	movw	r18, r28
    2cf6:	2e 5e       	subi	r18, 0xEE	; 238
    2cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfa:	82 0f       	add	r24, r18
    2cfc:	93 1f       	adc	r25, r19
    2cfe:	fc 01       	movw	r30, r24
    2d00:	80 81       	ld	r24, Z
    2d02:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <DIO_getPinVAL>
    2d06:	88 23       	and	r24, r24
    2d08:	09 f0       	breq	.+2      	; 0x2d0c <KEYPAD_getData+0x6e>
    2d0a:	a6 c0       	rjmp	.+332    	; 0x2e58 <KEYPAD_getData+0x1ba>
			{
				*copyKeypadValue = PATTIRN_KEYPAD[count2][count1];
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	28 2f       	mov	r18, r24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	88 2f       	mov	r24, r24
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	22 0f       	add	r18, r18
    2d1a:	33 1f       	adc	r19, r19
    2d1c:	22 0f       	add	r18, r18
    2d1e:	33 1f       	adc	r19, r19
    2d20:	82 0f       	add	r24, r18
    2d22:	93 1f       	adc	r25, r19
    2d24:	80 54       	subi	r24, 0x40	; 64
    2d26:	9f 4f       	sbci	r25, 0xFF	; 255
    2d28:	fc 01       	movw	r30, r24
    2d2a:	20 81       	ld	r18, Z
    2d2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d2e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d30:	fc 01       	movw	r30, r24
    2d32:	20 83       	st	Z, r18
				flag = 1;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_getPinVAL(copyKEYPAD.ROWS[count2]) == 0);
    2d38:	00 00       	nop
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	88 2f       	mov	r24, r24
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9e 01       	movw	r18, r28
    2d42:	2e 5e       	subi	r18, 0xEE	; 238
    2d44:	3f 4f       	sbci	r19, 0xFF	; 255
    2d46:	82 0f       	add	r24, r18
    2d48:	93 1f       	adc	r25, r19
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	80 81       	ld	r24, Z
    2d4e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <DIO_getPinVAL>
    2d52:	88 23       	and	r24, r24
    2d54:	91 f3       	breq	.-28     	; 0x2d3a <KEYPAD_getData+0x9c>
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	a0 e2       	ldi	r26, 0x20	; 32
    2d5c:	b1 e4       	ldi	r27, 0x41	; 65
    2d5e:	8c 83       	std	Y+4, r24	; 0x04
    2d60:	9d 83       	std	Y+5, r25	; 0x05
    2d62:	ae 83       	std	Y+6, r26	; 0x06
    2d64:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	4a e7       	ldi	r20, 0x7A	; 122
    2d6c:	53 e4       	ldi	r21, 0x43	; 67
    2d6e:	6c 81       	ldd	r22, Y+4	; 0x04
    2d70:	7d 81       	ldd	r23, Y+5	; 0x05
    2d72:	8e 81       	ldd	r24, Y+6	; 0x06
    2d74:	9f 81       	ldd	r25, Y+7	; 0x07
    2d76:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	88 87       	std	Y+8, r24	; 0x08
    2d80:	99 87       	std	Y+9, r25	; 0x09
    2d82:	aa 87       	std	Y+10, r26	; 0x0a
    2d84:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e8       	ldi	r20, 0x80	; 128
    2d8c:	5f e3       	ldi	r21, 0x3F	; 63
    2d8e:	68 85       	ldd	r22, Y+8	; 0x08
    2d90:	79 85       	ldd	r23, Y+9	; 0x09
    2d92:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d94:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d96:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
    2d9a:	88 23       	and	r24, r24
    2d9c:	2c f4       	brge	.+10     	; 0x2da8 <KEYPAD_getData+0x10a>
		__ticks = 1;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	9d 87       	std	Y+13, r25	; 0x0d
    2da4:	8c 87       	std	Y+12, r24	; 0x0c
    2da6:	3f c0       	rjmp	.+126    	; 0x2e26 <KEYPAD_getData+0x188>
	else if (__tmp > 65535)
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	3f ef       	ldi	r19, 0xFF	; 255
    2dac:	4f e7       	ldi	r20, 0x7F	; 127
    2dae:	57 e4       	ldi	r21, 0x47	; 71
    2db0:	68 85       	ldd	r22, Y+8	; 0x08
    2db2:	79 85       	ldd	r23, Y+9	; 0x09
    2db4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2db6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2db8:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
    2dbc:	18 16       	cp	r1, r24
    2dbe:	4c f5       	brge	.+82     	; 0x2e12 <KEYPAD_getData+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e2       	ldi	r20, 0x20	; 32
    2dc6:	51 e4       	ldi	r21, 0x41	; 65
    2dc8:	6c 81       	ldd	r22, Y+4	; 0x04
    2dca:	7d 81       	ldd	r23, Y+5	; 0x05
    2dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    2dce:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd0:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	bc 01       	movw	r22, r24
    2dda:	cd 01       	movw	r24, r26
    2ddc:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	9d 87       	std	Y+13, r25	; 0x0d
    2de6:	8c 87       	std	Y+12, r24	; 0x0c
    2de8:	0f c0       	rjmp	.+30     	; 0x2e08 <KEYPAD_getData+0x16a>
    2dea:	89 e1       	ldi	r24, 0x19	; 25
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	9f 87       	std	Y+15, r25	; 0x0f
    2df0:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2df2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2df4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <KEYPAD_getData+0x158>
    2dfa:	9f 87       	std	Y+15, r25	; 0x0f
    2dfc:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e00:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	9d 87       	std	Y+13, r25	; 0x0d
    2e06:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e08:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e0c:	89 2b       	or	r24, r25
    2e0e:	69 f7       	brne	.-38     	; 0x2dea <KEYPAD_getData+0x14c>
    2e10:	14 c0       	rjmp	.+40     	; 0x2e3a <KEYPAD_getData+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e12:	68 85       	ldd	r22, Y+8	; 0x08
    2e14:	79 85       	ldd	r23, Y+9	; 0x09
    2e16:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e18:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e1a:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	9d 87       	std	Y+13, r25	; 0x0d
    2e24:	8c 87       	std	Y+12, r24	; 0x0c
    2e26:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e28:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e2a:	99 8b       	std	Y+17, r25	; 0x11
    2e2c:	88 8b       	std	Y+16, r24	; 0x10
    2e2e:	88 89       	ldd	r24, Y+16	; 0x10
    2e30:	99 89       	ldd	r25, Y+17	; 0x11
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <KEYPAD_getData+0x194>
    2e36:	99 8b       	std	Y+17, r25	; 0x11
    2e38:	88 8b       	std	Y+16, r24	; 0x10
				_delay_ms(10);
				DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	88 2f       	mov	r24, r24
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	9e 01       	movw	r18, r28
    2e42:	2a 5e       	subi	r18, 0xEA	; 234
    2e44:	3f 4f       	sbci	r19, 0xFF	; 255
    2e46:	82 0f       	add	r24, r18
    2e48:	93 1f       	adc	r25, r19
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	80 81       	ld	r24, Z
    2e4e:	61 e0       	ldi	r22, 0x01	; 1
    2e50:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
				return flag;
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	1c c0       	rjmp	.+56     	; 0x2e90 <KEYPAD_getData+0x1f2>
	uint_8 flag = 0;

	for(count1 = 0 ; count1 < 4 ; count1++)
	{
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_LOW);
		for(count2 = 0 ; count2 < 4 ; count2++)
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	8f 5f       	subi	r24, 0xFF	; 255
    2e5c:	8a 83       	std	Y+2, r24	; 0x02
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	84 30       	cpi	r24, 0x04	; 4
    2e62:	08 f4       	brcc	.+2      	; 0x2e66 <KEYPAD_getData+0x1c8>
    2e64:	44 cf       	rjmp	.-376    	; 0x2cee <KEYPAD_getData+0x50>
				_delay_ms(10);
				DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
				return flag;
			}
		}
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	88 2f       	mov	r24, r24
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	9e 01       	movw	r18, r28
    2e6e:	2a 5e       	subi	r18, 0xEA	; 234
    2e70:	3f 4f       	sbci	r19, 0xFF	; 255
    2e72:	82 0f       	add	r24, r18
    2e74:	93 1f       	adc	r25, r19
    2e76:	fc 01       	movw	r30, r24
    2e78:	80 81       	ld	r24, Z
    2e7a:	61 e0       	ldi	r22, 0x01	; 1
    2e7c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
{
	uint_8 count1;
	uint_8 count2;
	uint_8 flag = 0;

	for(count1 = 0 ; count1 < 4 ; count1++)
    2e80:	89 81       	ldd	r24, Y+1	; 0x01
    2e82:	8f 5f       	subi	r24, 0xFF	; 255
    2e84:	89 83       	std	Y+1, r24	; 0x01
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	84 30       	cpi	r24, 0x04	; 4
    2e8a:	08 f4       	brcc	.+2      	; 0x2e8e <KEYPAD_getData+0x1f0>
    2e8c:	21 cf       	rjmp	.-446    	; 0x2cd0 <KEYPAD_getData+0x32>
				return flag;
			}
		}
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
	}
	return flag;
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2e90:	6b 96       	adiw	r28, 0x1b	; 27
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	1f 91       	pop	r17
    2ea2:	0f 91       	pop	r16
    2ea4:	08 95       	ret

00002ea6 <__vector_1>:
/*********** GLOBAL AREA ***********/


/*********** ISR FUNCTION ***********/
ISR(INT0_VEC)
{
    2ea6:	1f 92       	push	r1
    2ea8:	0f 92       	push	r0
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	0f 92       	push	r0
    2eae:	11 24       	eor	r1, r1
    2eb0:	2f 93       	push	r18
    2eb2:	3f 93       	push	r19
    2eb4:	4f 93       	push	r20
    2eb6:	5f 93       	push	r21
    2eb8:	6f 93       	push	r22
    2eba:	7f 93       	push	r23
    2ebc:	8f 93       	push	r24
    2ebe:	9f 93       	push	r25
    2ec0:	af 93       	push	r26
    2ec2:	bf 93       	push	r27
    2ec4:	ef 93       	push	r30
    2ec6:	ff 93       	push	r31
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	cd bf       	out	0x3d, r28	; 61

	DCMOTOR_motorReverse(MOTOR1, MOTOR2);
    2ed6:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <MOTOR2>
    2eda:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <MOTOR2+0x1>
    2ede:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <MOTOR1>
    2ee2:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <MOTOR1+0x1>
    2ee6:	b9 01       	movw	r22, r18
    2ee8:	0e 94 67 15 	call	0x2ace	; 0x2ace <DCMOTOR_motorReverse>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	aa ef       	ldi	r26, 0xFA	; 250
    2ef2:	b4 e4       	ldi	r27, 0x44	; 68
    2ef4:	89 83       	std	Y+1, r24	; 0x01
    2ef6:	9a 83       	std	Y+2, r25	; 0x02
    2ef8:	ab 83       	std	Y+3, r26	; 0x03
    2efa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a e7       	ldi	r20, 0x7A	; 122
    2f02:	53 e4       	ldi	r21, 0x43	; 67
    2f04:	69 81       	ldd	r22, Y+1	; 0x01
    2f06:	7a 81       	ldd	r23, Y+2	; 0x02
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	8d 83       	std	Y+5, r24	; 0x05
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	af 83       	std	Y+7, r26	; 0x07
    2f1a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	6d 81       	ldd	r22, Y+5	; 0x05
    2f26:	7e 81       	ldd	r23, Y+6	; 0x06
    2f28:	8f 81       	ldd	r24, Y+7	; 0x07
    2f2a:	98 85       	ldd	r25, Y+8	; 0x08
    2f2c:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
    2f30:	88 23       	and	r24, r24
    2f32:	2c f4       	brge	.+10     	; 0x2f3e <__vector_1+0x98>
		__ticks = 1;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	9a 87       	std	Y+10, r25	; 0x0a
    2f3a:	89 87       	std	Y+9, r24	; 0x09
    2f3c:	3f c0       	rjmp	.+126    	; 0x2fbc <__vector_1+0x116>
	else if (__tmp > 65535)
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	3f ef       	ldi	r19, 0xFF	; 255
    2f42:	4f e7       	ldi	r20, 0x7F	; 127
    2f44:	57 e4       	ldi	r21, 0x47	; 71
    2f46:	6d 81       	ldd	r22, Y+5	; 0x05
    2f48:	7e 81       	ldd	r23, Y+6	; 0x06
    2f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f4c:	98 85       	ldd	r25, Y+8	; 0x08
    2f4e:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
    2f52:	18 16       	cp	r1, r24
    2f54:	4c f5       	brge	.+82     	; 0x2fa8 <__vector_1+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	51 e4       	ldi	r21, 0x41	; 65
    2f5e:	69 81       	ldd	r22, Y+1	; 0x01
    2f60:	7a 81       	ldd	r23, Y+2	; 0x02
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	9c 81       	ldd	r25, Y+4	; 0x04
    2f66:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	9a 87       	std	Y+10, r25	; 0x0a
    2f7c:	89 87       	std	Y+9, r24	; 0x09
    2f7e:	0f c0       	rjmp	.+30     	; 0x2f9e <__vector_1+0xf8>
    2f80:	89 e1       	ldi	r24, 0x19	; 25
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9c 87       	std	Y+12, r25	; 0x0c
    2f86:	8b 87       	std	Y+11, r24	; 0x0b
    2f88:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <__vector_1+0xe6>
    2f90:	9c 87       	std	Y+12, r25	; 0x0c
    2f92:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	9a 87       	std	Y+10, r25	; 0x0a
    2f9c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9e:	89 85       	ldd	r24, Y+9	; 0x09
    2fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa2:	89 2b       	or	r24, r25
    2fa4:	69 f7       	brne	.-38     	; 0x2f80 <__vector_1+0xda>
    2fa6:	14 c0       	rjmp	.+40     	; 0x2fd0 <__vector_1+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa8:	6d 81       	ldd	r22, Y+5	; 0x05
    2faa:	7e 81       	ldd	r23, Y+6	; 0x06
    2fac:	8f 81       	ldd	r24, Y+7	; 0x07
    2fae:	98 85       	ldd	r25, Y+8	; 0x08
    2fb0:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9a 87       	std	Y+10, r25	; 0x0a
    2fba:	89 87       	std	Y+9, r24	; 0x09
    2fbc:	89 85       	ldd	r24, Y+9	; 0x09
    2fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc0:	9e 87       	std	Y+14, r25	; 0x0e
    2fc2:	8d 87       	std	Y+13, r24	; 0x0d
    2fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <__vector_1+0x122>
    2fcc:	9e 87       	std	Y+14, r25	; 0x0e
    2fce:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2000);
	DCMOTOR_motorStop(MOTOR1, MOTOR2);
    2fd0:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <MOTOR2>
    2fd4:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <MOTOR2+0x1>
    2fd8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <MOTOR1>
    2fdc:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <MOTOR1+0x1>
    2fe0:	b9 01       	movw	r22, r18
    2fe2:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <DCMOTOR_motorStop>
}
    2fe6:	00 00       	nop
    2fe8:	2e 96       	adiw	r28, 0x0e	; 14
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	df 91       	pop	r29
    2ff6:	cf 91       	pop	r28
    2ff8:	ff 91       	pop	r31
    2ffa:	ef 91       	pop	r30
    2ffc:	bf 91       	pop	r27
    2ffe:	af 91       	pop	r26
    3000:	9f 91       	pop	r25
    3002:	8f 91       	pop	r24
    3004:	7f 91       	pop	r23
    3006:	6f 91       	pop	r22
    3008:	5f 91       	pop	r21
    300a:	4f 91       	pop	r20
    300c:	3f 91       	pop	r19
    300e:	2f 91       	pop	r18
    3010:	0f 90       	pop	r0
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	0f 90       	pop	r0
    3016:	1f 90       	pop	r1
    3018:	18 95       	reti

0000301a <setUp>:
 * @brief  : standard function setup all initializations & directions of all modules.
 * @param1 : void
 * @RetVal : void
 */
void setUp(void)
{
    301a:	cf 93       	push	r28
    301c:	df 93       	push	r29
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
	EXINTER_init(INT0, RISING);
    3022:	63 e0       	ldi	r22, 0x03	; 3
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	0e 94 a3 08 	call	0x1146	; 0x1146 <EXINTER_init>
	DCMOTOR_init(MOTOR1, MOTOR2);
    302a:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <MOTOR2>
    302e:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <MOTOR2+0x1>
    3032:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <MOTOR1>
    3036:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <MOTOR1+0x1>
    303a:	b9 01       	movw	r22, r18
    303c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <DCMOTOR_init>
	LCD_init(LCD);
    3040:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
    3044:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
    3048:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
    304c:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
    3050:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
    3054:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
    3058:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_init>
	KEYPAD_init(KEYPAD);
    305c:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <KEYPAD>
    3060:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <KEYPAD+0x1>
    3064:	40 91 d2 00 	lds	r20, 0x00D2	; 0x8000d2 <KEYPAD+0x2>
    3068:	50 91 d3 00 	lds	r21, 0x00D3	; 0x8000d3 <KEYPAD+0x3>
    306c:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <KEYPAD+0x4>
    3070:	70 91 d5 00 	lds	r23, 0x00D5	; 0x8000d5 <KEYPAD+0x5>
    3074:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <KEYPAD+0x6>
    3078:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <KEYPAD+0x7>
    307c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <KEYPAD_init>
	smartDoorLock_START();
    3080:	0e 94 49 00 	call	0x92	; 0x92 <smartDoorLock_START>

}
    3084:	00 00       	nop
    3086:	df 91       	pop	r29
    3088:	cf 91       	pop	r28
    308a:	08 95       	ret

0000308c <Loop>:
 * @brief  : standard function loop your Program.
 * @param1 : void
 * @RetVal : void
 */
void Loop(void)
{
    308c:	0f 93       	push	r16
    308e:	1f 93       	push	r17
    3090:	cf 93       	push	r28
    3092:	df 93       	push	r29
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	ad 97       	sbiw	r28, 0x2d	; 45
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
	uint_8 ir = Zero_INIT;
    30a4:	19 82       	std	Y+1, r1	; 0x01
	uint_8 val = Zero_INIT;
    30a6:	1d a6       	std	Y+45, r1	; 0x2d
	KEYPAD_getData(KEYPAD, &val);
    30a8:	ce 01       	movw	r24, r28
    30aa:	8d 96       	adiw	r24, 0x2d	; 45
    30ac:	8c 01       	movw	r16, r24
    30ae:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <KEYPAD>
    30b2:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <KEYPAD+0x1>
    30b6:	40 91 d2 00 	lds	r20, 0x00D2	; 0x8000d2 <KEYPAD+0x2>
    30ba:	50 91 d3 00 	lds	r21, 0x00D3	; 0x8000d3 <KEYPAD+0x3>
    30be:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <KEYPAD+0x4>
    30c2:	70 91 d5 00 	lds	r23, 0x00D5	; 0x8000d5 <KEYPAD+0x5>
    30c6:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <KEYPAD+0x6>
    30ca:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <KEYPAD+0x7>
    30ce:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <KEYPAD_getData>
	if(val == '#')
    30d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    30d4:	83 32       	cpi	r24, 0x23	; 35
    30d6:	09 f0       	breq	.+2      	; 0x30da <Loop+0x4e>
    30d8:	bf c1       	rjmp	.+894    	; 0x3458 <Loop+0x3cc>
	{
		LCD_writeCMD(LCD, _LCD_DISPLAY_ON);
    30da:	2c e0       	ldi	r18, 0x0C	; 12
    30dc:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
    30e0:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
    30e4:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
    30e8:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
    30ec:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
    30f0:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
    30f4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
		uint_8 alarm2 = Zero_INIT;
    30f8:	1a 82       	std	Y+2, r1	; 0x02
		alarm2 = smartDoorLock_Three_attempts();
    30fa:	0e 94 a6 00 	call	0x14c	; 0x14c <smartDoorLock_Three_attempts>
    30fe:	8a 83       	std	Y+2, r24	; 0x02
		if(alarm2 == 1)
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	81 30       	cpi	r24, 0x01	; 1
    3104:	09 f0       	breq	.+2      	; 0x3108 <Loop+0x7c>
    3106:	9e c0       	rjmp	.+316    	; 0x3244 <Loop+0x1b8>
		{
			LCD_GoTo(LCD, ROW2,1);
    3108:	01 e0       	ldi	r16, 0x01	; 1
    310a:	21 e0       	ldi	r18, 0x01	; 1
    310c:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
    3110:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
    3114:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
    3118:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
    311c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
    3120:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
    3124:	0e 94 9a 12 	call	0x2534	; 0x2534 <LCD_GoTo>
			LCD_writeSTR(LCD, "door can't be opened");
    3128:	2a e5       	ldi	r18, 0x5A	; 90
    312a:	31 e0       	ldi	r19, 0x01	; 1
    312c:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
    3130:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
    3134:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
    3138:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
    313c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
    3140:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
    3144:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_writeSTR>
			DCMOTOR_motorStop(MOTOR1, MOTOR2);
    3148:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <MOTOR2>
    314c:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <MOTOR2+0x1>
    3150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <MOTOR1>
    3154:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <MOTOR1+0x1>
    3158:	b9 01       	movw	r22, r18
    315a:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <DCMOTOR_motorStop>
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	aa ef       	ldi	r26, 0xFA	; 250
    3164:	b4 e4       	ldi	r27, 0x44	; 68
    3166:	8b 83       	std	Y+3, r24	; 0x03
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	ad 83       	std	Y+5, r26	; 0x05
    316c:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	4a e7       	ldi	r20, 0x7A	; 122
    3174:	53 e4       	ldi	r21, 0x43	; 67
    3176:	6b 81       	ldd	r22, Y+3	; 0x03
    3178:	7c 81       	ldd	r23, Y+4	; 0x04
    317a:	8d 81       	ldd	r24, Y+5	; 0x05
    317c:	9e 81       	ldd	r25, Y+6	; 0x06
    317e:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	8f 83       	std	Y+7, r24	; 0x07
    3188:	98 87       	std	Y+8, r25	; 0x08
    318a:	a9 87       	std	Y+9, r26	; 0x09
    318c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e8       	ldi	r20, 0x80	; 128
    3194:	5f e3       	ldi	r21, 0x3F	; 63
    3196:	6f 81       	ldd	r22, Y+7	; 0x07
    3198:	78 85       	ldd	r23, Y+8	; 0x08
    319a:	89 85       	ldd	r24, Y+9	; 0x09
    319c:	9a 85       	ldd	r25, Y+10	; 0x0a
    319e:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
    31a2:	88 23       	and	r24, r24
    31a4:	2c f4       	brge	.+10     	; 0x31b0 <Loop+0x124>
		__ticks = 1;
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	9c 87       	std	Y+12, r25	; 0x0c
    31ac:	8b 87       	std	Y+11, r24	; 0x0b
    31ae:	3f c0       	rjmp	.+126    	; 0x322e <Loop+0x1a2>
	else if (__tmp > 65535)
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	3f ef       	ldi	r19, 0xFF	; 255
    31b4:	4f e7       	ldi	r20, 0x7F	; 127
    31b6:	57 e4       	ldi	r21, 0x47	; 71
    31b8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ba:	78 85       	ldd	r23, Y+8	; 0x08
    31bc:	89 85       	ldd	r24, Y+9	; 0x09
    31be:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c0:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
    31c4:	18 16       	cp	r1, r24
    31c6:	4c f5       	brge	.+82     	; 0x321a <Loop+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	40 e2       	ldi	r20, 0x20	; 32
    31ce:	51 e4       	ldi	r21, 0x41	; 65
    31d0:	6b 81       	ldd	r22, Y+3	; 0x03
    31d2:	7c 81       	ldd	r23, Y+4	; 0x04
    31d4:	8d 81       	ldd	r24, Y+5	; 0x05
    31d6:	9e 81       	ldd	r25, Y+6	; 0x06
    31d8:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	bc 01       	movw	r22, r24
    31e2:	cd 01       	movw	r24, r26
    31e4:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	9c 87       	std	Y+12, r25	; 0x0c
    31ee:	8b 87       	std	Y+11, r24	; 0x0b
    31f0:	0f c0       	rjmp	.+30     	; 0x3210 <Loop+0x184>
    31f2:	89 e1       	ldi	r24, 0x19	; 25
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	9e 87       	std	Y+14, r25	; 0x0e
    31f8:	8d 87       	std	Y+13, r24	; 0x0d
    31fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <Loop+0x172>
    3202:	9e 87       	std	Y+14, r25	; 0x0e
    3204:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3206:	8b 85       	ldd	r24, Y+11	; 0x0b
    3208:	9c 85       	ldd	r25, Y+12	; 0x0c
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	9c 87       	std	Y+12, r25	; 0x0c
    320e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3210:	8b 85       	ldd	r24, Y+11	; 0x0b
    3212:	9c 85       	ldd	r25, Y+12	; 0x0c
    3214:	89 2b       	or	r24, r25
    3216:	69 f7       	brne	.-38     	; 0x31f2 <Loop+0x166>
    3218:	0f c1       	rjmp	.+542    	; 0x3438 <Loop+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321a:	6f 81       	ldd	r22, Y+7	; 0x07
    321c:	78 85       	ldd	r23, Y+8	; 0x08
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	9c 87       	std	Y+12, r25	; 0x0c
    322c:	8b 87       	std	Y+11, r24	; 0x0b
    322e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3230:	9c 85       	ldd	r25, Y+12	; 0x0c
    3232:	98 8b       	std	Y+16, r25	; 0x10
    3234:	8f 87       	std	Y+15, r24	; 0x0f
    3236:	8f 85       	ldd	r24, Y+15	; 0x0f
    3238:	98 89       	ldd	r25, Y+16	; 0x10
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <Loop+0x1ae>
    323e:	98 8b       	std	Y+16, r25	; 0x10
    3240:	8f 87       	std	Y+15, r24	; 0x0f
    3242:	fa c0       	rjmp	.+500    	; 0x3438 <Loop+0x3ac>
			_delay_ms(2000);
		}
		else
		{
			DCMOTOR_motorForward(MOTOR1, MOTOR2);
    3244:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <MOTOR2>
    3248:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <MOTOR2+0x1>
    324c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <MOTOR1>
    3250:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <MOTOR1+0x1>
    3254:	b9 01       	movw	r22, r18
    3256:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <DCMOTOR_motorForward>
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	aa ef       	ldi	r26, 0xFA	; 250
    3260:	b4 e4       	ldi	r27, 0x44	; 68
    3262:	8f 8f       	std	Y+31, r24	; 0x1f
    3264:	98 a3       	std	Y+32, r25	; 0x20
    3266:	a9 a3       	std	Y+33, r26	; 0x21
    3268:	ba a3       	std	Y+34, r27	; 0x22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	4a e7       	ldi	r20, 0x7A	; 122
    3270:	53 e4       	ldi	r21, 0x43	; 67
    3272:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3274:	78 a1       	ldd	r23, Y+32	; 0x20
    3276:	89 a1       	ldd	r24, Y+33	; 0x21
    3278:	9a a1       	ldd	r25, Y+34	; 0x22
    327a:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	8b a3       	std	Y+35, r24	; 0x23
    3284:	9c a3       	std	Y+36, r25	; 0x24
    3286:	ad a3       	std	Y+37, r26	; 0x25
    3288:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	40 e8       	ldi	r20, 0x80	; 128
    3290:	5f e3       	ldi	r21, 0x3F	; 63
    3292:	6b a1       	ldd	r22, Y+35	; 0x23
    3294:	7c a1       	ldd	r23, Y+36	; 0x24
    3296:	8d a1       	ldd	r24, Y+37	; 0x25
    3298:	9e a1       	ldd	r25, Y+38	; 0x26
    329a:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
    329e:	88 23       	and	r24, r24
    32a0:	2c f4       	brge	.+10     	; 0x32ac <Loop+0x220>
		__ticks = 1;
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	98 a7       	std	Y+40, r25	; 0x28
    32a8:	8f a3       	std	Y+39, r24	; 0x27
    32aa:	3f c0       	rjmp	.+126    	; 0x332a <Loop+0x29e>
	else if (__tmp > 65535)
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	3f ef       	ldi	r19, 0xFF	; 255
    32b0:	4f e7       	ldi	r20, 0x7F	; 127
    32b2:	57 e4       	ldi	r21, 0x47	; 71
    32b4:	6b a1       	ldd	r22, Y+35	; 0x23
    32b6:	7c a1       	ldd	r23, Y+36	; 0x24
    32b8:	8d a1       	ldd	r24, Y+37	; 0x25
    32ba:	9e a1       	ldd	r25, Y+38	; 0x26
    32bc:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
    32c0:	18 16       	cp	r1, r24
    32c2:	4c f5       	brge	.+82     	; 0x3316 <Loop+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e2       	ldi	r20, 0x20	; 32
    32ca:	51 e4       	ldi	r21, 0x41	; 65
    32cc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    32ce:	78 a1       	ldd	r23, Y+32	; 0x20
    32d0:	89 a1       	ldd	r24, Y+33	; 0x21
    32d2:	9a a1       	ldd	r25, Y+34	; 0x22
    32d4:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	bc 01       	movw	r22, r24
    32de:	cd 01       	movw	r24, r26
    32e0:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	98 a7       	std	Y+40, r25	; 0x28
    32ea:	8f a3       	std	Y+39, r24	; 0x27
    32ec:	0f c0       	rjmp	.+30     	; 0x330c <Loop+0x280>
    32ee:	89 e1       	ldi	r24, 0x19	; 25
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	9a a7       	std	Y+42, r25	; 0x2a
    32f4:	89 a7       	std	Y+41, r24	; 0x29
    32f6:	89 a5       	ldd	r24, Y+41	; 0x29
    32f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    32fa:	01 97       	sbiw	r24, 0x01	; 1
    32fc:	f1 f7       	brne	.-4      	; 0x32fa <Loop+0x26e>
    32fe:	9a a7       	std	Y+42, r25	; 0x2a
    3300:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3302:	8f a1       	ldd	r24, Y+39	; 0x27
    3304:	98 a5       	ldd	r25, Y+40	; 0x28
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	98 a7       	std	Y+40, r25	; 0x28
    330a:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330c:	8f a1       	ldd	r24, Y+39	; 0x27
    330e:	98 a5       	ldd	r25, Y+40	; 0x28
    3310:	89 2b       	or	r24, r25
    3312:	69 f7       	brne	.-38     	; 0x32ee <Loop+0x262>
    3314:	14 c0       	rjmp	.+40     	; 0x333e <Loop+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3316:	6b a1       	ldd	r22, Y+35	; 0x23
    3318:	7c a1       	ldd	r23, Y+36	; 0x24
    331a:	8d a1       	ldd	r24, Y+37	; 0x25
    331c:	9e a1       	ldd	r25, Y+38	; 0x26
    331e:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	98 a7       	std	Y+40, r25	; 0x28
    3328:	8f a3       	std	Y+39, r24	; 0x27
    332a:	8f a1       	ldd	r24, Y+39	; 0x27
    332c:	98 a5       	ldd	r25, Y+40	; 0x28
    332e:	9c a7       	std	Y+44, r25	; 0x2c
    3330:	8b a7       	std	Y+43, r24	; 0x2b
    3332:	8b a5       	ldd	r24, Y+43	; 0x2b
    3334:	9c a5       	ldd	r25, Y+44	; 0x2c
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	f1 f7       	brne	.-4      	; 0x3336 <Loop+0x2aa>
    333a:	9c a7       	std	Y+44, r25	; 0x2c
    333c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2000);
			DCMOTOR_motorStop(MOTOR1, MOTOR2);
    333e:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <MOTOR2>
    3342:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <MOTOR2+0x1>
    3346:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <MOTOR1>
    334a:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <MOTOR1+0x1>
    334e:	b9 01       	movw	r22, r18
    3350:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <DCMOTOR_motorStop>
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	aa ef       	ldi	r26, 0xFA	; 250
    335a:	b4 e4       	ldi	r27, 0x44	; 68
    335c:	89 8b       	std	Y+17, r24	; 0x11
    335e:	9a 8b       	std	Y+18, r25	; 0x12
    3360:	ab 8b       	std	Y+19, r26	; 0x13
    3362:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	4a e7       	ldi	r20, 0x7A	; 122
    336a:	53 e4       	ldi	r21, 0x43	; 67
    336c:	69 89       	ldd	r22, Y+17	; 0x11
    336e:	7a 89       	ldd	r23, Y+18	; 0x12
    3370:	8b 89       	ldd	r24, Y+19	; 0x13
    3372:	9c 89       	ldd	r25, Y+20	; 0x14
    3374:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	8d 8b       	std	Y+21, r24	; 0x15
    337e:	9e 8b       	std	Y+22, r25	; 0x16
    3380:	af 8b       	std	Y+23, r26	; 0x17
    3382:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	40 e8       	ldi	r20, 0x80	; 128
    338a:	5f e3       	ldi	r21, 0x3F	; 63
    338c:	6d 89       	ldd	r22, Y+21	; 0x15
    338e:	7e 89       	ldd	r23, Y+22	; 0x16
    3390:	8f 89       	ldd	r24, Y+23	; 0x17
    3392:	98 8d       	ldd	r25, Y+24	; 0x18
    3394:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__cmpsf2>
    3398:	88 23       	and	r24, r24
    339a:	2c f4       	brge	.+10     	; 0x33a6 <Loop+0x31a>
		__ticks = 1;
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	9a 8f       	std	Y+26, r25	; 0x1a
    33a2:	89 8f       	std	Y+25, r24	; 0x19
    33a4:	3f c0       	rjmp	.+126    	; 0x3424 <Loop+0x398>
	else if (__tmp > 65535)
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	3f ef       	ldi	r19, 0xFF	; 255
    33aa:	4f e7       	ldi	r20, 0x7F	; 127
    33ac:	57 e4       	ldi	r21, 0x47	; 71
    33ae:	6d 89       	ldd	r22, Y+21	; 0x15
    33b0:	7e 89       	ldd	r23, Y+22	; 0x16
    33b2:	8f 89       	ldd	r24, Y+23	; 0x17
    33b4:	98 8d       	ldd	r25, Y+24	; 0x18
    33b6:	0e 94 11 1c 	call	0x3822	; 0x3822 <__gesf2>
    33ba:	18 16       	cp	r1, r24
    33bc:	4c f5       	brge	.+82     	; 0x3410 <Loop+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e2       	ldi	r20, 0x20	; 32
    33c4:	51 e4       	ldi	r21, 0x41	; 65
    33c6:	69 89       	ldd	r22, Y+17	; 0x11
    33c8:	7a 89       	ldd	r23, Y+18	; 0x12
    33ca:	8b 89       	ldd	r24, Y+19	; 0x13
    33cc:	9c 89       	ldd	r25, Y+20	; 0x14
    33ce:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	bc 01       	movw	r22, r24
    33d8:	cd 01       	movw	r24, r26
    33da:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	9a 8f       	std	Y+26, r25	; 0x1a
    33e4:	89 8f       	std	Y+25, r24	; 0x19
    33e6:	0f c0       	rjmp	.+30     	; 0x3406 <Loop+0x37a>
    33e8:	89 e1       	ldi	r24, 0x19	; 25
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	9c 8f       	std	Y+28, r25	; 0x1c
    33ee:	8b 8f       	std	Y+27, r24	; 0x1b
    33f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <Loop+0x368>
    33f8:	9c 8f       	std	Y+28, r25	; 0x1c
    33fa:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fc:	89 8d       	ldd	r24, Y+25	; 0x19
    33fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	9a 8f       	std	Y+26, r25	; 0x1a
    3404:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3406:	89 8d       	ldd	r24, Y+25	; 0x19
    3408:	9a 8d       	ldd	r25, Y+26	; 0x1a
    340a:	89 2b       	or	r24, r25
    340c:	69 f7       	brne	.-38     	; 0x33e8 <Loop+0x35c>
    340e:	14 c0       	rjmp	.+40     	; 0x3438 <Loop+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3410:	6d 89       	ldd	r22, Y+21	; 0x15
    3412:	7e 89       	ldd	r23, Y+22	; 0x16
    3414:	8f 89       	ldd	r24, Y+23	; 0x17
    3416:	98 8d       	ldd	r25, Y+24	; 0x18
    3418:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fixunssfsi>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	9a 8f       	std	Y+26, r25	; 0x1a
    3422:	89 8f       	std	Y+25, r24	; 0x19
    3424:	89 8d       	ldd	r24, Y+25	; 0x19
    3426:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3428:	9e 8f       	std	Y+30, r25	; 0x1e
    342a:	8d 8f       	std	Y+29, r24	; 0x1d
    342c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    342e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	f1 f7       	brne	.-4      	; 0x3430 <Loop+0x3a4>
    3434:	9e 8f       	std	Y+30, r25	; 0x1e
    3436:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2000);
		}
		LCD_writeCMD(LCD, _LCD_DISPLAY_OFF);
    3438:	28 e0       	ldi	r18, 0x08	; 8
    343a:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
    343e:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
    3442:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
    3446:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
    344a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
    344e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
    3452:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
	}
	else
	{
		LCD_writeCMD(LCD, _LCD_DISPLAY_OFF);
	}
}
    3456:	0f c0       	rjmp	.+30     	; 0x3476 <Loop+0x3ea>
		}
		LCD_writeCMD(LCD, _LCD_DISPLAY_OFF);
	}
	else
	{
		LCD_writeCMD(LCD, _LCD_DISPLAY_OFF);
    3458:	28 e0       	ldi	r18, 0x08	; 8
    345a:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <LCD>
    345e:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <LCD+0x1>
    3462:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <LCD+0x2>
    3466:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <LCD+0x3>
    346a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <LCD+0x4>
    346e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCD+0x5>
    3472:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_writeCMD>
	}
}
    3476:	00 00       	nop
    3478:	ad 96       	adiw	r28, 0x2d	; 45
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	f8 94       	cli
    347e:	de bf       	out	0x3e, r29	; 62
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	cd bf       	out	0x3d, r28	; 61
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	1f 91       	pop	r17
    348a:	0f 91       	pop	r16
    348c:	08 95       	ret

0000348e <BCD_init>:
 *           pins of 7-SEGMENT is DIRECTION_PIN_OUTPUT
 * @param1 : copyBCDNum
 * @retVal : void
 */
void BCD_init(_BCD_PINS_ copyBCDNum)
{
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	00 d0       	rcall	.+0      	; 0x3494 <BCD_init+0x6>
    3494:	00 d0       	rcall	.+0      	; 0x3496 <BCD_init+0x8>
    3496:	1f 92       	push	r1
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	49 83       	std	Y+1, r20	; 0x01
    349e:	5a 83       	std	Y+2, r21	; 0x02
    34a0:	6b 83       	std	Y+3, r22	; 0x03
    34a2:	7c 83       	std	Y+4, r23	; 0x04
    34a4:	8d 83       	std	Y+5, r24	; 0x05
#if (_7SEG_TYPE == COMMON_ANODE)
	DIO_setPinDIR(copyBCDNum.ENABLE_PIN, _DIRECTION_PIN_OUTPUT);
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	61 e0       	ldi	r22, 0x01	; 1
    34aa:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN1, _DIRECTION_PIN_OUTPUT);
    34ae:	8a 81       	ldd	r24, Y+2	; 0x02
    34b0:	61 e0       	ldi	r22, 0x01	; 1
    34b2:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN2, _DIRECTION_PIN_OUTPUT);
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	61 e0       	ldi	r22, 0x01	; 1
    34ba:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN3, _DIRECTION_PIN_OUTPUT);
    34be:	8c 81       	ldd	r24, Y+4	; 0x04
    34c0:	61 e0       	ldi	r22, 0x01	; 1
    34c2:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN4, _DIRECTION_PIN_OUTPUT);
    34c6:	8d 81       	ldd	r24, Y+5	; 0x05
    34c8:	61 e0       	ldi	r22, 0x01	; 1
    34ca:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN1, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyBCDNum.PIN2, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyBCDNum.PIN3, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyBCDNum.PIN4, _DIRECTION_PIN_OUTPUT);
#endif
	BCD_displayEN(copyBCDNum);
    34ce:	49 81       	ldd	r20, Y+1	; 0x01
    34d0:	5a 81       	ldd	r21, Y+2	; 0x02
    34d2:	6b 81       	ldd	r22, Y+3	; 0x03
    34d4:	7c 81       	ldd	r23, Y+4	; 0x04
    34d6:	8d 81       	ldd	r24, Y+5	; 0x05
    34d8:	0e 94 77 1a 	call	0x34ee	; 0x34ee <BCD_displayEN>
}
    34dc:	00 00       	nop
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	0f 90       	pop	r0
    34e4:	0f 90       	pop	r0
    34e6:	0f 90       	pop	r0
    34e8:	df 91       	pop	r29
    34ea:	cf 91       	pop	r28
    34ec:	08 95       	ret

000034ee <BCD_displayEN>:
 * 			 if 7-SEGMENT is COMMON_CATHOD SET Enable bit STATUS_PIN_LOW.
 * @param1 : copyBCDNum
 * @retVal : void
 */
void BCD_displayEN(_BCD_PINS_ copyBCDNum)
{
    34ee:	cf 93       	push	r28
    34f0:	df 93       	push	r29
    34f2:	00 d0       	rcall	.+0      	; 0x34f4 <BCD_displayEN+0x6>
    34f4:	00 d0       	rcall	.+0      	; 0x34f6 <BCD_displayEN+0x8>
    34f6:	1f 92       	push	r1
    34f8:	cd b7       	in	r28, 0x3d	; 61
    34fa:	de b7       	in	r29, 0x3e	; 62
    34fc:	49 83       	std	Y+1, r20	; 0x01
    34fe:	5a 83       	std	Y+2, r21	; 0x02
    3500:	6b 83       	std	Y+3, r22	; 0x03
    3502:	7c 83       	std	Y+4, r23	; 0x04
    3504:	8d 83       	std	Y+5, r24	; 0x05
#if (_7SEG_TYPE == COMMON_ANODE)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_HIGH);
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	61 e0       	ldi	r22, 0x01	; 1
    350a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
#elif (_7SEG_TYPE == COMMON_CATHOD)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_LOW);
#endif
}
    350e:	00 00       	nop
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	0f 90       	pop	r0
    3518:	0f 90       	pop	r0
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	08 95       	ret

00003520 <BCD_displayDIS>:
 * 			 if 7-SEGMENT is COMMON_CATHOD SET Enable bit STATUS_PIN_HIGH.
 * @param1 : copyBCDNum
 * @retVal : void
 */
void BCD_displayDIS(_BCD_PINS_ copyBCDNum)
{
    3520:	cf 93       	push	r28
    3522:	df 93       	push	r29
    3524:	00 d0       	rcall	.+0      	; 0x3526 <BCD_displayDIS+0x6>
    3526:	00 d0       	rcall	.+0      	; 0x3528 <BCD_displayDIS+0x8>
    3528:	1f 92       	push	r1
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	49 83       	std	Y+1, r20	; 0x01
    3530:	5a 83       	std	Y+2, r21	; 0x02
    3532:	6b 83       	std	Y+3, r22	; 0x03
    3534:	7c 83       	std	Y+4, r23	; 0x04
    3536:	8d 83       	std	Y+5, r24	; 0x05
#if (_7SEG_TYPE == COMMON_ANODE)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_LOW);
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	60 e0       	ldi	r22, 0x00	; 0
    353c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
#elif (_7SEG_TYPE == COMMON_CATHOD)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_HIGH);
#endif
}
    3540:	00 00       	nop
    3542:	0f 90       	pop	r0
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	08 95       	ret

00003552 <BCD_displayNum>:
 * @param1 : copyBCDNum
 * @param2 : copyNumber
 * @retVal : void
 */
void BCD_displayNum(_BCD_PINS_ copyBCDNum, uint_8 copyNumber)
{
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	00 d0       	rcall	.+0      	; 0x3558 <BCD_displayNum+0x6>
    3558:	00 d0       	rcall	.+0      	; 0x355a <BCD_displayNum+0x8>
    355a:	00 d0       	rcall	.+0      	; 0x355c <BCD_displayNum+0xa>
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	49 83       	std	Y+1, r20	; 0x01
    3562:	5a 83       	std	Y+2, r21	; 0x02
    3564:	6b 83       	std	Y+3, r22	; 0x03
    3566:	7c 83       	std	Y+4, r23	; 0x04
    3568:	8d 83       	std	Y+5, r24	; 0x05
    356a:	2e 83       	std	Y+6, r18	; 0x06
	if(copyNumber <= 9)
    356c:	8e 81       	ldd	r24, Y+6	; 0x06
    356e:	8a 30       	cpi	r24, 0x0A	; 10
    3570:	18 f5       	brcc	.+70     	; 0x35b8 <BCD_displayNum+0x66>
	{
		DIO_setPinVAL(copyBCDNum.PIN1,  copyNumber & 0x01);
    3572:	8e 81       	ldd	r24, Y+6	; 0x06
    3574:	98 2f       	mov	r25, r24
    3576:	91 70       	andi	r25, 0x01	; 1
    3578:	8a 81       	ldd	r24, Y+2	; 0x02
    357a:	69 2f       	mov	r22, r25
    357c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
		DIO_setPinVAL(copyBCDNum.PIN2, (copyNumber >> 1) & 0x01);
    3580:	8e 81       	ldd	r24, Y+6	; 0x06
    3582:	86 95       	lsr	r24
    3584:	98 2f       	mov	r25, r24
    3586:	91 70       	andi	r25, 0x01	; 1
    3588:	8b 81       	ldd	r24, Y+3	; 0x03
    358a:	69 2f       	mov	r22, r25
    358c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
		DIO_setPinVAL(copyBCDNum.PIN3, (copyNumber >> 2) & 0x01);
    3590:	8e 81       	ldd	r24, Y+6	; 0x06
    3592:	86 95       	lsr	r24
    3594:	86 95       	lsr	r24
    3596:	98 2f       	mov	r25, r24
    3598:	91 70       	andi	r25, 0x01	; 1
    359a:	8c 81       	ldd	r24, Y+4	; 0x04
    359c:	69 2f       	mov	r22, r25
    359e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
		DIO_setPinVAL(copyBCDNum.PIN4, (copyNumber >> 3) & 0x01);
    35a2:	8e 81       	ldd	r24, Y+6	; 0x06
    35a4:	86 95       	lsr	r24
    35a6:	86 95       	lsr	r24
    35a8:	86 95       	lsr	r24
    35aa:	98 2f       	mov	r25, r24
    35ac:	91 70       	andi	r25, 0x01	; 1
    35ae:	8d 81       	ldd	r24, Y+5	; 0x05
    35b0:	69 2f       	mov	r22, r25
    35b2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_setPinVAL>
	}
	else
	{
		BCD_displayDIS(copyBCDNum);
	}
}
    35b6:	07 c0       	rjmp	.+14     	; 0x35c6 <BCD_displayNum+0x74>
		DIO_setPinVAL(copyBCDNum.PIN3, (copyNumber >> 2) & 0x01);
		DIO_setPinVAL(copyBCDNum.PIN4, (copyNumber >> 3) & 0x01);
	}
	else
	{
		BCD_displayDIS(copyBCDNum);
    35b8:	49 81       	ldd	r20, Y+1	; 0x01
    35ba:	5a 81       	ldd	r21, Y+2	; 0x02
    35bc:	6b 81       	ldd	r22, Y+3	; 0x03
    35be:	7c 81       	ldd	r23, Y+4	; 0x04
    35c0:	8d 81       	ldd	r24, Y+5	; 0x05
    35c2:	0e 94 90 1a 	call	0x3520	; 0x3520 <BCD_displayDIS>
	}
}
    35c6:	00 00       	nop
    35c8:	26 96       	adiw	r28, 0x06	; 6
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	f8 94       	cli
    35ce:	de bf       	out	0x3e, r29	; 62
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	cd bf       	out	0x3d, r28	; 61
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	08 95       	ret

000035da <main>:

/*********** INCLUDES ***********/
#include "MAIN_Init.h"

int main (void)
{
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
	setUp();
    35e2:	0e 94 0d 18 	call	0x301a	; 0x301a <setUp>
	while(1)
	{
		Loop();
    35e6:	0e 94 46 18 	call	0x308c	; 0x308c <Loop>
    35ea:	fd cf       	rjmp	.-6      	; 0x35e6 <main+0xc>

000035ec <__cmpsf2>:
    35ec:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__fp_cmp>
    35f0:	08 f4       	brcc	.+2      	; 0x35f4 <__cmpsf2+0x8>
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	08 95       	ret

000035f6 <__divsf3>:
    35f6:	0e 94 0f 1b 	call	0x361e	; 0x361e <__divsf3x>
    35fa:	0c 94 d7 1b 	jmp	0x37ae	; 0x37ae <__fp_round>
    35fe:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__fp_pscB>
    3602:	58 f0       	brcs	.+22     	; 0x361a <__divsf3+0x24>
    3604:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__fp_pscA>
    3608:	40 f0       	brcs	.+16     	; 0x361a <__divsf3+0x24>
    360a:	29 f4       	brne	.+10     	; 0x3616 <__divsf3+0x20>
    360c:	5f 3f       	cpi	r21, 0xFF	; 255
    360e:	29 f0       	breq	.+10     	; 0x361a <__divsf3+0x24>
    3610:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__fp_inf>
    3614:	51 11       	cpse	r21, r1
    3616:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__fp_szero>
    361a:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__fp_nan>

0000361e <__divsf3x>:
    361e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__fp_split3>
    3622:	68 f3       	brcs	.-38     	; 0x35fe <__divsf3+0x8>

00003624 <__divsf3_pse>:
    3624:	99 23       	and	r25, r25
    3626:	b1 f3       	breq	.-20     	; 0x3614 <__divsf3+0x1e>
    3628:	55 23       	and	r21, r21
    362a:	91 f3       	breq	.-28     	; 0x3610 <__divsf3+0x1a>
    362c:	95 1b       	sub	r25, r21
    362e:	55 0b       	sbc	r21, r21
    3630:	bb 27       	eor	r27, r27
    3632:	aa 27       	eor	r26, r26
    3634:	62 17       	cp	r22, r18
    3636:	73 07       	cpc	r23, r19
    3638:	84 07       	cpc	r24, r20
    363a:	38 f0       	brcs	.+14     	; 0x364a <__divsf3_pse+0x26>
    363c:	9f 5f       	subi	r25, 0xFF	; 255
    363e:	5f 4f       	sbci	r21, 0xFF	; 255
    3640:	22 0f       	add	r18, r18
    3642:	33 1f       	adc	r19, r19
    3644:	44 1f       	adc	r20, r20
    3646:	aa 1f       	adc	r26, r26
    3648:	a9 f3       	breq	.-22     	; 0x3634 <__divsf3_pse+0x10>
    364a:	35 d0       	rcall	.+106    	; 0x36b6 <__divsf3_pse+0x92>
    364c:	0e 2e       	mov	r0, r30
    364e:	3a f0       	brmi	.+14     	; 0x365e <__divsf3_pse+0x3a>
    3650:	e0 e8       	ldi	r30, 0x80	; 128
    3652:	32 d0       	rcall	.+100    	; 0x36b8 <__divsf3_pse+0x94>
    3654:	91 50       	subi	r25, 0x01	; 1
    3656:	50 40       	sbci	r21, 0x00	; 0
    3658:	e6 95       	lsr	r30
    365a:	00 1c       	adc	r0, r0
    365c:	ca f7       	brpl	.-14     	; 0x3650 <__divsf3_pse+0x2c>
    365e:	2b d0       	rcall	.+86     	; 0x36b6 <__divsf3_pse+0x92>
    3660:	fe 2f       	mov	r31, r30
    3662:	29 d0       	rcall	.+82     	; 0x36b6 <__divsf3_pse+0x92>
    3664:	66 0f       	add	r22, r22
    3666:	77 1f       	adc	r23, r23
    3668:	88 1f       	adc	r24, r24
    366a:	bb 1f       	adc	r27, r27
    366c:	26 17       	cp	r18, r22
    366e:	37 07       	cpc	r19, r23
    3670:	48 07       	cpc	r20, r24
    3672:	ab 07       	cpc	r26, r27
    3674:	b0 e8       	ldi	r27, 0x80	; 128
    3676:	09 f0       	breq	.+2      	; 0x367a <__divsf3_pse+0x56>
    3678:	bb 0b       	sbc	r27, r27
    367a:	80 2d       	mov	r24, r0
    367c:	bf 01       	movw	r22, r30
    367e:	ff 27       	eor	r31, r31
    3680:	93 58       	subi	r25, 0x83	; 131
    3682:	5f 4f       	sbci	r21, 0xFF	; 255
    3684:	3a f0       	brmi	.+14     	; 0x3694 <__divsf3_pse+0x70>
    3686:	9e 3f       	cpi	r25, 0xFE	; 254
    3688:	51 05       	cpc	r21, r1
    368a:	78 f0       	brcs	.+30     	; 0x36aa <__divsf3_pse+0x86>
    368c:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__fp_inf>
    3690:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__fp_szero>
    3694:	5f 3f       	cpi	r21, 0xFF	; 255
    3696:	e4 f3       	brlt	.-8      	; 0x3690 <__divsf3_pse+0x6c>
    3698:	98 3e       	cpi	r25, 0xE8	; 232
    369a:	d4 f3       	brlt	.-12     	; 0x3690 <__divsf3_pse+0x6c>
    369c:	86 95       	lsr	r24
    369e:	77 95       	ror	r23
    36a0:	67 95       	ror	r22
    36a2:	b7 95       	ror	r27
    36a4:	f7 95       	ror	r31
    36a6:	9f 5f       	subi	r25, 0xFF	; 255
    36a8:	c9 f7       	brne	.-14     	; 0x369c <__divsf3_pse+0x78>
    36aa:	88 0f       	add	r24, r24
    36ac:	91 1d       	adc	r25, r1
    36ae:	96 95       	lsr	r25
    36b0:	87 95       	ror	r24
    36b2:	97 f9       	bld	r25, 7
    36b4:	08 95       	ret
    36b6:	e1 e0       	ldi	r30, 0x01	; 1
    36b8:	66 0f       	add	r22, r22
    36ba:	77 1f       	adc	r23, r23
    36bc:	88 1f       	adc	r24, r24
    36be:	bb 1f       	adc	r27, r27
    36c0:	62 17       	cp	r22, r18
    36c2:	73 07       	cpc	r23, r19
    36c4:	84 07       	cpc	r24, r20
    36c6:	ba 07       	cpc	r27, r26
    36c8:	20 f0       	brcs	.+8      	; 0x36d2 <__divsf3_pse+0xae>
    36ca:	62 1b       	sub	r22, r18
    36cc:	73 0b       	sbc	r23, r19
    36ce:	84 0b       	sbc	r24, r20
    36d0:	ba 0b       	sbc	r27, r26
    36d2:	ee 1f       	adc	r30, r30
    36d4:	88 f7       	brcc	.-30     	; 0x36b8 <__divsf3_pse+0x94>
    36d6:	e0 95       	com	r30
    36d8:	08 95       	ret

000036da <__fixunssfsi>:
    36da:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <__fp_splitA>
    36de:	88 f0       	brcs	.+34     	; 0x3702 <__fixunssfsi+0x28>
    36e0:	9f 57       	subi	r25, 0x7F	; 127
    36e2:	98 f0       	brcs	.+38     	; 0x370a <__fixunssfsi+0x30>
    36e4:	b9 2f       	mov	r27, r25
    36e6:	99 27       	eor	r25, r25
    36e8:	b7 51       	subi	r27, 0x17	; 23
    36ea:	b0 f0       	brcs	.+44     	; 0x3718 <__fixunssfsi+0x3e>
    36ec:	e1 f0       	breq	.+56     	; 0x3726 <__fixunssfsi+0x4c>
    36ee:	66 0f       	add	r22, r22
    36f0:	77 1f       	adc	r23, r23
    36f2:	88 1f       	adc	r24, r24
    36f4:	99 1f       	adc	r25, r25
    36f6:	1a f0       	brmi	.+6      	; 0x36fe <__fixunssfsi+0x24>
    36f8:	ba 95       	dec	r27
    36fa:	c9 f7       	brne	.-14     	; 0x36ee <__fixunssfsi+0x14>
    36fc:	14 c0       	rjmp	.+40     	; 0x3726 <__fixunssfsi+0x4c>
    36fe:	b1 30       	cpi	r27, 0x01	; 1
    3700:	91 f0       	breq	.+36     	; 0x3726 <__fixunssfsi+0x4c>
    3702:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__fp_zero>
    3706:	b1 e0       	ldi	r27, 0x01	; 1
    3708:	08 95       	ret
    370a:	0c 94 0a 1c 	jmp	0x3814	; 0x3814 <__fp_zero>
    370e:	67 2f       	mov	r22, r23
    3710:	78 2f       	mov	r23, r24
    3712:	88 27       	eor	r24, r24
    3714:	b8 5f       	subi	r27, 0xF8	; 248
    3716:	39 f0       	breq	.+14     	; 0x3726 <__fixunssfsi+0x4c>
    3718:	b9 3f       	cpi	r27, 0xF9	; 249
    371a:	cc f3       	brlt	.-14     	; 0x370e <__fixunssfsi+0x34>
    371c:	86 95       	lsr	r24
    371e:	77 95       	ror	r23
    3720:	67 95       	ror	r22
    3722:	b3 95       	inc	r27
    3724:	d9 f7       	brne	.-10     	; 0x371c <__fixunssfsi+0x42>
    3726:	3e f4       	brtc	.+14     	; 0x3736 <__fixunssfsi+0x5c>
    3728:	90 95       	com	r25
    372a:	80 95       	com	r24
    372c:	70 95       	com	r23
    372e:	61 95       	neg	r22
    3730:	7f 4f       	sbci	r23, 0xFF	; 255
    3732:	8f 4f       	sbci	r24, 0xFF	; 255
    3734:	9f 4f       	sbci	r25, 0xFF	; 255
    3736:	08 95       	ret

00003738 <__fp_cmp>:
    3738:	99 0f       	add	r25, r25
    373a:	00 08       	sbc	r0, r0
    373c:	55 0f       	add	r21, r21
    373e:	aa 0b       	sbc	r26, r26
    3740:	e0 e8       	ldi	r30, 0x80	; 128
    3742:	fe ef       	ldi	r31, 0xFE	; 254
    3744:	16 16       	cp	r1, r22
    3746:	17 06       	cpc	r1, r23
    3748:	e8 07       	cpc	r30, r24
    374a:	f9 07       	cpc	r31, r25
    374c:	c0 f0       	brcs	.+48     	; 0x377e <__fp_cmp+0x46>
    374e:	12 16       	cp	r1, r18
    3750:	13 06       	cpc	r1, r19
    3752:	e4 07       	cpc	r30, r20
    3754:	f5 07       	cpc	r31, r21
    3756:	98 f0       	brcs	.+38     	; 0x377e <__fp_cmp+0x46>
    3758:	62 1b       	sub	r22, r18
    375a:	73 0b       	sbc	r23, r19
    375c:	84 0b       	sbc	r24, r20
    375e:	95 0b       	sbc	r25, r21
    3760:	39 f4       	brne	.+14     	; 0x3770 <__fp_cmp+0x38>
    3762:	0a 26       	eor	r0, r26
    3764:	61 f0       	breq	.+24     	; 0x377e <__fp_cmp+0x46>
    3766:	23 2b       	or	r18, r19
    3768:	24 2b       	or	r18, r20
    376a:	25 2b       	or	r18, r21
    376c:	21 f4       	brne	.+8      	; 0x3776 <__fp_cmp+0x3e>
    376e:	08 95       	ret
    3770:	0a 26       	eor	r0, r26
    3772:	09 f4       	brne	.+2      	; 0x3776 <__fp_cmp+0x3e>
    3774:	a1 40       	sbci	r26, 0x01	; 1
    3776:	a6 95       	lsr	r26
    3778:	8f ef       	ldi	r24, 0xFF	; 255
    377a:	81 1d       	adc	r24, r1
    377c:	81 1d       	adc	r24, r1
    377e:	08 95       	ret

00003780 <__fp_inf>:
    3780:	97 f9       	bld	r25, 7
    3782:	9f 67       	ori	r25, 0x7F	; 127
    3784:	80 e8       	ldi	r24, 0x80	; 128
    3786:	70 e0       	ldi	r23, 0x00	; 0
    3788:	60 e0       	ldi	r22, 0x00	; 0
    378a:	08 95       	ret

0000378c <__fp_nan>:
    378c:	9f ef       	ldi	r25, 0xFF	; 255
    378e:	80 ec       	ldi	r24, 0xC0	; 192
    3790:	08 95       	ret

00003792 <__fp_pscA>:
    3792:	00 24       	eor	r0, r0
    3794:	0a 94       	dec	r0
    3796:	16 16       	cp	r1, r22
    3798:	17 06       	cpc	r1, r23
    379a:	18 06       	cpc	r1, r24
    379c:	09 06       	cpc	r0, r25
    379e:	08 95       	ret

000037a0 <__fp_pscB>:
    37a0:	00 24       	eor	r0, r0
    37a2:	0a 94       	dec	r0
    37a4:	12 16       	cp	r1, r18
    37a6:	13 06       	cpc	r1, r19
    37a8:	14 06       	cpc	r1, r20
    37aa:	05 06       	cpc	r0, r21
    37ac:	08 95       	ret

000037ae <__fp_round>:
    37ae:	09 2e       	mov	r0, r25
    37b0:	03 94       	inc	r0
    37b2:	00 0c       	add	r0, r0
    37b4:	11 f4       	brne	.+4      	; 0x37ba <__fp_round+0xc>
    37b6:	88 23       	and	r24, r24
    37b8:	52 f0       	brmi	.+20     	; 0x37ce <__fp_round+0x20>
    37ba:	bb 0f       	add	r27, r27
    37bc:	40 f4       	brcc	.+16     	; 0x37ce <__fp_round+0x20>
    37be:	bf 2b       	or	r27, r31
    37c0:	11 f4       	brne	.+4      	; 0x37c6 <__fp_round+0x18>
    37c2:	60 ff       	sbrs	r22, 0
    37c4:	04 c0       	rjmp	.+8      	; 0x37ce <__fp_round+0x20>
    37c6:	6f 5f       	subi	r22, 0xFF	; 255
    37c8:	7f 4f       	sbci	r23, 0xFF	; 255
    37ca:	8f 4f       	sbci	r24, 0xFF	; 255
    37cc:	9f 4f       	sbci	r25, 0xFF	; 255
    37ce:	08 95       	ret

000037d0 <__fp_split3>:
    37d0:	57 fd       	sbrc	r21, 7
    37d2:	90 58       	subi	r25, 0x80	; 128
    37d4:	44 0f       	add	r20, r20
    37d6:	55 1f       	adc	r21, r21
    37d8:	59 f0       	breq	.+22     	; 0x37f0 <__fp_splitA+0x10>
    37da:	5f 3f       	cpi	r21, 0xFF	; 255
    37dc:	71 f0       	breq	.+28     	; 0x37fa <__fp_splitA+0x1a>
    37de:	47 95       	ror	r20

000037e0 <__fp_splitA>:
    37e0:	88 0f       	add	r24, r24
    37e2:	97 fb       	bst	r25, 7
    37e4:	99 1f       	adc	r25, r25
    37e6:	61 f0       	breq	.+24     	; 0x3800 <__fp_splitA+0x20>
    37e8:	9f 3f       	cpi	r25, 0xFF	; 255
    37ea:	79 f0       	breq	.+30     	; 0x380a <__fp_splitA+0x2a>
    37ec:	87 95       	ror	r24
    37ee:	08 95       	ret
    37f0:	12 16       	cp	r1, r18
    37f2:	13 06       	cpc	r1, r19
    37f4:	14 06       	cpc	r1, r20
    37f6:	55 1f       	adc	r21, r21
    37f8:	f2 cf       	rjmp	.-28     	; 0x37de <__fp_split3+0xe>
    37fa:	46 95       	lsr	r20
    37fc:	f1 df       	rcall	.-30     	; 0x37e0 <__fp_splitA>
    37fe:	08 c0       	rjmp	.+16     	; 0x3810 <__fp_splitA+0x30>
    3800:	16 16       	cp	r1, r22
    3802:	17 06       	cpc	r1, r23
    3804:	18 06       	cpc	r1, r24
    3806:	99 1f       	adc	r25, r25
    3808:	f1 cf       	rjmp	.-30     	; 0x37ec <__fp_splitA+0xc>
    380a:	86 95       	lsr	r24
    380c:	71 05       	cpc	r23, r1
    380e:	61 05       	cpc	r22, r1
    3810:	08 94       	sec
    3812:	08 95       	ret

00003814 <__fp_zero>:
    3814:	e8 94       	clt

00003816 <__fp_szero>:
    3816:	bb 27       	eor	r27, r27
    3818:	66 27       	eor	r22, r22
    381a:	77 27       	eor	r23, r23
    381c:	cb 01       	movw	r24, r22
    381e:	97 f9       	bld	r25, 7
    3820:	08 95       	ret

00003822 <__gesf2>:
    3822:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__fp_cmp>
    3826:	08 f4       	brcc	.+2      	; 0x382a <__gesf2+0x8>
    3828:	8f ef       	ldi	r24, 0xFF	; 255
    382a:	08 95       	ret

0000382c <__mulsf3>:
    382c:	0e 94 29 1c 	call	0x3852	; 0x3852 <__mulsf3x>
    3830:	0c 94 d7 1b 	jmp	0x37ae	; 0x37ae <__fp_round>
    3834:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__fp_pscA>
    3838:	38 f0       	brcs	.+14     	; 0x3848 <__mulsf3+0x1c>
    383a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__fp_pscB>
    383e:	20 f0       	brcs	.+8      	; 0x3848 <__mulsf3+0x1c>
    3840:	95 23       	and	r25, r21
    3842:	11 f0       	breq	.+4      	; 0x3848 <__mulsf3+0x1c>
    3844:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__fp_inf>
    3848:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__fp_nan>
    384c:	11 24       	eor	r1, r1
    384e:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__fp_szero>

00003852 <__mulsf3x>:
    3852:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__fp_split3>
    3856:	70 f3       	brcs	.-36     	; 0x3834 <__mulsf3+0x8>

00003858 <__mulsf3_pse>:
    3858:	95 9f       	mul	r25, r21
    385a:	c1 f3       	breq	.-16     	; 0x384c <__mulsf3+0x20>
    385c:	95 0f       	add	r25, r21
    385e:	50 e0       	ldi	r21, 0x00	; 0
    3860:	55 1f       	adc	r21, r21
    3862:	62 9f       	mul	r22, r18
    3864:	f0 01       	movw	r30, r0
    3866:	72 9f       	mul	r23, r18
    3868:	bb 27       	eor	r27, r27
    386a:	f0 0d       	add	r31, r0
    386c:	b1 1d       	adc	r27, r1
    386e:	63 9f       	mul	r22, r19
    3870:	aa 27       	eor	r26, r26
    3872:	f0 0d       	add	r31, r0
    3874:	b1 1d       	adc	r27, r1
    3876:	aa 1f       	adc	r26, r26
    3878:	64 9f       	mul	r22, r20
    387a:	66 27       	eor	r22, r22
    387c:	b0 0d       	add	r27, r0
    387e:	a1 1d       	adc	r26, r1
    3880:	66 1f       	adc	r22, r22
    3882:	82 9f       	mul	r24, r18
    3884:	22 27       	eor	r18, r18
    3886:	b0 0d       	add	r27, r0
    3888:	a1 1d       	adc	r26, r1
    388a:	62 1f       	adc	r22, r18
    388c:	73 9f       	mul	r23, r19
    388e:	b0 0d       	add	r27, r0
    3890:	a1 1d       	adc	r26, r1
    3892:	62 1f       	adc	r22, r18
    3894:	83 9f       	mul	r24, r19
    3896:	a0 0d       	add	r26, r0
    3898:	61 1d       	adc	r22, r1
    389a:	22 1f       	adc	r18, r18
    389c:	74 9f       	mul	r23, r20
    389e:	33 27       	eor	r19, r19
    38a0:	a0 0d       	add	r26, r0
    38a2:	61 1d       	adc	r22, r1
    38a4:	23 1f       	adc	r18, r19
    38a6:	84 9f       	mul	r24, r20
    38a8:	60 0d       	add	r22, r0
    38aa:	21 1d       	adc	r18, r1
    38ac:	82 2f       	mov	r24, r18
    38ae:	76 2f       	mov	r23, r22
    38b0:	6a 2f       	mov	r22, r26
    38b2:	11 24       	eor	r1, r1
    38b4:	9f 57       	subi	r25, 0x7F	; 127
    38b6:	50 40       	sbci	r21, 0x00	; 0
    38b8:	9a f0       	brmi	.+38     	; 0x38e0 <__mulsf3_pse+0x88>
    38ba:	f1 f0       	breq	.+60     	; 0x38f8 <__mulsf3_pse+0xa0>
    38bc:	88 23       	and	r24, r24
    38be:	4a f0       	brmi	.+18     	; 0x38d2 <__mulsf3_pse+0x7a>
    38c0:	ee 0f       	add	r30, r30
    38c2:	ff 1f       	adc	r31, r31
    38c4:	bb 1f       	adc	r27, r27
    38c6:	66 1f       	adc	r22, r22
    38c8:	77 1f       	adc	r23, r23
    38ca:	88 1f       	adc	r24, r24
    38cc:	91 50       	subi	r25, 0x01	; 1
    38ce:	50 40       	sbci	r21, 0x00	; 0
    38d0:	a9 f7       	brne	.-22     	; 0x38bc <__mulsf3_pse+0x64>
    38d2:	9e 3f       	cpi	r25, 0xFE	; 254
    38d4:	51 05       	cpc	r21, r1
    38d6:	80 f0       	brcs	.+32     	; 0x38f8 <__mulsf3_pse+0xa0>
    38d8:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__fp_inf>
    38dc:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__fp_szero>
    38e0:	5f 3f       	cpi	r21, 0xFF	; 255
    38e2:	e4 f3       	brlt	.-8      	; 0x38dc <__mulsf3_pse+0x84>
    38e4:	98 3e       	cpi	r25, 0xE8	; 232
    38e6:	d4 f3       	brlt	.-12     	; 0x38dc <__mulsf3_pse+0x84>
    38e8:	86 95       	lsr	r24
    38ea:	77 95       	ror	r23
    38ec:	67 95       	ror	r22
    38ee:	b7 95       	ror	r27
    38f0:	f7 95       	ror	r31
    38f2:	e7 95       	ror	r30
    38f4:	9f 5f       	subi	r25, 0xFF	; 255
    38f6:	c1 f7       	brne	.-16     	; 0x38e8 <__mulsf3_pse+0x90>
    38f8:	fe 2b       	or	r31, r30
    38fa:	88 0f       	add	r24, r24
    38fc:	91 1d       	adc	r25, r1
    38fe:	96 95       	lsr	r25
    3900:	87 95       	ror	r24
    3902:	97 f9       	bld	r25, 7
    3904:	08 95       	ret

00003906 <memset>:
    3906:	dc 01       	movw	r26, r24
    3908:	01 c0       	rjmp	.+2      	; 0x390c <memset+0x6>
    390a:	6d 93       	st	X+, r22
    390c:	41 50       	subi	r20, 0x01	; 1
    390e:	50 40       	sbci	r21, 0x00	; 0
    3910:	e0 f7       	brcc	.-8      	; 0x390a <memset+0x4>
    3912:	08 95       	ret

00003914 <sprintf>:
    3914:	ae e0       	ldi	r26, 0x0E	; 14
    3916:	b0 e0       	ldi	r27, 0x00	; 0
    3918:	e0 e9       	ldi	r30, 0x90	; 144
    391a:	fc e1       	ldi	r31, 0x1C	; 28
    391c:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__prologue_saves__+0x1c>
    3920:	0d 89       	ldd	r16, Y+21	; 0x15
    3922:	1e 89       	ldd	r17, Y+22	; 0x16
    3924:	86 e0       	ldi	r24, 0x06	; 6
    3926:	8c 83       	std	Y+4, r24	; 0x04
    3928:	1a 83       	std	Y+2, r17	; 0x02
    392a:	09 83       	std	Y+1, r16	; 0x01
    392c:	8f ef       	ldi	r24, 0xFF	; 255
    392e:	9f e7       	ldi	r25, 0x7F	; 127
    3930:	9e 83       	std	Y+6, r25	; 0x06
    3932:	8d 83       	std	Y+5, r24	; 0x05
    3934:	ae 01       	movw	r20, r28
    3936:	47 5e       	subi	r20, 0xE7	; 231
    3938:	5f 4f       	sbci	r21, 0xFF	; 255
    393a:	6f 89       	ldd	r22, Y+23	; 0x17
    393c:	78 8d       	ldd	r23, Y+24	; 0x18
    393e:	ce 01       	movw	r24, r28
    3940:	01 96       	adiw	r24, 0x01	; 1
    3942:	0e 94 ad 1c 	call	0x395a	; 0x395a <vfprintf>
    3946:	2f 81       	ldd	r18, Y+7	; 0x07
    3948:	38 85       	ldd	r19, Y+8	; 0x08
    394a:	02 0f       	add	r16, r18
    394c:	13 1f       	adc	r17, r19
    394e:	f8 01       	movw	r30, r16
    3950:	10 82       	st	Z, r1
    3952:	2e 96       	adiw	r28, 0x0e	; 14
    3954:	e4 e0       	ldi	r30, 0x04	; 4
    3956:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <__epilogue_restores__+0x1c>

0000395a <vfprintf>:
    395a:	ab e0       	ldi	r26, 0x0B	; 11
    395c:	b0 e0       	ldi	r27, 0x00	; 0
    395e:	e3 eb       	ldi	r30, 0xB3	; 179
    3960:	fc e1       	ldi	r31, 0x1C	; 28
    3962:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__prologue_saves__>
    3966:	7c 01       	movw	r14, r24
    3968:	3b 01       	movw	r6, r22
    396a:	8a 01       	movw	r16, r20
    396c:	fc 01       	movw	r30, r24
    396e:	17 82       	std	Z+7, r1	; 0x07
    3970:	16 82       	std	Z+6, r1	; 0x06
    3972:	83 81       	ldd	r24, Z+3	; 0x03
    3974:	81 ff       	sbrs	r24, 1
    3976:	c8 c1       	rjmp	.+912    	; 0x3d08 <vfprintf+0x3ae>
    3978:	ce 01       	movw	r24, r28
    397a:	01 96       	adiw	r24, 0x01	; 1
    397c:	5c 01       	movw	r10, r24
    397e:	f7 01       	movw	r30, r14
    3980:	93 81       	ldd	r25, Z+3	; 0x03
    3982:	f3 01       	movw	r30, r6
    3984:	93 fd       	sbrc	r25, 3
    3986:	85 91       	lpm	r24, Z+
    3988:	93 ff       	sbrs	r25, 3
    398a:	81 91       	ld	r24, Z+
    398c:	3f 01       	movw	r6, r30
    398e:	88 23       	and	r24, r24
    3990:	09 f4       	brne	.+2      	; 0x3994 <vfprintf+0x3a>
    3992:	53 c1       	rjmp	.+678    	; 0x3c3a <vfprintf+0x2e0>
    3994:	85 32       	cpi	r24, 0x25	; 37
    3996:	39 f4       	brne	.+14     	; 0x39a6 <vfprintf+0x4c>
    3998:	93 fd       	sbrc	r25, 3
    399a:	85 91       	lpm	r24, Z+
    399c:	93 ff       	sbrs	r25, 3
    399e:	81 91       	ld	r24, Z+
    39a0:	3f 01       	movw	r6, r30
    39a2:	85 32       	cpi	r24, 0x25	; 37
    39a4:	29 f4       	brne	.+10     	; 0x39b0 <vfprintf+0x56>
    39a6:	b7 01       	movw	r22, r14
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    39ae:	e7 cf       	rjmp	.-50     	; 0x397e <vfprintf+0x24>
    39b0:	91 2c       	mov	r9, r1
    39b2:	21 2c       	mov	r2, r1
    39b4:	31 2c       	mov	r3, r1
    39b6:	ff e1       	ldi	r31, 0x1F	; 31
    39b8:	f3 15       	cp	r31, r3
    39ba:	38 f0       	brcs	.+14     	; 0x39ca <vfprintf+0x70>
    39bc:	8b 32       	cpi	r24, 0x2B	; 43
    39be:	11 f1       	breq	.+68     	; 0x3a04 <vfprintf+0xaa>
    39c0:	90 f4       	brcc	.+36     	; 0x39e6 <vfprintf+0x8c>
    39c2:	80 32       	cpi	r24, 0x20	; 32
    39c4:	09 f1       	breq	.+66     	; 0x3a08 <vfprintf+0xae>
    39c6:	83 32       	cpi	r24, 0x23	; 35
    39c8:	29 f1       	breq	.+74     	; 0x3a14 <vfprintf+0xba>
    39ca:	37 fc       	sbrc	r3, 7
    39cc:	3c c0       	rjmp	.+120    	; 0x3a46 <vfprintf+0xec>
    39ce:	20 ed       	ldi	r18, 0xD0	; 208
    39d0:	28 0f       	add	r18, r24
    39d2:	2a 30       	cpi	r18, 0x0A	; 10
    39d4:	50 f5       	brcc	.+84     	; 0x3a2a <vfprintf+0xd0>
    39d6:	36 fe       	sbrs	r3, 6
    39d8:	20 c0       	rjmp	.+64     	; 0x3a1a <vfprintf+0xc0>
    39da:	8a e0       	ldi	r24, 0x0A	; 10
    39dc:	98 9e       	mul	r9, r24
    39de:	20 0d       	add	r18, r0
    39e0:	11 24       	eor	r1, r1
    39e2:	92 2e       	mov	r9, r18
    39e4:	06 c0       	rjmp	.+12     	; 0x39f2 <vfprintf+0x98>
    39e6:	8d 32       	cpi	r24, 0x2D	; 45
    39e8:	91 f0       	breq	.+36     	; 0x3a0e <vfprintf+0xb4>
    39ea:	80 33       	cpi	r24, 0x30	; 48
    39ec:	71 f7       	brne	.-36     	; 0x39ca <vfprintf+0x70>
    39ee:	68 94       	set
    39f0:	30 f8       	bld	r3, 0
    39f2:	f3 01       	movw	r30, r6
    39f4:	93 fd       	sbrc	r25, 3
    39f6:	85 91       	lpm	r24, Z+
    39f8:	93 ff       	sbrs	r25, 3
    39fa:	81 91       	ld	r24, Z+
    39fc:	3f 01       	movw	r6, r30
    39fe:	81 11       	cpse	r24, r1
    3a00:	da cf       	rjmp	.-76     	; 0x39b6 <vfprintf+0x5c>
    3a02:	21 c0       	rjmp	.+66     	; 0x3a46 <vfprintf+0xec>
    3a04:	68 94       	set
    3a06:	31 f8       	bld	r3, 1
    3a08:	68 94       	set
    3a0a:	32 f8       	bld	r3, 2
    3a0c:	f2 cf       	rjmp	.-28     	; 0x39f2 <vfprintf+0x98>
    3a0e:	68 94       	set
    3a10:	33 f8       	bld	r3, 3
    3a12:	ef cf       	rjmp	.-34     	; 0x39f2 <vfprintf+0x98>
    3a14:	68 94       	set
    3a16:	34 f8       	bld	r3, 4
    3a18:	ec cf       	rjmp	.-40     	; 0x39f2 <vfprintf+0x98>
    3a1a:	ea e0       	ldi	r30, 0x0A	; 10
    3a1c:	2e 9e       	mul	r2, r30
    3a1e:	20 0d       	add	r18, r0
    3a20:	11 24       	eor	r1, r1
    3a22:	22 2e       	mov	r2, r18
    3a24:	68 94       	set
    3a26:	35 f8       	bld	r3, 5
    3a28:	e4 cf       	rjmp	.-56     	; 0x39f2 <vfprintf+0x98>
    3a2a:	8e 32       	cpi	r24, 0x2E	; 46
    3a2c:	29 f4       	brne	.+10     	; 0x3a38 <vfprintf+0xde>
    3a2e:	36 fc       	sbrc	r3, 6
    3a30:	04 c1       	rjmp	.+520    	; 0x3c3a <vfprintf+0x2e0>
    3a32:	68 94       	set
    3a34:	36 f8       	bld	r3, 6
    3a36:	dd cf       	rjmp	.-70     	; 0x39f2 <vfprintf+0x98>
    3a38:	8c 36       	cpi	r24, 0x6C	; 108
    3a3a:	19 f4       	brne	.+6      	; 0x3a42 <vfprintf+0xe8>
    3a3c:	68 94       	set
    3a3e:	37 f8       	bld	r3, 7
    3a40:	d8 cf       	rjmp	.-80     	; 0x39f2 <vfprintf+0x98>
    3a42:	88 36       	cpi	r24, 0x68	; 104
    3a44:	b1 f2       	breq	.-84     	; 0x39f2 <vfprintf+0x98>
    3a46:	98 2f       	mov	r25, r24
    3a48:	9f 7d       	andi	r25, 0xDF	; 223
    3a4a:	95 54       	subi	r25, 0x45	; 69
    3a4c:	93 30       	cpi	r25, 0x03	; 3
    3a4e:	e0 f0       	brcs	.+56     	; 0x3a88 <vfprintf+0x12e>
    3a50:	83 36       	cpi	r24, 0x63	; 99
    3a52:	a1 f1       	breq	.+104    	; 0x3abc <vfprintf+0x162>
    3a54:	83 37       	cpi	r24, 0x73	; 115
    3a56:	c1 f1       	breq	.+112    	; 0x3ac8 <vfprintf+0x16e>
    3a58:	83 35       	cpi	r24, 0x53	; 83
    3a5a:	09 f0       	breq	.+2      	; 0x3a5e <vfprintf+0x104>
    3a5c:	63 c0       	rjmp	.+198    	; 0x3b24 <vfprintf+0x1ca>
    3a5e:	28 01       	movw	r4, r16
    3a60:	f2 e0       	ldi	r31, 0x02	; 2
    3a62:	4f 0e       	add	r4, r31
    3a64:	51 1c       	adc	r5, r1
    3a66:	f8 01       	movw	r30, r16
    3a68:	c0 80       	ld	r12, Z
    3a6a:	d1 80       	ldd	r13, Z+1	; 0x01
    3a6c:	69 2d       	mov	r22, r9
    3a6e:	70 e0       	ldi	r23, 0x00	; 0
    3a70:	36 fc       	sbrc	r3, 6
    3a72:	02 c0       	rjmp	.+4      	; 0x3a78 <vfprintf+0x11e>
    3a74:	6f ef       	ldi	r22, 0xFF	; 255
    3a76:	7f ef       	ldi	r23, 0xFF	; 255
    3a78:	c6 01       	movw	r24, r12
    3a7a:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <strnlen_P>
    3a7e:	4c 01       	movw	r8, r24
    3a80:	68 94       	set
    3a82:	37 f8       	bld	r3, 7
    3a84:	82 01       	movw	r16, r4
    3a86:	0a c0       	rjmp	.+20     	; 0x3a9c <vfprintf+0x142>
    3a88:	0c 5f       	subi	r16, 0xFC	; 252
    3a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8c:	ff e3       	ldi	r31, 0x3F	; 63
    3a8e:	f9 83       	std	Y+1, r31	; 0x01
    3a90:	88 24       	eor	r8, r8
    3a92:	83 94       	inc	r8
    3a94:	91 2c       	mov	r9, r1
    3a96:	65 01       	movw	r12, r10
    3a98:	e8 94       	clt
    3a9a:	37 f8       	bld	r3, 7
    3a9c:	33 fe       	sbrs	r3, 3
    3a9e:	2d c0       	rjmp	.+90     	; 0x3afa <vfprintf+0x1a0>
    3aa0:	52 2c       	mov	r5, r2
    3aa2:	81 14       	cp	r8, r1
    3aa4:	91 04       	cpc	r9, r1
    3aa6:	71 f5       	brne	.+92     	; 0x3b04 <vfprintf+0x1aa>
    3aa8:	55 20       	and	r5, r5
    3aaa:	09 f4       	brne	.+2      	; 0x3aae <vfprintf+0x154>
    3aac:	68 cf       	rjmp	.-304    	; 0x397e <vfprintf+0x24>
    3aae:	b7 01       	movw	r22, r14
    3ab0:	80 e2       	ldi	r24, 0x20	; 32
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3ab8:	5a 94       	dec	r5
    3aba:	f6 cf       	rjmp	.-20     	; 0x3aa8 <vfprintf+0x14e>
    3abc:	f8 01       	movw	r30, r16
    3abe:	80 81       	ld	r24, Z
    3ac0:	89 83       	std	Y+1, r24	; 0x01
    3ac2:	0e 5f       	subi	r16, 0xFE	; 254
    3ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac6:	e4 cf       	rjmp	.-56     	; 0x3a90 <vfprintf+0x136>
    3ac8:	28 01       	movw	r4, r16
    3aca:	f2 e0       	ldi	r31, 0x02	; 2
    3acc:	4f 0e       	add	r4, r31
    3ace:	51 1c       	adc	r5, r1
    3ad0:	f8 01       	movw	r30, r16
    3ad2:	c0 80       	ld	r12, Z
    3ad4:	d1 80       	ldd	r13, Z+1	; 0x01
    3ad6:	69 2d       	mov	r22, r9
    3ad8:	70 e0       	ldi	r23, 0x00	; 0
    3ada:	36 fc       	sbrc	r3, 6
    3adc:	02 c0       	rjmp	.+4      	; 0x3ae2 <vfprintf+0x188>
    3ade:	6f ef       	ldi	r22, 0xFF	; 255
    3ae0:	7f ef       	ldi	r23, 0xFF	; 255
    3ae2:	c6 01       	movw	r24, r12
    3ae4:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <strnlen>
    3ae8:	4c 01       	movw	r8, r24
    3aea:	82 01       	movw	r16, r4
    3aec:	d5 cf       	rjmp	.-86     	; 0x3a98 <vfprintf+0x13e>
    3aee:	b7 01       	movw	r22, r14
    3af0:	80 e2       	ldi	r24, 0x20	; 32
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3af8:	2a 94       	dec	r2
    3afa:	28 14       	cp	r2, r8
    3afc:	19 04       	cpc	r1, r9
    3afe:	09 f0       	breq	.+2      	; 0x3b02 <vfprintf+0x1a8>
    3b00:	b0 f7       	brcc	.-20     	; 0x3aee <vfprintf+0x194>
    3b02:	ce cf       	rjmp	.-100    	; 0x3aa0 <vfprintf+0x146>
    3b04:	f6 01       	movw	r30, r12
    3b06:	37 fc       	sbrc	r3, 7
    3b08:	85 91       	lpm	r24, Z+
    3b0a:	37 fe       	sbrs	r3, 7
    3b0c:	81 91       	ld	r24, Z+
    3b0e:	6f 01       	movw	r12, r30
    3b10:	b7 01       	movw	r22, r14
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3b18:	51 10       	cpse	r5, r1
    3b1a:	5a 94       	dec	r5
    3b1c:	f1 e0       	ldi	r31, 0x01	; 1
    3b1e:	8f 1a       	sub	r8, r31
    3b20:	91 08       	sbc	r9, r1
    3b22:	bf cf       	rjmp	.-130    	; 0x3aa2 <vfprintf+0x148>
    3b24:	84 36       	cpi	r24, 0x64	; 100
    3b26:	19 f0       	breq	.+6      	; 0x3b2e <vfprintf+0x1d4>
    3b28:	89 36       	cpi	r24, 0x69	; 105
    3b2a:	09 f0       	breq	.+2      	; 0x3b2e <vfprintf+0x1d4>
    3b2c:	77 c0       	rjmp	.+238    	; 0x3c1c <vfprintf+0x2c2>
    3b2e:	f8 01       	movw	r30, r16
    3b30:	37 fe       	sbrs	r3, 7
    3b32:	6b c0       	rjmp	.+214    	; 0x3c0a <vfprintf+0x2b0>
    3b34:	60 81       	ld	r22, Z
    3b36:	71 81       	ldd	r23, Z+1	; 0x01
    3b38:	82 81       	ldd	r24, Z+2	; 0x02
    3b3a:	93 81       	ldd	r25, Z+3	; 0x03
    3b3c:	0c 5f       	subi	r16, 0xFC	; 252
    3b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b40:	f3 2d       	mov	r31, r3
    3b42:	ff 76       	andi	r31, 0x6F	; 111
    3b44:	3f 2e       	mov	r3, r31
    3b46:	97 ff       	sbrs	r25, 7
    3b48:	09 c0       	rjmp	.+18     	; 0x3b5c <vfprintf+0x202>
    3b4a:	90 95       	com	r25
    3b4c:	80 95       	com	r24
    3b4e:	70 95       	com	r23
    3b50:	61 95       	neg	r22
    3b52:	7f 4f       	sbci	r23, 0xFF	; 255
    3b54:	8f 4f       	sbci	r24, 0xFF	; 255
    3b56:	9f 4f       	sbci	r25, 0xFF	; 255
    3b58:	68 94       	set
    3b5a:	37 f8       	bld	r3, 7
    3b5c:	2a e0       	ldi	r18, 0x0A	; 10
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	a5 01       	movw	r20, r10
    3b62:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__ultoa_invert>
    3b66:	c8 2e       	mov	r12, r24
    3b68:	ca 18       	sub	r12, r10
    3b6a:	8c 2c       	mov	r8, r12
    3b6c:	43 2c       	mov	r4, r3
    3b6e:	36 fe       	sbrs	r3, 6
    3b70:	0c c0       	rjmp	.+24     	; 0x3b8a <vfprintf+0x230>
    3b72:	e8 94       	clt
    3b74:	40 f8       	bld	r4, 0
    3b76:	c9 14       	cp	r12, r9
    3b78:	40 f4       	brcc	.+16     	; 0x3b8a <vfprintf+0x230>
    3b7a:	34 fe       	sbrs	r3, 4
    3b7c:	05 c0       	rjmp	.+10     	; 0x3b88 <vfprintf+0x22e>
    3b7e:	32 fc       	sbrc	r3, 2
    3b80:	03 c0       	rjmp	.+6      	; 0x3b88 <vfprintf+0x22e>
    3b82:	f3 2d       	mov	r31, r3
    3b84:	fe 7e       	andi	r31, 0xEE	; 238
    3b86:	4f 2e       	mov	r4, r31
    3b88:	89 2c       	mov	r8, r9
    3b8a:	44 fe       	sbrs	r4, 4
    3b8c:	95 c0       	rjmp	.+298    	; 0x3cb8 <vfprintf+0x35e>
    3b8e:	fe 01       	movw	r30, r28
    3b90:	ec 0d       	add	r30, r12
    3b92:	f1 1d       	adc	r31, r1
    3b94:	80 81       	ld	r24, Z
    3b96:	80 33       	cpi	r24, 0x30	; 48
    3b98:	09 f0       	breq	.+2      	; 0x3b9c <vfprintf+0x242>
    3b9a:	87 c0       	rjmp	.+270    	; 0x3caa <vfprintf+0x350>
    3b9c:	24 2d       	mov	r18, r4
    3b9e:	29 7e       	andi	r18, 0xE9	; 233
    3ba0:	42 2e       	mov	r4, r18
    3ba2:	84 2d       	mov	r24, r4
    3ba4:	88 70       	andi	r24, 0x08	; 8
    3ba6:	58 2e       	mov	r5, r24
    3ba8:	43 fc       	sbrc	r4, 3
    3baa:	95 c0       	rjmp	.+298    	; 0x3cd6 <vfprintf+0x37c>
    3bac:	40 fe       	sbrs	r4, 0
    3bae:	8f c0       	rjmp	.+286    	; 0x3cce <vfprintf+0x374>
    3bb0:	9c 2c       	mov	r9, r12
    3bb2:	82 14       	cp	r8, r2
    3bb4:	18 f4       	brcc	.+6      	; 0x3bbc <vfprintf+0x262>
    3bb6:	2c 0c       	add	r2, r12
    3bb8:	92 2c       	mov	r9, r2
    3bba:	98 18       	sub	r9, r8
    3bbc:	44 fe       	sbrs	r4, 4
    3bbe:	91 c0       	rjmp	.+290    	; 0x3ce2 <vfprintf+0x388>
    3bc0:	b7 01       	movw	r22, r14
    3bc2:	80 e3       	ldi	r24, 0x30	; 48
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3bca:	42 fe       	sbrs	r4, 2
    3bcc:	09 c0       	rjmp	.+18     	; 0x3be0 <vfprintf+0x286>
    3bce:	88 e7       	ldi	r24, 0x78	; 120
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	41 fe       	sbrs	r4, 1
    3bd4:	02 c0       	rjmp	.+4      	; 0x3bda <vfprintf+0x280>
    3bd6:	88 e5       	ldi	r24, 0x58	; 88
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	b7 01       	movw	r22, r14
    3bdc:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3be0:	c9 14       	cp	r12, r9
    3be2:	08 f4       	brcc	.+2      	; 0x3be6 <vfprintf+0x28c>
    3be4:	8a c0       	rjmp	.+276    	; 0x3cfa <vfprintf+0x3a0>
    3be6:	ca 94       	dec	r12
    3be8:	d1 2c       	mov	r13, r1
    3bea:	9f ef       	ldi	r25, 0xFF	; 255
    3bec:	c9 1a       	sub	r12, r25
    3bee:	d9 0a       	sbc	r13, r25
    3bf0:	ca 0c       	add	r12, r10
    3bf2:	db 1c       	adc	r13, r11
    3bf4:	f6 01       	movw	r30, r12
    3bf6:	82 91       	ld	r24, -Z
    3bf8:	6f 01       	movw	r12, r30
    3bfa:	b7 01       	movw	r22, r14
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3c02:	ac 14       	cp	r10, r12
    3c04:	bd 04       	cpc	r11, r13
    3c06:	b1 f7       	brne	.-20     	; 0x3bf4 <vfprintf+0x29a>
    3c08:	4f cf       	rjmp	.-354    	; 0x3aa8 <vfprintf+0x14e>
    3c0a:	60 81       	ld	r22, Z
    3c0c:	71 81       	ldd	r23, Z+1	; 0x01
    3c0e:	07 2e       	mov	r0, r23
    3c10:	00 0c       	add	r0, r0
    3c12:	88 0b       	sbc	r24, r24
    3c14:	99 0b       	sbc	r25, r25
    3c16:	0e 5f       	subi	r16, 0xFE	; 254
    3c18:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1a:	92 cf       	rjmp	.-220    	; 0x3b40 <vfprintf+0x1e6>
    3c1c:	d3 2c       	mov	r13, r3
    3c1e:	e8 94       	clt
    3c20:	d4 f8       	bld	r13, 4
    3c22:	2a e0       	ldi	r18, 0x0A	; 10
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	85 37       	cpi	r24, 0x75	; 117
    3c28:	39 f1       	breq	.+78     	; 0x3c78 <vfprintf+0x31e>
    3c2a:	23 2d       	mov	r18, r3
    3c2c:	29 7f       	andi	r18, 0xF9	; 249
    3c2e:	d2 2e       	mov	r13, r18
    3c30:	8f 36       	cpi	r24, 0x6F	; 111
    3c32:	01 f1       	breq	.+64     	; 0x3c74 <vfprintf+0x31a>
    3c34:	48 f4       	brcc	.+18     	; 0x3c48 <vfprintf+0x2ee>
    3c36:	88 35       	cpi	r24, 0x58	; 88
    3c38:	a9 f0       	breq	.+42     	; 0x3c64 <vfprintf+0x30a>
    3c3a:	f7 01       	movw	r30, r14
    3c3c:	86 81       	ldd	r24, Z+6	; 0x06
    3c3e:	97 81       	ldd	r25, Z+7	; 0x07
    3c40:	2b 96       	adiw	r28, 0x0b	; 11
    3c42:	e2 e1       	ldi	r30, 0x12	; 18
    3c44:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__epilogue_restores__>
    3c48:	80 37       	cpi	r24, 0x70	; 112
    3c4a:	49 f0       	breq	.+18     	; 0x3c5e <vfprintf+0x304>
    3c4c:	88 37       	cpi	r24, 0x78	; 120
    3c4e:	a9 f7       	brne	.-22     	; 0x3c3a <vfprintf+0x2e0>
    3c50:	d4 fe       	sbrs	r13, 4
    3c52:	02 c0       	rjmp	.+4      	; 0x3c58 <vfprintf+0x2fe>
    3c54:	68 94       	set
    3c56:	d2 f8       	bld	r13, 2
    3c58:	20 e1       	ldi	r18, 0x10	; 16
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	0d c0       	rjmp	.+26     	; 0x3c78 <vfprintf+0x31e>
    3c5e:	68 94       	set
    3c60:	d4 f8       	bld	r13, 4
    3c62:	f6 cf       	rjmp	.-20     	; 0x3c50 <vfprintf+0x2f6>
    3c64:	34 fe       	sbrs	r3, 4
    3c66:	03 c0       	rjmp	.+6      	; 0x3c6e <vfprintf+0x314>
    3c68:	82 2f       	mov	r24, r18
    3c6a:	86 60       	ori	r24, 0x06	; 6
    3c6c:	d8 2e       	mov	r13, r24
    3c6e:	20 e1       	ldi	r18, 0x10	; 16
    3c70:	32 e0       	ldi	r19, 0x02	; 2
    3c72:	02 c0       	rjmp	.+4      	; 0x3c78 <vfprintf+0x31e>
    3c74:	28 e0       	ldi	r18, 0x08	; 8
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	f8 01       	movw	r30, r16
    3c7a:	d7 fe       	sbrs	r13, 7
    3c7c:	0f c0       	rjmp	.+30     	; 0x3c9c <vfprintf+0x342>
    3c7e:	60 81       	ld	r22, Z
    3c80:	71 81       	ldd	r23, Z+1	; 0x01
    3c82:	82 81       	ldd	r24, Z+2	; 0x02
    3c84:	93 81       	ldd	r25, Z+3	; 0x03
    3c86:	0c 5f       	subi	r16, 0xFC	; 252
    3c88:	1f 4f       	sbci	r17, 0xFF	; 255
    3c8a:	a5 01       	movw	r20, r10
    3c8c:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__ultoa_invert>
    3c90:	c8 2e       	mov	r12, r24
    3c92:	ca 18       	sub	r12, r10
    3c94:	3d 2c       	mov	r3, r13
    3c96:	e8 94       	clt
    3c98:	37 f8       	bld	r3, 7
    3c9a:	67 cf       	rjmp	.-306    	; 0x3b6a <vfprintf+0x210>
    3c9c:	60 81       	ld	r22, Z
    3c9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	0e 5f       	subi	r16, 0xFE	; 254
    3ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca8:	f0 cf       	rjmp	.-32     	; 0x3c8a <vfprintf+0x330>
    3caa:	42 fc       	sbrc	r4, 2
    3cac:	02 c0       	rjmp	.+4      	; 0x3cb2 <vfprintf+0x358>
    3cae:	83 94       	inc	r8
    3cb0:	78 cf       	rjmp	.-272    	; 0x3ba2 <vfprintf+0x248>
    3cb2:	83 94       	inc	r8
    3cb4:	83 94       	inc	r8
    3cb6:	75 cf       	rjmp	.-278    	; 0x3ba2 <vfprintf+0x248>
    3cb8:	84 2d       	mov	r24, r4
    3cba:	86 78       	andi	r24, 0x86	; 134
    3cbc:	09 f4       	brne	.+2      	; 0x3cc0 <vfprintf+0x366>
    3cbe:	71 cf       	rjmp	.-286    	; 0x3ba2 <vfprintf+0x248>
    3cc0:	f6 cf       	rjmp	.-20     	; 0x3cae <vfprintf+0x354>
    3cc2:	b7 01       	movw	r22, r14
    3cc4:	80 e2       	ldi	r24, 0x20	; 32
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3ccc:	83 94       	inc	r8
    3cce:	82 14       	cp	r8, r2
    3cd0:	c0 f3       	brcs	.-16     	; 0x3cc2 <vfprintf+0x368>
    3cd2:	51 2c       	mov	r5, r1
    3cd4:	73 cf       	rjmp	.-282    	; 0x3bbc <vfprintf+0x262>
    3cd6:	52 2c       	mov	r5, r2
    3cd8:	58 18       	sub	r5, r8
    3cda:	82 14       	cp	r8, r2
    3cdc:	08 f4       	brcc	.+2      	; 0x3ce0 <vfprintf+0x386>
    3cde:	6e cf       	rjmp	.-292    	; 0x3bbc <vfprintf+0x262>
    3ce0:	f8 cf       	rjmp	.-16     	; 0x3cd2 <vfprintf+0x378>
    3ce2:	84 2d       	mov	r24, r4
    3ce4:	86 78       	andi	r24, 0x86	; 134
    3ce6:	09 f4       	brne	.+2      	; 0x3cea <vfprintf+0x390>
    3ce8:	7b cf       	rjmp	.-266    	; 0x3be0 <vfprintf+0x286>
    3cea:	8b e2       	ldi	r24, 0x2B	; 43
    3cec:	41 fe       	sbrs	r4, 1
    3cee:	80 e2       	ldi	r24, 0x20	; 32
    3cf0:	47 fc       	sbrc	r4, 7
    3cf2:	8d e2       	ldi	r24, 0x2D	; 45
    3cf4:	b7 01       	movw	r22, r14
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	71 cf       	rjmp	.-286    	; 0x3bdc <vfprintf+0x282>
    3cfa:	b7 01       	movw	r22, r14
    3cfc:	80 e3       	ldi	r24, 0x30	; 48
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3d04:	9a 94       	dec	r9
    3d06:	6c cf       	rjmp	.-296    	; 0x3be0 <vfprintf+0x286>
    3d08:	8f ef       	ldi	r24, 0xFF	; 255
    3d0a:	9f ef       	ldi	r25, 0xFF	; 255
    3d0c:	99 cf       	rjmp	.-206    	; 0x3c40 <vfprintf+0x2e6>

00003d0e <strnlen_P>:
    3d0e:	fc 01       	movw	r30, r24
    3d10:	05 90       	lpm	r0, Z+
    3d12:	61 50       	subi	r22, 0x01	; 1
    3d14:	70 40       	sbci	r23, 0x00	; 0
    3d16:	01 10       	cpse	r0, r1
    3d18:	d8 f7       	brcc	.-10     	; 0x3d10 <strnlen_P+0x2>
    3d1a:	80 95       	com	r24
    3d1c:	90 95       	com	r25
    3d1e:	8e 0f       	add	r24, r30
    3d20:	9f 1f       	adc	r25, r31
    3d22:	08 95       	ret

00003d24 <strnlen>:
    3d24:	fc 01       	movw	r30, r24
    3d26:	61 50       	subi	r22, 0x01	; 1
    3d28:	70 40       	sbci	r23, 0x00	; 0
    3d2a:	01 90       	ld	r0, Z+
    3d2c:	01 10       	cpse	r0, r1
    3d2e:	d8 f7       	brcc	.-10     	; 0x3d26 <strnlen+0x2>
    3d30:	80 95       	com	r24
    3d32:	90 95       	com	r25
    3d34:	8e 0f       	add	r24, r30
    3d36:	9f 1f       	adc	r25, r31
    3d38:	08 95       	ret

00003d3a <fputc>:
    3d3a:	0f 93       	push	r16
    3d3c:	1f 93       	push	r17
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
    3d42:	18 2f       	mov	r17, r24
    3d44:	09 2f       	mov	r16, r25
    3d46:	eb 01       	movw	r28, r22
    3d48:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4a:	81 fd       	sbrc	r24, 1
    3d4c:	09 c0       	rjmp	.+18     	; 0x3d60 <fputc+0x26>
    3d4e:	1f ef       	ldi	r17, 0xFF	; 255
    3d50:	0f ef       	ldi	r16, 0xFF	; 255
    3d52:	81 2f       	mov	r24, r17
    3d54:	90 2f       	mov	r25, r16
    3d56:	df 91       	pop	r29
    3d58:	cf 91       	pop	r28
    3d5a:	1f 91       	pop	r17
    3d5c:	0f 91       	pop	r16
    3d5e:	08 95       	ret
    3d60:	82 ff       	sbrs	r24, 2
    3d62:	14 c0       	rjmp	.+40     	; 0x3d8c <fputc+0x52>
    3d64:	2e 81       	ldd	r18, Y+6	; 0x06
    3d66:	3f 81       	ldd	r19, Y+7	; 0x07
    3d68:	8c 81       	ldd	r24, Y+4	; 0x04
    3d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d6c:	28 17       	cp	r18, r24
    3d6e:	39 07       	cpc	r19, r25
    3d70:	3c f4       	brge	.+14     	; 0x3d80 <fputc+0x46>
    3d72:	e8 81       	ld	r30, Y
    3d74:	f9 81       	ldd	r31, Y+1	; 0x01
    3d76:	cf 01       	movw	r24, r30
    3d78:	01 96       	adiw	r24, 0x01	; 1
    3d7a:	99 83       	std	Y+1, r25	; 0x01
    3d7c:	88 83       	st	Y, r24
    3d7e:	10 83       	st	Z, r17
    3d80:	8e 81       	ldd	r24, Y+6	; 0x06
    3d82:	9f 81       	ldd	r25, Y+7	; 0x07
    3d84:	01 96       	adiw	r24, 0x01	; 1
    3d86:	9f 83       	std	Y+7, r25	; 0x07
    3d88:	8e 83       	std	Y+6, r24	; 0x06
    3d8a:	e3 cf       	rjmp	.-58     	; 0x3d52 <fputc+0x18>
    3d8c:	e8 85       	ldd	r30, Y+8	; 0x08
    3d8e:	f9 85       	ldd	r31, Y+9	; 0x09
    3d90:	81 2f       	mov	r24, r17
    3d92:	09 95       	icall
    3d94:	89 2b       	or	r24, r25
    3d96:	a1 f3       	breq	.-24     	; 0x3d80 <fputc+0x46>
    3d98:	da cf       	rjmp	.-76     	; 0x3d4e <fputc+0x14>

00003d9a <__ultoa_invert>:
    3d9a:	fa 01       	movw	r30, r20
    3d9c:	aa 27       	eor	r26, r26
    3d9e:	28 30       	cpi	r18, 0x08	; 8
    3da0:	51 f1       	breq	.+84     	; 0x3df6 <__ultoa_invert+0x5c>
    3da2:	20 31       	cpi	r18, 0x10	; 16
    3da4:	81 f1       	breq	.+96     	; 0x3e06 <__ultoa_invert+0x6c>
    3da6:	e8 94       	clt
    3da8:	6f 93       	push	r22
    3daa:	6e 7f       	andi	r22, 0xFE	; 254
    3dac:	6e 5f       	subi	r22, 0xFE	; 254
    3dae:	7f 4f       	sbci	r23, 0xFF	; 255
    3db0:	8f 4f       	sbci	r24, 0xFF	; 255
    3db2:	9f 4f       	sbci	r25, 0xFF	; 255
    3db4:	af 4f       	sbci	r26, 0xFF	; 255
    3db6:	b1 e0       	ldi	r27, 0x01	; 1
    3db8:	3e d0       	rcall	.+124    	; 0x3e36 <__ultoa_invert+0x9c>
    3dba:	b4 e0       	ldi	r27, 0x04	; 4
    3dbc:	3c d0       	rcall	.+120    	; 0x3e36 <__ultoa_invert+0x9c>
    3dbe:	67 0f       	add	r22, r23
    3dc0:	78 1f       	adc	r23, r24
    3dc2:	89 1f       	adc	r24, r25
    3dc4:	9a 1f       	adc	r25, r26
    3dc6:	a1 1d       	adc	r26, r1
    3dc8:	68 0f       	add	r22, r24
    3dca:	79 1f       	adc	r23, r25
    3dcc:	8a 1f       	adc	r24, r26
    3dce:	91 1d       	adc	r25, r1
    3dd0:	a1 1d       	adc	r26, r1
    3dd2:	6a 0f       	add	r22, r26
    3dd4:	71 1d       	adc	r23, r1
    3dd6:	81 1d       	adc	r24, r1
    3dd8:	91 1d       	adc	r25, r1
    3dda:	a1 1d       	adc	r26, r1
    3ddc:	20 d0       	rcall	.+64     	; 0x3e1e <__ultoa_invert+0x84>
    3dde:	09 f4       	brne	.+2      	; 0x3de2 <__ultoa_invert+0x48>
    3de0:	68 94       	set
    3de2:	3f 91       	pop	r19
    3de4:	2a e0       	ldi	r18, 0x0A	; 10
    3de6:	26 9f       	mul	r18, r22
    3de8:	11 24       	eor	r1, r1
    3dea:	30 19       	sub	r19, r0
    3dec:	30 5d       	subi	r19, 0xD0	; 208
    3dee:	31 93       	st	Z+, r19
    3df0:	de f6       	brtc	.-74     	; 0x3da8 <__ultoa_invert+0xe>
    3df2:	cf 01       	movw	r24, r30
    3df4:	08 95       	ret
    3df6:	46 2f       	mov	r20, r22
    3df8:	47 70       	andi	r20, 0x07	; 7
    3dfa:	40 5d       	subi	r20, 0xD0	; 208
    3dfc:	41 93       	st	Z+, r20
    3dfe:	b3 e0       	ldi	r27, 0x03	; 3
    3e00:	0f d0       	rcall	.+30     	; 0x3e20 <__ultoa_invert+0x86>
    3e02:	c9 f7       	brne	.-14     	; 0x3df6 <__ultoa_invert+0x5c>
    3e04:	f6 cf       	rjmp	.-20     	; 0x3df2 <__ultoa_invert+0x58>
    3e06:	46 2f       	mov	r20, r22
    3e08:	4f 70       	andi	r20, 0x0F	; 15
    3e0a:	40 5d       	subi	r20, 0xD0	; 208
    3e0c:	4a 33       	cpi	r20, 0x3A	; 58
    3e0e:	18 f0       	brcs	.+6      	; 0x3e16 <__ultoa_invert+0x7c>
    3e10:	49 5d       	subi	r20, 0xD9	; 217
    3e12:	31 fd       	sbrc	r19, 1
    3e14:	40 52       	subi	r20, 0x20	; 32
    3e16:	41 93       	st	Z+, r20
    3e18:	02 d0       	rcall	.+4      	; 0x3e1e <__ultoa_invert+0x84>
    3e1a:	a9 f7       	brne	.-22     	; 0x3e06 <__ultoa_invert+0x6c>
    3e1c:	ea cf       	rjmp	.-44     	; 0x3df2 <__ultoa_invert+0x58>
    3e1e:	b4 e0       	ldi	r27, 0x04	; 4
    3e20:	a6 95       	lsr	r26
    3e22:	97 95       	ror	r25
    3e24:	87 95       	ror	r24
    3e26:	77 95       	ror	r23
    3e28:	67 95       	ror	r22
    3e2a:	ba 95       	dec	r27
    3e2c:	c9 f7       	brne	.-14     	; 0x3e20 <__ultoa_invert+0x86>
    3e2e:	00 97       	sbiw	r24, 0x00	; 0
    3e30:	61 05       	cpc	r22, r1
    3e32:	71 05       	cpc	r23, r1
    3e34:	08 95       	ret
    3e36:	9b 01       	movw	r18, r22
    3e38:	ac 01       	movw	r20, r24
    3e3a:	0a 2e       	mov	r0, r26
    3e3c:	06 94       	lsr	r0
    3e3e:	57 95       	ror	r21
    3e40:	47 95       	ror	r20
    3e42:	37 95       	ror	r19
    3e44:	27 95       	ror	r18
    3e46:	ba 95       	dec	r27
    3e48:	c9 f7       	brne	.-14     	; 0x3e3c <__ultoa_invert+0xa2>
    3e4a:	62 0f       	add	r22, r18
    3e4c:	73 1f       	adc	r23, r19
    3e4e:	84 1f       	adc	r24, r20
    3e50:	95 1f       	adc	r25, r21
    3e52:	a0 1d       	adc	r26, r0
    3e54:	08 95       	ret

00003e56 <__prologue_saves__>:
    3e56:	2f 92       	push	r2
    3e58:	3f 92       	push	r3
    3e5a:	4f 92       	push	r4
    3e5c:	5f 92       	push	r5
    3e5e:	6f 92       	push	r6
    3e60:	7f 92       	push	r7
    3e62:	8f 92       	push	r8
    3e64:	9f 92       	push	r9
    3e66:	af 92       	push	r10
    3e68:	bf 92       	push	r11
    3e6a:	cf 92       	push	r12
    3e6c:	df 92       	push	r13
    3e6e:	ef 92       	push	r14
    3e70:	ff 92       	push	r15
    3e72:	0f 93       	push	r16
    3e74:	1f 93       	push	r17
    3e76:	cf 93       	push	r28
    3e78:	df 93       	push	r29
    3e7a:	cd b7       	in	r28, 0x3d	; 61
    3e7c:	de b7       	in	r29, 0x3e	; 62
    3e7e:	ca 1b       	sub	r28, r26
    3e80:	db 0b       	sbc	r29, r27
    3e82:	0f b6       	in	r0, 0x3f	; 63
    3e84:	f8 94       	cli
    3e86:	de bf       	out	0x3e, r29	; 62
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	cd bf       	out	0x3d, r28	; 61
    3e8c:	09 94       	ijmp

00003e8e <__epilogue_restores__>:
    3e8e:	2a 88       	ldd	r2, Y+18	; 0x12
    3e90:	39 88       	ldd	r3, Y+17	; 0x11
    3e92:	48 88       	ldd	r4, Y+16	; 0x10
    3e94:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e96:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e98:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ea0:	b9 84       	ldd	r11, Y+9	; 0x09
    3ea2:	c8 84       	ldd	r12, Y+8	; 0x08
    3ea4:	df 80       	ldd	r13, Y+7	; 0x07
    3ea6:	ee 80       	ldd	r14, Y+6	; 0x06
    3ea8:	fd 80       	ldd	r15, Y+5	; 0x05
    3eaa:	0c 81       	ldd	r16, Y+4	; 0x04
    3eac:	1b 81       	ldd	r17, Y+3	; 0x03
    3eae:	aa 81       	ldd	r26, Y+2	; 0x02
    3eb0:	b9 81       	ldd	r27, Y+1	; 0x01
    3eb2:	ce 0f       	add	r28, r30
    3eb4:	d1 1d       	adc	r29, r1
    3eb6:	0f b6       	in	r0, 0x3f	; 63
    3eb8:	f8 94       	cli
    3eba:	de bf       	out	0x3e, r29	; 62
    3ebc:	0f be       	out	0x3f, r0	; 63
    3ebe:	cd bf       	out	0x3d, r28	; 61
    3ec0:	ed 01       	movw	r28, r26
    3ec2:	08 95       	ret

00003ec4 <_exit>:
    3ec4:	f8 94       	cli

00003ec6 <__stop_program>:
    3ec6:	ff cf       	rjmp	.-2      	; 0x3ec6 <__stop_program>
