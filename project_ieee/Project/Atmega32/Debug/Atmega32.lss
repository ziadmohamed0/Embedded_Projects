
Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000031ae  00003242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080009c  0080009c  0000327e  2**0
                  ALLOC
  3 .stab         00007440  00000000  00000000  00003280  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000455f  00000000  00000000  0000a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000ec1f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000ec30  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  0000ec6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  0000f19a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000f681  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  0000f69b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <main>
      8a:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_vidInit>:
 *      Author: s
 */

#include "USART_init.h"

void UART_vidInit(){
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	 UBRRL = baud_rate_select ;                   /* Set baud rate */
      9a:	89 e2       	ldi	r24, 0x29	; 41
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	23 e3       	ldi	r18, 0x33	; 51
      a0:	fc 01       	movw	r30, r24
      a2:	20 83       	st	Z, r18

  #if    (Mode_Select == Synchronous_Operation)
         SET_BIT(UCSRC,UMSEL);
  #elif  (Mode_Select == Asynchronous_Operation)
         CLR_BIT(UCSRC,UMSEL);
      a4:	80 e4       	ldi	r24, 0x40	; 64
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	20 e4       	ldi	r18, 0x40	; 64
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	f9 01       	movw	r30, r18
      ae:	20 81       	ld	r18, Z
      b0:	2f 7b       	andi	r18, 0xBF	; 191
      b2:	fc 01       	movw	r30, r24
      b4:	20 83       	st	Z, r18
		  SET_BIT(UCSRC,UPM0);
   #endif
   #if   (Stop_Bit_Select==_2_bit)
         SET_BIT(UCSRC,USBS);
  #elif  (Stop_Bit_Select==_1_bit)
         CLR_BIT(UCSRC,USBS);
      b6:	80 e4       	ldi	r24, 0x40	; 64
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	20 e4       	ldi	r18, 0x40	; 64
      bc:	30 e0       	ldi	r19, 0x00	; 0
      be:	f9 01       	movw	r30, r18
      c0:	20 81       	ld	r18, Z
      c2:	27 7f       	andi	r18, 0xF7	; 247
      c4:	fc 01       	movw	r30, r24
      c6:	20 83       	st	Z, r18
  #elif 	(Data_bits==_7_bit)
      CLR_BIT(UCSRC,UCSZ0);
     SET_BIT(UCSRC,UCSZ1);
     CLR_BIT(UCSRC,UCSZ2);
	 #elif 	(Data_bits==_8_bit)
	 SET_BIT(UCSRC,UCSZ0);
      c8:	80 e4       	ldi	r24, 0x40	; 64
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	20 e4       	ldi	r18, 0x40	; 64
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	f9 01       	movw	r30, r18
      d2:	20 81       	ld	r18, Z
      d4:	22 60       	ori	r18, 0x02	; 2
      d6:	fc 01       	movw	r30, r24
      d8:	20 83       	st	Z, r18
	 SET_BIT(UCSRC,UCSZ1);
      da:	80 e4       	ldi	r24, 0x40	; 64
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	20 e4       	ldi	r18, 0x40	; 64
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	f9 01       	movw	r30, r18
      e4:	20 81       	ld	r18, Z
      e6:	24 60       	ori	r18, 0x04	; 4
      e8:	fc 01       	movw	r30, r24
      ea:	20 83       	st	Z, r18
	 CLR_BIT(UCSRC,UCSZ2);
      ec:	80 e4       	ldi	r24, 0x40	; 64
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	20 e4       	ldi	r18, 0x40	; 64
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	2b 7f       	andi	r18, 0xFB	; 251
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
	  #elif 	(Data_bits==_9_bit)
	  SET_BIT(UCSRC,UCSZ0);
	  SET_BIT(UCSRC,UCSZ1);
	  SET_BIT(UCSRC,UCSZ2);
   #endif
	 SET_BIT(UCSRB,TXEN);
      fe:	8a e2       	ldi	r24, 0x2A	; 42
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	2a e2       	ldi	r18, 0x2A	; 42
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	f9 01       	movw	r30, r18
     108:	20 81       	ld	r18, Z
     10a:	28 60       	ori	r18, 0x08	; 8
     10c:	fc 01       	movw	r30, r24
     10e:	20 83       	st	Z, r18
	 SET_BIT(UCSRB,RXEN);
     110:	8a e2       	ldi	r24, 0x2A	; 42
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	2a e2       	ldi	r18, 0x2A	; 42
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	f9 01       	movw	r30, r18
     11a:	20 81       	ld	r18, Z
     11c:	20 61       	ori	r18, 0x10	; 16
     11e:	fc 01       	movw	r30, r24
     120:	20 83       	st	Z, r18
 }
     122:	00 00       	nop
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <UART_u8RecevieData>:


uint8 UART_u8RecevieData(){
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	 while(GET_BIT(UCSRA,RXC) == 0);	    /* Wait for data to be received */
     132:	00 00       	nop
     134:	8b e2       	ldi	r24, 0x2B	; 43
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	fc 01       	movw	r30, r24
     13a:	80 81       	ld	r24, Z
     13c:	88 1f       	adc	r24, r24
     13e:	88 27       	eor	r24, r24
     140:	88 1f       	adc	r24, r24
     142:	88 2f       	mov	r24, r24
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	81 70       	andi	r24, 0x01	; 1
     148:	99 27       	eor	r25, r25
     14a:	89 2b       	or	r24, r25
     14c:	99 f3       	breq	.-26     	; 0x134 <UART_u8RecevieData+0xa>
	 return UDR;                      // why ?? /* Get and return received data from buffer */
     14e:	8c e2       	ldi	r24, 0x2C	; 44
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	fc 01       	movw	r30, r24
     154:	80 81       	ld	r24, Z
 }
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <UART_vidSendData>:
 void UART_vidSendData(uint8 u8DataCopy){
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	1f 92       	push	r1
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
     166:	89 83       	std	Y+1, r24	; 0x01
	 while(GET_BIT(UCSRA,UDRE) == 0);  /* Wait for empty transmit buffer */
     168:	00 00       	nop
     16a:	8b e2       	ldi	r24, 0x2B	; 43
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	fc 01       	movw	r30, r24
     170:	80 81       	ld	r24, Z
     172:	82 95       	swap	r24
     174:	86 95       	lsr	r24
     176:	87 70       	andi	r24, 0x07	; 7
     178:	88 2f       	mov	r24, r24
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	81 70       	andi	r24, 0x01	; 1
     17e:	99 27       	eor	r25, r25
     180:	89 2b       	or	r24, r25
     182:	99 f3       	breq	.-26     	; 0x16a <UART_vidSendData+0xe>
	 UDR = u8DataCopy;       /* Put data into buffer, sends the data */
     184:	8c e2       	ldi	r24, 0x2C	; 44
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	29 81       	ldd	r18, Y+1	; 0x01
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18
 }
     18e:	00 00       	nop
     190:	0f 90       	pop	r0
     192:	df 91       	pop	r29
     194:	cf 91       	pop	r28
     196:	08 95       	ret

00000198 <TIMER2_vidInit>:
 *      Author: s
 */

#include "Timer2_init.h"

void TIMER2_vidInit(void){
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_CLK_SOURCE == TIEMR2_INT
	CLEAR_BIT(ASSR,AS2);
#elif TIMER2_CLK_SOURCE == TIMER2_EXTR
	SET_BIT(ASSR,AS2);
     1a0:	82 e4       	ldi	r24, 0x42	; 66
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	22 e4       	ldi	r18, 0x42	; 66
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	f9 01       	movw	r30, r18
     1aa:	20 81       	ld	r18, Z
     1ac:	28 60       	ori	r18, 0x08	; 8
     1ae:	fc 01       	movw	r30, r24
     1b0:	20 83       	st	Z, r18
#endif
#if TIMER2_MODE_WAVE == NORMAL_MODE
	CLR_BIT(TCCR2,WGM20);
     1b2:	85 e4       	ldi	r24, 0x45	; 69
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	25 e4       	ldi	r18, 0x45	; 69
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	f9 01       	movw	r30, r18
     1bc:	20 81       	ld	r18, Z
     1be:	2f 7b       	andi	r18, 0xBF	; 191
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18
	CLR_BIT(TCCR2,WGM21);
     1c4:	85 e4       	ldi	r24, 0x45	; 69
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	25 e4       	ldi	r18, 0x45	; 69
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	f9 01       	movw	r30, r18
     1ce:	20 81       	ld	r18, Z
     1d0:	27 7f       	andi	r18, 0xF7	; 247
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 83       	st	Z, r18
	SET_BIT(TCCR2,WGM20);
	SET_BIT(TCCR2,WGM21);
	TCCR2 |= TIMER2_COMP_OUTPUT_MODE;
#endif

}
     1d6:	00 00       	nop
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	08 95       	ret

000001de <TIMER2_vidStart>:


void TIMER2_vidStart(void){
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
	TCCR2 |= TIMER2_SELECT_ENABLE;
     1e6:	85 e4       	ldi	r24, 0x45	; 69
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	25 e4       	ldi	r18, 0x45	; 69
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	f9 01       	movw	r30, r18
     1f0:	20 81       	ld	r18, Z
     1f2:	25 60       	ori	r18, 0x05	; 5
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 83       	st	Z, r18
}
     1f8:	00 00       	nop
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <TIMER2_vidStop>:
void TIMER2_vidStop(void){
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= TIMER2_CLOCK_STOP;
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	25 e4       	ldi	r18, 0x45	; 69
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	f9 01       	movw	r30, r18
     212:	20 81       	ld	r18, Z
     214:	28 7f       	andi	r18, 0xF8	; 248
     216:	fc 01       	movw	r30, r24
     218:	20 83       	st	Z, r18
}
     21a:	00 00       	nop
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	08 95       	ret

00000222 <TIMER2_vidWriteOVRTCNT0>:


void TIMER2_vidWriteOVRTCNT0(uint8 Copy_Start_Value){
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	1f 92       	push	r1
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_Start_Value;
     22e:	84 e4       	ldi	r24, 0x44	; 68
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	29 81       	ldd	r18, Y+1	; 0x01
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
}
     238:	00 00       	nop
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <TIMER2_vidWriteCOMPOCR0>:

void TIMER2_vidWriteCOMPOCR0(uint8 Copy_Start_Value){
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	1f 92       	push	r1
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_Start_Value;
     24e:	83 e4       	ldi	r24, 0x43	; 67
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	29 81       	ldd	r18, Y+1	; 0x01
     254:	fc 01       	movw	r30, r24
     256:	20 83       	st	Z, r18
}
     258:	00 00       	nop
     25a:	0f 90       	pop	r0
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <TIMER2_vidOVRInterruptEnable>:

void TIMER2_vidOVRInterruptEnable(void){
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     26a:	8f e5       	ldi	r24, 0x5F	; 95
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	2f e5       	ldi	r18, 0x5F	; 95
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	f9 01       	movw	r30, r18
     274:	20 81       	ld	r18, Z
     276:	20 68       	ori	r18, 0x80	; 128
     278:	fc 01       	movw	r30, r24
     27a:	20 83       	st	Z, r18
	SET_BIT(TIMSK,TOIE2);
     27c:	89 e5       	ldi	r24, 0x59	; 89
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	29 e5       	ldi	r18, 0x59	; 89
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	f9 01       	movw	r30, r18
     286:	20 81       	ld	r18, Z
     288:	20 64       	ori	r18, 0x40	; 64
     28a:	fc 01       	movw	r30, r24
     28c:	20 83       	st	Z, r18
}
     28e:	00 00       	nop
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <TIMER2_vidOVRInterruptDisable>:

void TIMER2_vidOVRInterruptDisable(void){
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE2);
     29e:	89 e5       	ldi	r24, 0x59	; 89
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	29 e5       	ldi	r18, 0x59	; 89
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	f9 01       	movw	r30, r18
     2a8:	20 81       	ld	r18, Z
     2aa:	2f 7b       	andi	r18, 0xBF	; 191
     2ac:	fc 01       	movw	r30, r24
     2ae:	20 83       	st	Z, r18
}
     2b0:	00 00       	nop
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <TIMER2_vidCOMPInterruptEnable>:

void TIMER2_vidCOMPInterruptEnable(void){
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     2c0:	8f e5       	ldi	r24, 0x5F	; 95
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	2f e5       	ldi	r18, 0x5F	; 95
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	f9 01       	movw	r30, r18
     2ca:	20 81       	ld	r18, Z
     2cc:	20 68       	ori	r18, 0x80	; 128
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 83       	st	Z, r18
	SET_BIT(TIMSK,OCIE2);
     2d2:	89 e5       	ldi	r24, 0x59	; 89
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	29 e5       	ldi	r18, 0x59	; 89
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	f9 01       	movw	r30, r18
     2dc:	20 81       	ld	r18, Z
     2de:	20 68       	ori	r18, 0x80	; 128
     2e0:	fc 01       	movw	r30, r24
     2e2:	20 83       	st	Z, r18
}
     2e4:	00 00       	nop
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <TIMER2_vidCOMPInterruptDisable>:

void TIMER2_vidCOMPInterruptDisable(void){
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE2);
     2f4:	89 e5       	ldi	r24, 0x59	; 89
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	29 e5       	ldi	r18, 0x59	; 89
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	f9 01       	movw	r30, r18
     2fe:	20 81       	ld	r18, Z
     300:	2f 77       	andi	r18, 0x7F	; 127
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
}
     306:	00 00       	nop
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <TIMER1_vidOCRAWrite>:


static void (*ICU_ptr)(void) = 0;


void TIMER1_vidOCRAWrite(uint16 Copy_u16ValueOCR){
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	00 d0       	rcall	.+0      	; 0x314 <TIMER1_vidOCRAWrite+0x6>
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	9a 83       	std	Y+2, r25	; 0x02
     31a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16ValueOCR;
     31c:	8a e4       	ldi	r24, 0x4A	; 74
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	29 81       	ldd	r18, Y+1	; 0x01
     322:	3a 81       	ldd	r19, Y+2	; 0x02
     324:	fc 01       	movw	r30, r24
     326:	31 83       	std	Z+1, r19	; 0x01
     328:	20 83       	st	Z, r18
}
     32a:	00 00       	nop
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <TIMER1_vidOCRBWrite>:
void TIMER1_vidOCRBWrite(uint16 Copy_u16ValueOCRB){
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	00 d0       	rcall	.+0      	; 0x33c <TIMER1_vidOCRBWrite+0x6>
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	9a 83       	std	Y+2, r25	; 0x02
     342:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16ValueOCRB ;
     344:	88 e4       	ldi	r24, 0x48	; 72
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	29 81       	ldd	r18, Y+1	; 0x01
     34a:	3a 81       	ldd	r19, Y+2	; 0x02
     34c:	fc 01       	movw	r30, r24
     34e:	31 83       	std	Z+1, r19	; 0x01
     350:	20 83       	st	Z, r18
}
     352:	00 00       	nop
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <TIMER1_vidICRWrite>:
void TIMER1_vidICRWrite(uint16 Copy_u16ValueICR){
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	00 d0       	rcall	.+0      	; 0x364 <TIMER1_vidICRWrite+0x6>
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	9a 83       	std	Y+2, r25	; 0x02
     36a:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ValueICR;
     36c:	86 e4       	ldi	r24, 0x46	; 70
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	29 81       	ldd	r18, Y+1	; 0x01
     372:	3a 81       	ldd	r19, Y+2	; 0x02
     374:	fc 01       	movw	r30, r24
     376:	31 83       	std	Z+1, r19	; 0x01
     378:	20 83       	st	Z, r18
}
     37a:	00 00       	nop
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <TIMER1_vidInit>:


void TIMER1_vidInit(void){
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62

	TIMER1_MODE;
     38e:	8f e4       	ldi	r24, 0x4F	; 79
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	2f e4       	ldi	r18, 0x4F	; 79
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	f9 01       	movw	r30, r18
     398:	20 81       	ld	r18, Z
     39a:	fc 01       	movw	r30, r24
     39c:	20 83       	st	Z, r18
     39e:	8e e4       	ldi	r24, 0x4E	; 78
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	2e e4       	ldi	r18, 0x4E	; 78
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	f9 01       	movw	r30, r18
     3a8:	20 81       	ld	r18, Z
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
//	TCCR1A &= 0x0F;
	TCCR1A |= TIMER1_COMP_OUTPUT;
     3ae:	8f e4       	ldi	r24, 0x4F	; 79
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	2f e4       	ldi	r18, 0x4F	; 79
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	f9 01       	movw	r30, r18
     3b8:	20 81       	ld	r18, Z
     3ba:	20 6a       	ori	r18, 0xA0	; 160
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
}
     3c0:	00 00       	nop
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <TIMER1_vidINCAPFalling>:

void TIMER1_vidINCAPFalling(void){
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,ICES1);
     3d0:	8e e4       	ldi	r24, 0x4E	; 78
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	2e e4       	ldi	r18, 0x4E	; 78
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	2f 7b       	andi	r18, 0xBF	; 191
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
}
     3e2:	00 00       	nop
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <TIMER1_vidINCAPRissing>:
void TIMER1_vidINCAPRissing(void){
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,ICES1);
     3f2:	8e e4       	ldi	r24, 0x4E	; 78
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	2e e4       	ldi	r18, 0x4E	; 78
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	f9 01       	movw	r30, r18
     3fc:	20 81       	ld	r18, Z
     3fe:	20 64       	ori	r18, 0x40	; 64
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18
}
     404:	00 00       	nop
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <TIMER1_u16INCAPRead>:

uint16 TIMER1_u16INCAPRead(void){
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     414:	86 e4       	ldi	r24, 0x46	; 70
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	fc 01       	movw	r30, r24
     41a:	80 81       	ld	r24, Z
     41c:	91 81       	ldd	r25, Z+1	; 0x01
}
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <TIMER1_vidStart>:

void TIMER1_vidStart(void){
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= TIMER1_CLOCK_SELECT;
     42c:	8e e4       	ldi	r24, 0x4E	; 78
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2e e4       	ldi	r18, 0x4E	; 78
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	22 60       	ori	r18, 0x02	; 2
     43a:	fc 01       	movw	r30, r24
     43c:	20 83       	st	Z, r18
}
     43e:	00 00       	nop
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <TIMER1_vidStop>:
void TIMER1_vidStop(void){
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= TIMER1_CLOCK_STOP;
     44e:	8e e4       	ldi	r24, 0x4E	; 78
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	2e e4       	ldi	r18, 0x4E	; 78
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	f9 01       	movw	r30, r18
     458:	20 81       	ld	r18, Z
     45a:	28 7f       	andi	r18, 0xF8	; 248
     45c:	fc 01       	movw	r30, r24
     45e:	20 83       	st	Z, r18
}
     460:	00 00       	nop
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <TIMER1_vidOVRInterruptEnable>:

void TIMER1_vidOVRInterruptEnable(void){
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     470:	8f e5       	ldi	r24, 0x5F	; 95
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	2f e5       	ldi	r18, 0x5F	; 95
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	f9 01       	movw	r30, r18
     47a:	20 81       	ld	r18, Z
     47c:	20 68       	ori	r18, 0x80	; 128
     47e:	fc 01       	movw	r30, r24
     480:	20 83       	st	Z, r18
	SET_BIT(TIMSK,TOIE1);
     482:	89 e5       	ldi	r24, 0x59	; 89
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	29 e5       	ldi	r18, 0x59	; 89
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	f9 01       	movw	r30, r18
     48c:	20 81       	ld	r18, Z
     48e:	24 60       	ori	r18, 0x04	; 4
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
}
     494:	00 00       	nop
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <TIMER1_vidCOMPAInterruptEnable>:
void TIMER1_vidCOMPAInterruptEnable(void){
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     4a4:	8f e5       	ldi	r24, 0x5F	; 95
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	2f e5       	ldi	r18, 0x5F	; 95
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	f9 01       	movw	r30, r18
     4ae:	20 81       	ld	r18, Z
     4b0:	20 68       	ori	r18, 0x80	; 128
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 83       	st	Z, r18
	SET_BIT(TIMSK,OCIE1A);
     4b6:	89 e5       	ldi	r24, 0x59	; 89
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	29 e5       	ldi	r18, 0x59	; 89
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	f9 01       	movw	r30, r18
     4c0:	20 81       	ld	r18, Z
     4c2:	20 61       	ori	r18, 0x10	; 16
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
}
     4c8:	00 00       	nop
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <TIMER1_vidCOMBInterruptEnable>:
void TIMER1_vidCOMBInterruptEnable(void){
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     4d8:	8f e5       	ldi	r24, 0x5F	; 95
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	2f e5       	ldi	r18, 0x5F	; 95
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	f9 01       	movw	r30, r18
     4e2:	20 81       	ld	r18, Z
     4e4:	20 68       	ori	r18, 0x80	; 128
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
	SET_BIT(TIMSK,OCIE1B);
     4ea:	89 e5       	ldi	r24, 0x59	; 89
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	29 e5       	ldi	r18, 0x59	; 89
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	f9 01       	movw	r30, r18
     4f4:	20 81       	ld	r18, Z
     4f6:	28 60       	ori	r18, 0x08	; 8
     4f8:	fc 01       	movw	r30, r24
     4fa:	20 83       	st	Z, r18
}
     4fc:	00 00       	nop
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <TIMER1_vidCAPInterruptEnable>:
void TIMER1_vidCAPInterruptEnable(void){
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     50c:	8f e5       	ldi	r24, 0x5F	; 95
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	2f e5       	ldi	r18, 0x5F	; 95
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	f9 01       	movw	r30, r18
     516:	20 81       	ld	r18, Z
     518:	20 68       	ori	r18, 0x80	; 128
     51a:	fc 01       	movw	r30, r24
     51c:	20 83       	st	Z, r18
	SET_BIT(TIMSK,TICIE1);
     51e:	89 e5       	ldi	r24, 0x59	; 89
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	29 e5       	ldi	r18, 0x59	; 89
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	f9 01       	movw	r30, r18
     528:	20 81       	ld	r18, Z
     52a:	20 62       	ori	r18, 0x20	; 32
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
}
     530:	00 00       	nop
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <TIMER1_vidOVRInterruptDisable>:

void TIMER1_vidOVRInterruptDisable(void){
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE1);
     540:	89 e5       	ldi	r24, 0x59	; 89
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	29 e5       	ldi	r18, 0x59	; 89
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	f9 01       	movw	r30, r18
     54a:	20 81       	ld	r18, Z
     54c:	2b 7f       	andi	r18, 0xFB	; 251
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18
}
     552:	00 00       	nop
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <TIMER1_vidCOMPAInterruptDisable>:
void TIMER1_vidCOMPAInterruptDisable(void){
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1A);
     562:	89 e5       	ldi	r24, 0x59	; 89
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	29 e5       	ldi	r18, 0x59	; 89
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	f9 01       	movw	r30, r18
     56c:	20 81       	ld	r18, Z
     56e:	2f 7e       	andi	r18, 0xEF	; 239
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
}
     574:	00 00       	nop
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <TIMER1_vidCOMBInterruptDisable>:
void TIMER1_vidCOMBInterruptDisable(void){
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1B);
     584:	89 e5       	ldi	r24, 0x59	; 89
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	29 e5       	ldi	r18, 0x59	; 89
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	27 7f       	andi	r18, 0xF7	; 247
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
}
     596:	00 00       	nop
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <TIMER1_vidCAPInterruptDisable>:
void TIMER1_vidCAPInterruptDisable(void){
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TICIE1);
     5a6:	89 e5       	ldi	r24, 0x59	; 89
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	29 e5       	ldi	r18, 0x59	; 89
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	f9 01       	movw	r30, r18
     5b0:	20 81       	ld	r18, Z
     5b2:	2f 7d       	andi	r18, 0xDF	; 223
     5b4:	fc 01       	movw	r30, r24
     5b6:	20 83       	st	Z, r18
}
     5b8:	00 00       	nop
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <ICU_setCallBack>:

void ICU_setCallBack(void (*func)(void)) {
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	00 d0       	rcall	.+0      	; 0x5c6 <ICU_setCallBack+0x6>
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	9a 83       	std	Y+2, r25	; 0x02
     5cc:	89 83       	std	Y+1, r24	; 0x01
	ICU_ptr = func;
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__data_end+0x1>
     5d6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__data_end>
}
     5da:	00 00       	nop
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void) {
     5e6:	1f 92       	push	r1
     5e8:	0f 92       	push	r0
     5ea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     5f2:	2f 93       	push	r18
     5f4:	3f 93       	push	r19
     5f6:	4f 93       	push	r20
     5f8:	5f 93       	push	r21
     5fa:	6f 93       	push	r22
     5fc:	7f 93       	push	r23
     5fe:	8f 93       	push	r24
     600:	9f 93       	push	r25
     602:	af 93       	push	r26
     604:	bf 93       	push	r27
     606:	ef 93       	push	r30
     608:	ff 93       	push	r31
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
	if (ICU_ptr != 0) {
     612:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
     616:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
     61a:	89 2b       	or	r24, r25
     61c:	31 f0       	breq	.+12     	; 0x62a <__vector_6+0x44>
		ICU_ptr();
     61e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
     622:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
     626:	fc 01       	movw	r30, r24
     628:	09 95       	icall
	}
}
     62a:	00 00       	nop
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	ff 91       	pop	r31
     632:	ef 91       	pop	r30
     634:	bf 91       	pop	r27
     636:	af 91       	pop	r26
     638:	9f 91       	pop	r25
     63a:	8f 91       	pop	r24
     63c:	7f 91       	pop	r23
     63e:	6f 91       	pop	r22
     640:	5f 91       	pop	r21
     642:	4f 91       	pop	r20
     644:	3f 91       	pop	r19
     646:	2f 91       	pop	r18
     648:	0f 90       	pop	r0
     64a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     64e:	0f 90       	pop	r0
     650:	1f 90       	pop	r1
     652:	18 95       	reti

00000654 <TIMER0_vidInit>:
 */

#include "Timer0_init.h"


void TIMER0_vidInit(void){
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
#if TIMER_MODE_WAVE == NORMAL_MODE
	CLR_BIT(TCCR0,WGM00);
	CLR_BIT(TCCR0,WGM01);
#elif TIMER_MODE_WAVE == PWM_MODE
	SET_BIT(TCCR0,WGM00);
     65c:	83 e5       	ldi	r24, 0x53	; 83
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	23 e5       	ldi	r18, 0x53	; 83
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	f9 01       	movw	r30, r18
     666:	20 81       	ld	r18, Z
     668:	20 64       	ori	r18, 0x40	; 64
     66a:	fc 01       	movw	r30, r24
     66c:	20 83       	st	Z, r18
	CLR_BIT(TCCR0,WGM01);
     66e:	83 e5       	ldi	r24, 0x53	; 83
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	23 e5       	ldi	r18, 0x53	; 83
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	f9 01       	movw	r30, r18
     678:	20 81       	ld	r18, Z
     67a:	27 7f       	andi	r18, 0xF7	; 247
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
	TCCR0 |= TIMER_COMP_OUTPUT_MODE;
     680:	83 e5       	ldi	r24, 0x53	; 83
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	23 e5       	ldi	r18, 0x53	; 83
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	f9 01       	movw	r30, r18
     68a:	20 81       	ld	r18, Z
     68c:	20 62       	ori	r18, 0x20	; 32
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
#elif TIMER_MODE_WAVE == FAST_PWM_MODE
	SET_BIT(TCCR0,WGM00);
	SET_BIT(TCCR0,WGM01);
	TCCR0 |= TIMER_COMP_OUTPUT_MODE;
#endif
	GPIO_vSetPinDirection(Port_B, Pin_3, Pin_Output);
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	63 e0       	ldi	r22, 0x03	; 3
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>

}
     69c:	00 00       	nop
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <PWM_Timer0_Start>:

void PWM_Timer0_Start(uint8 duty_cycle) {
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <PWM_Timer0_Start+0x6>
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	8a 83       	std	Y+2, r24	; 0x02
    // 1. Set OC0 (PB3) as output
    GPIO_vSetPinDirection(Port_B, Pin_3, Pin_Output);
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	63 e0       	ldi	r22, 0x03	; 3
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>

    // 2. Initialize Timer0 in PWM Mode with Non-Inverting
    TIMER0_vidInit();
     6ba:	0e 94 2a 03 	call	0x654	; 0x654 <TIMER0_vidInit>

    // 3. Set OCR0 based on required duty cycle (0-100%)
    uint8 ocr_value = (duty_cycle * 255UL) / 100;
     6be:	8a 81       	ldd	r24, Y+2	; 0x02
     6c0:	28 2f       	mov	r18, r24
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	dc 01       	movw	r26, r24
     6ce:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__muluhisi3>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	24 e6       	ldi	r18, 0x64	; 100
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	bc 01       	movw	r22, r24
     6e0:	cd 01       	movw	r24, r26
     6e2:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <__udivmodsi4>
     6e6:	da 01       	movw	r26, r20
     6e8:	c9 01       	movw	r24, r18
     6ea:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_vidWriteCOMPOCR0(ocr_value);
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	0e 94 b3 03 	call	0x766	; 0x766 <TIMER0_vidWriteCOMPOCR0>

    // 4. Start Timer0 with prescaler F_CPU/8
    TIMER0_vidStart();
     6f2:	0e 94 81 03 	call	0x702	; 0x702 <TIMER0_vidStart>
}
     6f6:	00 00       	nop
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <TIMER0_vidStart>:


void TIMER0_vidStart(void){
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= TIMER_SELECT_ENABLE;
     70a:	83 e5       	ldi	r24, 0x53	; 83
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	23 e5       	ldi	r18, 0x53	; 83
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	f9 01       	movw	r30, r18
     714:	20 81       	ld	r18, Z
     716:	22 60       	ori	r18, 0x02	; 2
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18
}
     71c:	00 00       	nop
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <TIMER0_vidStop>:

void TIMER0_vidStop(void){
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLOCK_STOP;
     72c:	83 e5       	ldi	r24, 0x53	; 83
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	23 e5       	ldi	r18, 0x53	; 83
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	28 7f       	andi	r18, 0xF8	; 248
     73a:	fc 01       	movw	r30, r24
     73c:	20 83       	st	Z, r18
}
     73e:	00 00       	nop
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <TIMER0_vidWriteOVRTCNT0>:

void TIMER0_vidWriteOVRTCNT0(uint8 Copy_Start_Value){
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	1f 92       	push	r1
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_Start_Value;
     752:	82 e5       	ldi	r24, 0x52	; 82
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	29 81       	ldd	r18, Y+1	; 0x01
     758:	fc 01       	movw	r30, r24
     75a:	20 83       	st	Z, r18
}
     75c:	00 00       	nop
     75e:	0f 90       	pop	r0
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <TIMER0_vidWriteCOMPOCR0>:

void TIMER0_vidWriteCOMPOCR0(uint8 Copy_Start_Value){
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	1f 92       	push	r1
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_Start_Value;
     772:	8c e5       	ldi	r24, 0x5C	; 92
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	29 81       	ldd	r18, Y+1	; 0x01
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
}
     77c:	00 00       	nop
     77e:	0f 90       	pop	r0
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <TIMER0_vidOVRInterruptEnable>:

void TIMER0_vidOVRInterruptEnable(void){
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     78e:	8f e5       	ldi	r24, 0x5F	; 95
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	2f e5       	ldi	r18, 0x5F	; 95
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	20 81       	ld	r18, Z
     79a:	20 68       	ori	r18, 0x80	; 128
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
	SET_BIT(TIMSK,TOIE0);
     7a0:	89 e5       	ldi	r24, 0x59	; 89
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	29 e5       	ldi	r18, 0x59	; 89
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	f9 01       	movw	r30, r18
     7aa:	20 81       	ld	r18, Z
     7ac:	21 60       	ori	r18, 0x01	; 1
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 83       	st	Z, r18
}
     7b2:	00 00       	nop
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <TIMER0_vidOVRInterruptDisable>:

void TIMER0_vidOVRInterruptDisable(void){
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
     7c2:	89 e5       	ldi	r24, 0x59	; 89
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	29 e5       	ldi	r18, 0x59	; 89
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	f9 01       	movw	r30, r18
     7cc:	20 81       	ld	r18, Z
     7ce:	2e 7f       	andi	r18, 0xFE	; 254
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
}
     7d4:	00 00       	nop
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <TIMER0_vidCOMPInterruptEnable>:

void TIMER0_vidCOMPInterruptEnable(void){
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     7e4:	8f e5       	ldi	r24, 0x5F	; 95
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	2f e5       	ldi	r18, 0x5F	; 95
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	f9 01       	movw	r30, r18
     7ee:	20 81       	ld	r18, Z
     7f0:	20 68       	ori	r18, 0x80	; 128
     7f2:	fc 01       	movw	r30, r24
     7f4:	20 83       	st	Z, r18
	SET_BIT(TIMSK,OCIE0);
     7f6:	89 e5       	ldi	r24, 0x59	; 89
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	29 e5       	ldi	r18, 0x59	; 89
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	f9 01       	movw	r30, r18
     800:	20 81       	ld	r18, Z
     802:	22 60       	ori	r18, 0x02	; 2
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18
}
     808:	00 00       	nop
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <TIMER0_vidCOMPInterruptDisable>:

void TIMER0_vidCOMPInterruptDisable(void){
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
     818:	89 e5       	ldi	r24, 0x59	; 89
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	29 e5       	ldi	r18, 0x59	; 89
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	f9 01       	movw	r30, r18
     822:	20 81       	ld	r18, Z
     824:	2d 7f       	andi	r18, 0xFD	; 253
     826:	fc 01       	movw	r30, r24
     828:	20 83       	st	Z, r18
}
     82a:	00 00       	nop
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <EX_Interrupt_init>:

static void EX_Int0(uint8 copySense);
static void EX_Int1(uint8 copySense);
static void EX_Int2(uint8 copySense);

void EX_Interrupt_init(uint8 copyExNumber, uint8 copySense) {
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	00 d0       	rcall	.+0      	; 0x838 <EX_Interrupt_init+0x6>
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT(SREG, GIE);
     840:	8f e5       	ldi	r24, 0x5F	; 95
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	2f e5       	ldi	r18, 0x5F	; 95
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	f9 01       	movw	r30, r18
     84a:	20 81       	ld	r18, Z
     84c:	20 68       	ori	r18, 0x80	; 128
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
	switch(copyExNumber) {
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	88 2f       	mov	r24, r24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	91 05       	cpc	r25, r1
     85c:	51 f0       	breq	.+20     	; 0x872 <EX_Interrupt_init+0x40>
     85e:	82 30       	cpi	r24, 0x02	; 2
     860:	91 05       	cpc	r25, r1
     862:	59 f0       	breq	.+22     	; 0x87a <EX_Interrupt_init+0x48>
     864:	89 2b       	or	r24, r25
     866:	09 f0       	breq	.+2      	; 0x86a <EX_Interrupt_init+0x38>
			EX_Int2(copySense);
			break;

		default :
			/* Nothing */
			break;
     868:	0c c0       	rjmp	.+24     	; 0x882 <EX_Interrupt_init+0x50>

void EX_Interrupt_init(uint8 copyExNumber, uint8 copySense) {
	SET_BIT(SREG, GIE);
	switch(copyExNumber) {
		case EX_INT0:
			EX_Int0(copySense);
     86a:	8a 81       	ldd	r24, Y+2	; 0x02
     86c:	0e 94 47 04 	call	0x88e	; 0x88e <EX_Int0>
			break;
     870:	08 c0       	rjmp	.+16     	; 0x882 <EX_Interrupt_init+0x50>

		case EX_INT1:
			EX_Int1(copySense);
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	0e 94 c7 04 	call	0x98e	; 0x98e <EX_Int1>
			break;
     878:	04 c0       	rjmp	.+8      	; 0x882 <EX_Interrupt_init+0x50>

		case EX_INT2:
			EX_Int2(copySense);
     87a:	8a 81       	ldd	r24, Y+2	; 0x02
     87c:	0e 94 47 05 	call	0xa8e	; 0xa8e <EX_Int2>
			break;
     880:	00 00       	nop
		default :
			/* Nothing */
			break;
	}

}
     882:	00 00       	nop
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <EX_Int0>:


static void EX_Int0(uint8 copySense) {
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	1f 92       	push	r1
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GIFR,INTF0);
     89a:	8a e5       	ldi	r24, 0x5A	; 90
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	2a e5       	ldi	r18, 0x5A	; 90
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	f9 01       	movw	r30, r18
     8a4:	20 81       	ld	r18, Z
     8a6:	2f 7b       	andi	r18, 0xBF	; 191
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
	GPIO_vSetPinDirection(Port_D, Pin_2, Pin_Input);
     8ac:	41 e0       	ldi	r20, 0x01	; 1
     8ae:	62 e0       	ldi	r22, 0x02	; 2
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
	SET_BIT(GICR,INT0);
     8b6:	8b e5       	ldi	r24, 0x5B	; 91
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	2b e5       	ldi	r18, 0x5B	; 91
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	f9 01       	movw	r30, r18
     8c0:	20 81       	ld	r18, Z
     8c2:	20 64       	ori	r18, 0x40	; 64
     8c4:	fc 01       	movw	r30, r24
     8c6:	20 83       	st	Z, r18
	switch(copySense) {
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	88 2f       	mov	r24, r24
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	91 05       	cpc	r25, r1
     8d2:	f9 f0       	breq	.+62     	; 0x912 <EX_Int0+0x84>
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	91 05       	cpc	r25, r1
     8d8:	1c f4       	brge	.+6      	; 0x8e0 <EX_Int0+0x52>
     8da:	89 2b       	or	r24, r25
     8dc:	39 f0       	breq	.+14     	; 0x8ec <EX_Int0+0x5e>
			SET_BIT(MCUCR, ISC00);
			break;

		default :
			/* Nothing  */
			break;
     8de:	52 c0       	rjmp	.+164    	; 0x984 <EX_Int0+0xf6>

static void EX_Int0(uint8 copySense) {
	CLR_BIT(GIFR,INTF0);
	GPIO_vSetPinDirection(Port_D, Pin_2, Pin_Input);
	SET_BIT(GICR,INT0);
	switch(copySense) {
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	91 05       	cpc	r25, r1
     8e4:	49 f1       	breq	.+82     	; 0x938 <EX_Int0+0xaa>
     8e6:	03 97       	sbiw	r24, 0x03	; 3
     8e8:	d1 f1       	breq	.+116    	; 0x95e <EX_Int0+0xd0>
			SET_BIT(MCUCR, ISC00);
			break;

		default :
			/* Nothing  */
			break;
     8ea:	4c c0       	rjmp	.+152    	; 0x984 <EX_Int0+0xf6>
	CLR_BIT(GIFR,INTF0);
	GPIO_vSetPinDirection(Port_D, Pin_2, Pin_Input);
	SET_BIT(GICR,INT0);
	switch(copySense) {
		case EX_Low_Level:
			CLR_BIT(MCUCR, ISC01);
     8ec:	85 e5       	ldi	r24, 0x55	; 85
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	25 e5       	ldi	r18, 0x55	; 85
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	f9 01       	movw	r30, r18
     8f6:	20 81       	ld	r18, Z
     8f8:	2d 7f       	andi	r18, 0xFD	; 253
     8fa:	fc 01       	movw	r30, r24
     8fc:	20 83       	st	Z, r18
			CLR_BIT(MCUCR, ISC00);
     8fe:	85 e5       	ldi	r24, 0x55	; 85
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	25 e5       	ldi	r18, 0x55	; 85
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	f9 01       	movw	r30, r18
     908:	20 81       	ld	r18, Z
     90a:	2e 7f       	andi	r18, 0xFE	; 254
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18
			break;
     910:	39 c0       	rjmp	.+114    	; 0x984 <EX_Int0+0xf6>

		case EX_Any_Logical:
			CLR_BIT(MCUCR, ISC01);
     912:	85 e5       	ldi	r24, 0x55	; 85
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	25 e5       	ldi	r18, 0x55	; 85
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	f9 01       	movw	r30, r18
     91c:	20 81       	ld	r18, Z
     91e:	2d 7f       	andi	r18, 0xFD	; 253
     920:	fc 01       	movw	r30, r24
     922:	20 83       	st	Z, r18
			SET_BIT(MCUCR, ISC00);
     924:	85 e5       	ldi	r24, 0x55	; 85
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	25 e5       	ldi	r18, 0x55	; 85
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	20 81       	ld	r18, Z
     930:	21 60       	ori	r18, 0x01	; 1
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
			break;
     936:	26 c0       	rjmp	.+76     	; 0x984 <EX_Int0+0xf6>

		case EX_Falling_Edge:
			SET_BIT(MCUCR, ISC01);
     938:	85 e5       	ldi	r24, 0x55	; 85
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	25 e5       	ldi	r18, 0x55	; 85
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	f9 01       	movw	r30, r18
     942:	20 81       	ld	r18, Z
     944:	22 60       	ori	r18, 0x02	; 2
     946:	fc 01       	movw	r30, r24
     948:	20 83       	st	Z, r18
			CLR_BIT(MCUCR, ISC00);
     94a:	85 e5       	ldi	r24, 0x55	; 85
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	25 e5       	ldi	r18, 0x55	; 85
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	f9 01       	movw	r30, r18
     954:	20 81       	ld	r18, Z
     956:	2e 7f       	andi	r18, 0xFE	; 254
     958:	fc 01       	movw	r30, r24
     95a:	20 83       	st	Z, r18
			break;
     95c:	13 c0       	rjmp	.+38     	; 0x984 <EX_Int0+0xf6>

		case EX_Rising_Edge:
			SET_BIT(MCUCR, ISC01);
     95e:	85 e5       	ldi	r24, 0x55	; 85
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	25 e5       	ldi	r18, 0x55	; 85
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	22 60       	ori	r18, 0x02	; 2
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
			SET_BIT(MCUCR, ISC00);
     970:	85 e5       	ldi	r24, 0x55	; 85
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	25 e5       	ldi	r18, 0x55	; 85
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	f9 01       	movw	r30, r18
     97a:	20 81       	ld	r18, Z
     97c:	21 60       	ori	r18, 0x01	; 1
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18
			break;
     982:	00 00       	nop

		default :
			/* Nothing  */
			break;
	}
}
     984:	00 00       	nop
     986:	0f 90       	pop	r0
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <EX_Int1>:

static void EX_Int1(uint8 copySense) {
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	1f 92       	push	r1
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GIFR,INTF1);
     99a:	8a e5       	ldi	r24, 0x5A	; 90
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	2a e5       	ldi	r18, 0x5A	; 90
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	f9 01       	movw	r30, r18
     9a4:	20 81       	ld	r18, Z
     9a6:	2f 77       	andi	r18, 0x7F	; 127
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
	GPIO_vSetPinDirection(Port_D, Pin_3, Pin_Input);
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	63 e0       	ldi	r22, 0x03	; 3
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
	SET_BIT(GICR,INT1);
     9b6:	8b e5       	ldi	r24, 0x5B	; 91
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	2b e5       	ldi	r18, 0x5B	; 91
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	f9 01       	movw	r30, r18
     9c0:	20 81       	ld	r18, Z
     9c2:	20 68       	ori	r18, 0x80	; 128
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18
	switch(copySense) {
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	88 2f       	mov	r24, r24
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	91 05       	cpc	r25, r1
     9d2:	f9 f0       	breq	.+62     	; 0xa12 <EX_Int1+0x84>
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	91 05       	cpc	r25, r1
     9d8:	1c f4       	brge	.+6      	; 0x9e0 <EX_Int1+0x52>
     9da:	89 2b       	or	r24, r25
     9dc:	39 f0       	breq	.+14     	; 0x9ec <EX_Int1+0x5e>
			SET_BIT(MCUCR, ISC10);
			break;

		default :
			/* Nothing  */
			break;
     9de:	52 c0       	rjmp	.+164    	; 0xa84 <EX_Int1+0xf6>

static void EX_Int1(uint8 copySense) {
	CLR_BIT(GIFR,INTF1);
	GPIO_vSetPinDirection(Port_D, Pin_3, Pin_Input);
	SET_BIT(GICR,INT1);
	switch(copySense) {
     9e0:	82 30       	cpi	r24, 0x02	; 2
     9e2:	91 05       	cpc	r25, r1
     9e4:	49 f1       	breq	.+82     	; 0xa38 <EX_Int1+0xaa>
     9e6:	03 97       	sbiw	r24, 0x03	; 3
     9e8:	d1 f1       	breq	.+116    	; 0xa5e <EX_Int1+0xd0>
			SET_BIT(MCUCR, ISC10);
			break;

		default :
			/* Nothing  */
			break;
     9ea:	4c c0       	rjmp	.+152    	; 0xa84 <EX_Int1+0xf6>
	CLR_BIT(GIFR,INTF1);
	GPIO_vSetPinDirection(Port_D, Pin_3, Pin_Input);
	SET_BIT(GICR,INT1);
	switch(copySense) {
		case EX_Low_Level:
			CLR_BIT(MCUCR, ISC11);
     9ec:	85 e5       	ldi	r24, 0x55	; 85
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	25 e5       	ldi	r18, 0x55	; 85
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	f9 01       	movw	r30, r18
     9f6:	20 81       	ld	r18, Z
     9f8:	27 7f       	andi	r18, 0xF7	; 247
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
			CLR_BIT(MCUCR, ISC10);
     9fe:	85 e5       	ldi	r24, 0x55	; 85
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	25 e5       	ldi	r18, 0x55	; 85
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	f9 01       	movw	r30, r18
     a08:	20 81       	ld	r18, Z
     a0a:	2b 7f       	andi	r18, 0xFB	; 251
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 83       	st	Z, r18
			break;
     a10:	39 c0       	rjmp	.+114    	; 0xa84 <EX_Int1+0xf6>

		case EX_Any_Logical:
			CLR_BIT(MCUCR, ISC11);
     a12:	85 e5       	ldi	r24, 0x55	; 85
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	25 e5       	ldi	r18, 0x55	; 85
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	f9 01       	movw	r30, r18
     a1c:	20 81       	ld	r18, Z
     a1e:	27 7f       	andi	r18, 0xF7	; 247
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
			SET_BIT(MCUCR, ISC10);
     a24:	85 e5       	ldi	r24, 0x55	; 85
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	25 e5       	ldi	r18, 0x55	; 85
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	f9 01       	movw	r30, r18
     a2e:	20 81       	ld	r18, Z
     a30:	24 60       	ori	r18, 0x04	; 4
     a32:	fc 01       	movw	r30, r24
     a34:	20 83       	st	Z, r18
			break;
     a36:	26 c0       	rjmp	.+76     	; 0xa84 <EX_Int1+0xf6>

		case EX_Falling_Edge:
			SET_BIT(MCUCR, ISC11);
     a38:	85 e5       	ldi	r24, 0x55	; 85
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	25 e5       	ldi	r18, 0x55	; 85
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	f9 01       	movw	r30, r18
     a42:	20 81       	ld	r18, Z
     a44:	28 60       	ori	r18, 0x08	; 8
     a46:	fc 01       	movw	r30, r24
     a48:	20 83       	st	Z, r18
			CLR_BIT(MCUCR, ISC10);
     a4a:	85 e5       	ldi	r24, 0x55	; 85
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	25 e5       	ldi	r18, 0x55	; 85
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	f9 01       	movw	r30, r18
     a54:	20 81       	ld	r18, Z
     a56:	2b 7f       	andi	r18, 0xFB	; 251
     a58:	fc 01       	movw	r30, r24
     a5a:	20 83       	st	Z, r18
			break;
     a5c:	13 c0       	rjmp	.+38     	; 0xa84 <EX_Int1+0xf6>

		case EX_Rising_Edge:
			SET_BIT(MCUCR, ISC11);
     a5e:	85 e5       	ldi	r24, 0x55	; 85
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	25 e5       	ldi	r18, 0x55	; 85
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	f9 01       	movw	r30, r18
     a68:	20 81       	ld	r18, Z
     a6a:	28 60       	ori	r18, 0x08	; 8
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 83       	st	Z, r18
			SET_BIT(MCUCR, ISC10);
     a70:	85 e5       	ldi	r24, 0x55	; 85
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	25 e5       	ldi	r18, 0x55	; 85
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	f9 01       	movw	r30, r18
     a7a:	20 81       	ld	r18, Z
     a7c:	24 60       	ori	r18, 0x04	; 4
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
			break;
     a82:	00 00       	nop

		default :
			/* Nothing  */
			break;
	}
}
     a84:	00 00       	nop
     a86:	0f 90       	pop	r0
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <EX_Int2>:

static void EX_Int2(uint8 copySense) {
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	1f 92       	push	r1
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GIFR,INTF2);
     a9a:	8a e5       	ldi	r24, 0x5A	; 90
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	2a e5       	ldi	r18, 0x5A	; 90
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	f9 01       	movw	r30, r18
     aa4:	20 81       	ld	r18, Z
     aa6:	2f 7d       	andi	r18, 0xDF	; 223
     aa8:	fc 01       	movw	r30, r24
     aaa:	20 83       	st	Z, r18
	GPIO_vSetPinDirection(Port_B, Pin_2, Pin_Input);
     aac:	41 e0       	ldi	r20, 0x01	; 1
     aae:	62 e0       	ldi	r22, 0x02	; 2
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
	SET_BIT(GICR,INT2);
     ab6:	8b e5       	ldi	r24, 0x5B	; 91
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	2b e5       	ldi	r18, 0x5B	; 91
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	f9 01       	movw	r30, r18
     ac0:	20 81       	ld	r18, Z
     ac2:	20 62       	ori	r18, 0x20	; 32
     ac4:	fc 01       	movw	r30, r24
     ac6:	20 83       	st	Z, r18
	switch (copySense) {
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	91 05       	cpc	r25, r1
     ad2:	19 f0       	breq	.+6      	; 0xada <EX_Int2+0x4c>
     ad4:	03 97       	sbiw	r24, 0x03	; 3
     ad6:	59 f0       	breq	.+22     	; 0xaee <EX_Int2+0x60>
			SET_BIT(MCUCSR, ISC2);
			break;

		default :
			/* Nothing  */
			break;
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <EX_Int2+0x74>
	CLR_BIT(GIFR,INTF2);
	GPIO_vSetPinDirection(Port_B, Pin_2, Pin_Input);
	SET_BIT(GICR,INT2);
	switch (copySense) {
		case EX_Falling_Edge:
			CLR_BIT(MCUCSR, ISC2);
     ada:	84 e5       	ldi	r24, 0x54	; 84
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	24 e5       	ldi	r18, 0x54	; 84
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	f9 01       	movw	r30, r18
     ae4:	20 81       	ld	r18, Z
     ae6:	2f 7b       	andi	r18, 0xBF	; 191
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
			break;
     aec:	0a c0       	rjmp	.+20     	; 0xb02 <EX_Int2+0x74>

		case EX_Rising_Edge:
			SET_BIT(MCUCSR, ISC2);
     aee:	84 e5       	ldi	r24, 0x54	; 84
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	24 e5       	ldi	r18, 0x54	; 84
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	f9 01       	movw	r30, r18
     af8:	20 81       	ld	r18, Z
     afa:	20 64       	ori	r18, 0x40	; 64
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18
			break;
     b00:	00 00       	nop

		default :
			/* Nothing  */
			break;
	}
}
     b02:	00 00       	nop
     b04:	0f 90       	pop	r0
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <GPIO_vSetPinDirection>:
volatile uint8 *PORT_reg[4] = {&PORTA, &PORTB, &PORTC, &PORTD};
volatile uint8 *PIN_reg[4]  = {&PINA, &PINB, &PINC, &PIND};


	/* GPIOx Pins APIs */
void GPIO_vSetPinDirection(uint8 copyPort, uint8 copyPin, uint8 copyDirection) {
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	00 d0       	rcall	.+0      	; 0xb12 <GPIO_vSetPinDirection+0x6>
     b12:	1f 92       	push	r1
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	89 83       	std	Y+1, r24	; 0x01
     b1a:	6a 83       	std	Y+2, r22	; 0x02
     b1c:	4b 83       	std	Y+3, r20	; 0x03
	switch(copyDirection){
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	88 2f       	mov	r24, r24
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	19 f0       	breq	.+6      	; 0xb2e <GPIO_vSetPinDirection+0x22>
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	31 f1       	breq	.+76     	; 0xb78 <GPIO_vSetPinDirection+0x6c>
		case Pin_Input:
			CLR_BIT(*(DDR_reg[copyPort]), copyPin);
			break;
		default:
			/* Nothing */
			break;
     b2c:	4b c0       	rjmp	.+150    	; 0xbc4 <GPIO_vSetPinDirection+0xb8>

	/* GPIOx Pins APIs */
void GPIO_vSetPinDirection(uint8 copyPort, uint8 copyPin, uint8 copyDirection) {
	switch(copyDirection){
		case Pin_Output:
			SET_BIT(*(DDR_reg[copyPort]), copyPin);
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	88 2f       	mov	r24, r24
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	80 5a       	subi	r24, 0xA0	; 160
     b3a:	9f 4f       	sbci	r25, 0xFF	; 255
     b3c:	fc 01       	movw	r30, r24
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	29 81       	ldd	r18, Y+1	; 0x01
     b44:	22 2f       	mov	r18, r18
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	22 0f       	add	r18, r18
     b4a:	33 1f       	adc	r19, r19
     b4c:	20 5a       	subi	r18, 0xA0	; 160
     b4e:	3f 4f       	sbci	r19, 0xFF	; 255
     b50:	f9 01       	movw	r30, r18
     b52:	20 81       	ld	r18, Z
     b54:	31 81       	ldd	r19, Z+1	; 0x01
     b56:	f9 01       	movw	r30, r18
     b58:	20 81       	ld	r18, Z
     b5a:	62 2f       	mov	r22, r18
     b5c:	2a 81       	ldd	r18, Y+2	; 0x02
     b5e:	42 2f       	mov	r20, r18
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	21 e0       	ldi	r18, 0x01	; 1
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <GPIO_vSetPinDirection+0x60>
     b68:	22 0f       	add	r18, r18
     b6a:	33 1f       	adc	r19, r19
     b6c:	4a 95       	dec	r20
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <GPIO_vSetPinDirection+0x5c>
     b70:	26 2b       	or	r18, r22
     b72:	fc 01       	movw	r30, r24
     b74:	20 83       	st	Z, r18
			break;
     b76:	26 c0       	rjmp	.+76     	; 0xbc4 <GPIO_vSetPinDirection+0xb8>
		case Pin_Input:
			CLR_BIT(*(DDR_reg[copyPort]), copyPin);
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	88 2f       	mov	r24, r24
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	80 5a       	subi	r24, 0xA0	; 160
     b84:	9f 4f       	sbci	r25, 0xFF	; 255
     b86:	fc 01       	movw	r30, r24
     b88:	80 81       	ld	r24, Z
     b8a:	91 81       	ldd	r25, Z+1	; 0x01
     b8c:	29 81       	ldd	r18, Y+1	; 0x01
     b8e:	22 2f       	mov	r18, r18
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	22 0f       	add	r18, r18
     b94:	33 1f       	adc	r19, r19
     b96:	20 5a       	subi	r18, 0xA0	; 160
     b98:	3f 4f       	sbci	r19, 0xFF	; 255
     b9a:	f9 01       	movw	r30, r18
     b9c:	20 81       	ld	r18, Z
     b9e:	31 81       	ldd	r19, Z+1	; 0x01
     ba0:	f9 01       	movw	r30, r18
     ba2:	20 81       	ld	r18, Z
     ba4:	62 2f       	mov	r22, r18
     ba6:	2a 81       	ldd	r18, Y+2	; 0x02
     ba8:	42 2f       	mov	r20, r18
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	21 e0       	ldi	r18, 0x01	; 1
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <GPIO_vSetPinDirection+0xaa>
     bb2:	22 0f       	add	r18, r18
     bb4:	33 1f       	adc	r19, r19
     bb6:	4a 95       	dec	r20
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <GPIO_vSetPinDirection+0xa6>
     bba:	20 95       	com	r18
     bbc:	26 23       	and	r18, r22
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18
			break;
     bc2:	00 00       	nop
		default:
			/* Nothing */
			break;
	}
}
     bc4:	00 00       	nop
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <GPIO_vSetPinValue>:

void GPIO_vSetPinValue(uint8 copyPort, uint8 copyPin, uint8 copyStatus) {
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <GPIO_vSetPinValue+0x6>
     bd8:	1f 92       	push	r1
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	6a 83       	std	Y+2, r22	; 0x02
     be2:	4b 83       	std	Y+3, r20	; 0x03
	switch(copyStatus){
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	91 05       	cpc	r25, r1
     bee:	39 f0       	breq	.+14     	; 0xbfe <GPIO_vSetPinValue+0x2c>
     bf0:	82 30       	cpi	r24, 0x02	; 2
     bf2:	91 05       	cpc	r25, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <GPIO_vSetPinValue+0x26>
     bf6:	4e c0       	rjmp	.+156    	; 0xc94 <GPIO_vSetPinValue+0xc2>
     bf8:	89 2b       	or	r24, r25
     bfa:	31 f1       	breq	.+76     	; 0xc48 <GPIO_vSetPinValue+0x76>
		case Pin_Toggle:
			TOGGLE_BIT(*(PORT_reg[copyPort]), copyPin);
			break;
		default:
			/* Nothing */
			break;
     bfc:	70 c0       	rjmp	.+224    	; 0xcde <GPIO_vSetPinValue+0x10c>
}

void GPIO_vSetPinValue(uint8 copyPort, uint8 copyPin, uint8 copyStatus) {
	switch(copyStatus){
		case Pin_High:
			SET_BIT(*(PORT_reg[copyPort]), copyPin);
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	88 59       	subi	r24, 0x98	; 152
     c0a:	9f 4f       	sbci	r25, 0xFF	; 255
     c0c:	fc 01       	movw	r30, r24
     c0e:	80 81       	ld	r24, Z
     c10:	91 81       	ldd	r25, Z+1	; 0x01
     c12:	29 81       	ldd	r18, Y+1	; 0x01
     c14:	22 2f       	mov	r18, r18
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	22 0f       	add	r18, r18
     c1a:	33 1f       	adc	r19, r19
     c1c:	28 59       	subi	r18, 0x98	; 152
     c1e:	3f 4f       	sbci	r19, 0xFF	; 255
     c20:	f9 01       	movw	r30, r18
     c22:	20 81       	ld	r18, Z
     c24:	31 81       	ldd	r19, Z+1	; 0x01
     c26:	f9 01       	movw	r30, r18
     c28:	20 81       	ld	r18, Z
     c2a:	62 2f       	mov	r22, r18
     c2c:	2a 81       	ldd	r18, Y+2	; 0x02
     c2e:	42 2f       	mov	r20, r18
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <GPIO_vSetPinValue+0x6a>
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	4a 95       	dec	r20
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <GPIO_vSetPinValue+0x66>
     c40:	26 2b       	or	r18, r22
     c42:	fc 01       	movw	r30, r24
     c44:	20 83       	st	Z, r18
			break;
     c46:	4b c0       	rjmp	.+150    	; 0xcde <GPIO_vSetPinValue+0x10c>
		case Pin_Low:
			CLR_BIT(*(PORT_reg[copyPort]), copyPin);
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	88 59       	subi	r24, 0x98	; 152
     c54:	9f 4f       	sbci	r25, 0xFF	; 255
     c56:	fc 01       	movw	r30, r24
     c58:	80 81       	ld	r24, Z
     c5a:	91 81       	ldd	r25, Z+1	; 0x01
     c5c:	29 81       	ldd	r18, Y+1	; 0x01
     c5e:	22 2f       	mov	r18, r18
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	22 0f       	add	r18, r18
     c64:	33 1f       	adc	r19, r19
     c66:	28 59       	subi	r18, 0x98	; 152
     c68:	3f 4f       	sbci	r19, 0xFF	; 255
     c6a:	f9 01       	movw	r30, r18
     c6c:	20 81       	ld	r18, Z
     c6e:	31 81       	ldd	r19, Z+1	; 0x01
     c70:	f9 01       	movw	r30, r18
     c72:	20 81       	ld	r18, Z
     c74:	62 2f       	mov	r22, r18
     c76:	2a 81       	ldd	r18, Y+2	; 0x02
     c78:	42 2f       	mov	r20, r18
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	21 e0       	ldi	r18, 0x01	; 1
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <GPIO_vSetPinValue+0xb4>
     c82:	22 0f       	add	r18, r18
     c84:	33 1f       	adc	r19, r19
     c86:	4a 95       	dec	r20
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <GPIO_vSetPinValue+0xb0>
     c8a:	20 95       	com	r18
     c8c:	26 23       	and	r18, r22
     c8e:	fc 01       	movw	r30, r24
     c90:	20 83       	st	Z, r18
			break;
     c92:	25 c0       	rjmp	.+74     	; 0xcde <GPIO_vSetPinValue+0x10c>
		case Pin_Toggle:
			TOGGLE_BIT(*(PORT_reg[copyPort]), copyPin);
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	88 59       	subi	r24, 0x98	; 152
     ca0:	9f 4f       	sbci	r25, 0xFF	; 255
     ca2:	fc 01       	movw	r30, r24
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	29 81       	ldd	r18, Y+1	; 0x01
     caa:	22 2f       	mov	r18, r18
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	22 0f       	add	r18, r18
     cb0:	33 1f       	adc	r19, r19
     cb2:	28 59       	subi	r18, 0x98	; 152
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	f9 01       	movw	r30, r18
     cb8:	20 81       	ld	r18, Z
     cba:	31 81       	ldd	r19, Z+1	; 0x01
     cbc:	f9 01       	movw	r30, r18
     cbe:	20 81       	ld	r18, Z
     cc0:	62 2f       	mov	r22, r18
     cc2:	2a 81       	ldd	r18, Y+2	; 0x02
     cc4:	42 2f       	mov	r20, r18
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	21 e0       	ldi	r18, 0x01	; 1
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <GPIO_vSetPinValue+0x100>
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	4a 95       	dec	r20
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <GPIO_vSetPinValue+0xfc>
     cd6:	26 27       	eor	r18, r22
     cd8:	fc 01       	movw	r30, r24
     cda:	20 83       	st	Z, r18
			break;
     cdc:	00 00       	nop
		default:
			/* Nothing */
			break;
	}
}
     cde:	00 00       	nop
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <GPIO_u8GetPinValue>:

uint8 GPIO_u8GetPinValue(uint8 copyPort, uint8 copyPin) {
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <GPIO_u8GetPinValue+0x6>
     cf2:	1f 92       	push	r1
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	8a 83       	std	Y+2, r24	; 0x02
     cfa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 retVal = 0;
     cfc:	19 82       	std	Y+1, r1	; 0x01
	retVal = GET_BIT(*(PIN_reg[copyPort]), copyPin);
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	80 59       	subi	r24, 0x90	; 144
     d0a:	9f 4f       	sbci	r25, 0xFF	; 255
     d0c:	fc 01       	movw	r30, r24
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	fc 01       	movw	r30, r24
     d14:	80 81       	ld	r24, Z
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	2b 81       	ldd	r18, Y+3	; 0x03
     d1c:	22 2f       	mov	r18, r18
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <GPIO_u8GetPinValue+0x3a>
     d22:	95 95       	asr	r25
     d24:	87 95       	ror	r24
     d26:	2a 95       	dec	r18
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <GPIO_u8GetPinValue+0x36>
     d2a:	81 70       	andi	r24, 0x01	; 1
     d2c:	89 83       	std	Y+1, r24	; 0x01
	return retVal;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <GPIO_vSetPortDirection>:


	/* GPIOx Ports APIs */
void GPIO_vSetPortDirection(uint8 copyPort, uint8 copyDirection) {
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	00 d0       	rcall	.+0      	; 0xd42 <GPIO_vSetPortDirection+0x6>
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	6a 83       	std	Y+2, r22	; 0x02
	*DDR_reg[copyPort] = copyDirection;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	80 5a       	subi	r24, 0xA0	; 160
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	fc 01       	movw	r30, r24
     d5a:	80 81       	ld	r24, Z
     d5c:	91 81       	ldd	r25, Z+1	; 0x01
     d5e:	2a 81       	ldd	r18, Y+2	; 0x02
     d60:	fc 01       	movw	r30, r24
     d62:	20 83       	st	Z, r18
}
     d64:	00 00       	nop
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <GPIO_vSetPortValue>:

void GPIO_vSetPortValue(uint8 copyPort, uint8 copyStatus) {
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	00 d0       	rcall	.+0      	; 0xd76 <GPIO_vSetPortValue+0x6>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	6a 83       	std	Y+2, r22	; 0x02
	*PORT_reg[copyPort] = copyStatus;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 59       	subi	r24, 0x98	; 152
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	fc 01       	movw	r30, r24
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	2a 81       	ldd	r18, Y+2	; 0x02
     d94:	fc 01       	movw	r30, r24
     d96:	20 83       	st	Z, r18
}
     d98:	00 00       	nop
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <GPIO_u8GetPortValue>:

uint8 GPIO_u8GetPortValue(uint8 copyPort) {
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	00 d0       	rcall	.+0      	; 0xdaa <GPIO_u8GetPortValue+0x6>
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 retVal = 0;
     db0:	19 82       	std	Y+1, r1	; 0x01
	retVal = *PIN_reg[copyPort];
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	80 59       	subi	r24, 0x90	; 144
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	fc 01       	movw	r30, r24
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	fc 01       	movw	r30, r24
     dc8:	80 81       	ld	r24, Z
     dca:	89 83       	std	Y+1, r24	; 0x01
	return retVal;
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
}
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <ADC_vidInit>:
 *  Created on: Jan 7, 2025
 *      Author: s
 */
#include "ADC_init.h"

void ADC_vidInit(){
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
#if ADC_VOLT == ADC_AREF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);
#elif ADC_VOLT == ADC_AVCC
	SET_BIT(ADMUX,ADMUX_REFS0);
     de0:	87 e2       	ldi	r24, 0x27	; 39
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	27 e2       	ldi	r18, 0x27	; 39
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	f9 01       	movw	r30, r18
     dea:	20 81       	ld	r18, Z
     dec:	20 64       	ori	r18, 0x40	; 64
     dee:	fc 01       	movw	r30, r24
     df0:	20 83       	st	Z, r18
	CLR_BIT(ADMUX,ADMUX_REFS1);
     df2:	87 e2       	ldi	r24, 0x27	; 39
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	27 e2       	ldi	r18, 0x27	; 39
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	f9 01       	movw	r30, r18
     dfc:	20 81       	ld	r18, Z
     dfe:	2f 77       	andi	r18, 0x7F	; 127
     e00:	fc 01       	movw	r30, r24
     e02:	20 83       	st	Z, r18
#elif ADC_VOLT == ADC_INTERNAL
	SET_BIT(ADMUX,ADMUX_REFS0);
	SET_BIT(ADMUX,ADMUX_REFS1);
#endif
//	CLEAR(ADMUX,ADLAR);   // RIGHT
	SET_BIT(ADCSRA,ADCSRA_ADEN);  // Enable Pin
     e04:	86 e2       	ldi	r24, 0x26	; 38
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	26 e2       	ldi	r18, 0x26	; 38
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	f9 01       	movw	r30, r18
     e0e:	20 81       	ld	r18, Z
     e10:	20 68       	ori	r18, 0x80	; 128
     e12:	fc 01       	movw	r30, r24
     e14:	20 83       	st	Z, r18
	ADCSRA |= ADC_PRESCALER; //Prescaler
     e16:	86 e2       	ldi	r24, 0x26	; 38
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	26 e2       	ldi	r18, 0x26	; 38
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	f9 01       	movw	r30, r18
     e20:	20 81       	ld	r18, Z
     e22:	27 60       	ori	r18, 0x07	; 7
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18
}
     e28:	00 00       	nop
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <ADC_u16ReadDigitalVal>:

uint16 ADC_u16ReadDigitalVal(ADC_CHANNEL ChannelCopy){
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	00 d0       	rcall	.+0      	; 0xe36 <ADC_u16ReadDigitalVal+0x6>
     e36:	1f 92       	push	r1
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Res=0;
     e3e:	1a 82       	std	Y+2, r1	; 0x02
     e40:	19 82       	std	Y+1, r1	; 0x01
	ADMUX &= ADC_CLEAR_MASK;
     e42:	87 e2       	ldi	r24, 0x27	; 39
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	27 e2       	ldi	r18, 0x27	; 39
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	f9 01       	movw	r30, r18
     e4c:	20 81       	ld	r18, Z
     e4e:	20 7e       	andi	r18, 0xE0	; 224
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
	ADMUX |= ChannelCopy;
     e54:	87 e2       	ldi	r24, 0x27	; 39
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	27 e2       	ldi	r18, 0x27	; 39
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	f9 01       	movw	r30, r18
     e5e:	30 81       	ld	r19, Z
     e60:	2b 81       	ldd	r18, Y+3	; 0x03
     e62:	23 2b       	or	r18, r19
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     e68:	86 e2       	ldi	r24, 0x26	; 38
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	26 e2       	ldi	r18, 0x26	; 38
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	f9 01       	movw	r30, r18
     e72:	20 81       	ld	r18, Z
     e74:	20 64       	ori	r18, 0x40	; 64
     e76:	fc 01       	movw	r30, r24
     e78:	20 83       	st	Z, r18
	while((GET_BIT(ADCSRA,ADCSRA_ADSC)));
     e7a:	00 00       	nop
     e7c:	86 e2       	ldi	r24, 0x26	; 38
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	fc 01       	movw	r30, r24
     e82:	80 81       	ld	r24, Z
     e84:	82 95       	swap	r24
     e86:	86 95       	lsr	r24
     e88:	86 95       	lsr	r24
     e8a:	83 70       	andi	r24, 0x03	; 3
     e8c:	88 2f       	mov	r24, r24
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	81 70       	andi	r24, 0x01	; 1
     e92:	99 27       	eor	r25, r25
     e94:	89 2b       	or	r24, r25
     e96:	91 f7       	brne	.-28     	; 0xe7c <ADC_u16ReadDigitalVal+0x4c>
	Res = ADCL;
     e98:	84 e2       	ldi	r24, 0x24	; 36
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	fc 01       	movw	r30, r24
     e9e:	80 81       	ld	r24, Z
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
	Res |= (ADCH << 8);
     ea8:	85 e2       	ldi	r24, 0x25	; 37
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	fc 01       	movw	r30, r24
     eae:	80 81       	ld	r24, Z
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	98 2f       	mov	r25, r24
     eb6:	88 27       	eor	r24, r24
     eb8:	9c 01       	movw	r18, r24
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	82 2b       	or	r24, r18
     ec0:	93 2b       	or	r25, r19
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
	return Res;
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <ADC_vidEnable>:


void ADC_vidEnable(){
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     ede:	86 e2       	ldi	r24, 0x26	; 38
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	26 e2       	ldi	r18, 0x26	; 38
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	f9 01       	movw	r30, r18
     ee8:	20 81       	ld	r18, Z
     eea:	20 68       	ori	r18, 0x80	; 128
     eec:	fc 01       	movw	r30, r24
     eee:	20 83       	st	Z, r18
}
     ef0:	00 00       	nop
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	08 95       	ret

00000ef8 <ADC_vidDisable>:
void ADC_vidDisable(){
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
     f00:	86 e2       	ldi	r24, 0x26	; 38
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	26 e2       	ldi	r18, 0x26	; 38
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	f9 01       	movw	r30, r18
     f0a:	20 81       	ld	r18, Z
     f0c:	2f 77       	andi	r18, 0x7F	; 127
     f0e:	fc 01       	movw	r30, r24
     f10:	20 83       	st	Z, r18
}
     f12:	00 00       	nop
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <ADC_vidInterruptEnable>:

void ADC_vidInterruptEnable(){
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     f22:	8f e5       	ldi	r24, 0x5F	; 95
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	2f e5       	ldi	r18, 0x5F	; 95
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	f9 01       	movw	r30, r18
     f2c:	20 81       	ld	r18, Z
     f2e:	20 68       	ori	r18, 0x80	; 128
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADCSRA_ADIE);
     f34:	86 e2       	ldi	r24, 0x26	; 38
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	26 e2       	ldi	r18, 0x26	; 38
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	f9 01       	movw	r30, r18
     f3e:	20 81       	ld	r18, Z
     f40:	28 60       	ori	r18, 0x08	; 8
     f42:	fc 01       	movw	r30, r24
     f44:	20 83       	st	Z, r18
}
     f46:	00 00       	nop
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <ADC_vidClrFlag>:
void ADC_vidClrFlag(){
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     f56:	86 e2       	ldi	r24, 0x26	; 38
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	26 e2       	ldi	r18, 0x26	; 38
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	f9 01       	movw	r30, r18
     f60:	20 81       	ld	r18, Z
     f62:	20 61       	ori	r18, 0x10	; 16
     f64:	fc 01       	movw	r30, r24
     f66:	20 83       	st	Z, r18
}
     f68:	00 00       	nop
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <ADC_vidInterruptDisable>:
void ADC_vidInterruptDisable(){
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f78:	86 e2       	ldi	r24, 0x26	; 38
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	26 e2       	ldi	r18, 0x26	; 38
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	f9 01       	movw	r30, r18
     f82:	20 81       	ld	r18, Z
     f84:	27 7f       	andi	r18, 0xF7	; 247
     f86:	fc 01       	movw	r30, r24
     f88:	20 83       	st	Z, r18
}
     f8a:	00 00       	nop
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <Ultrasonic_init>:
static volatile uint16 g_rising_time = 0;
static volatile uint16 g_falling_time = 0;
static volatile uint8 g_edge_flag = 0;

// ------------------- INIT -------------------
void Ultrasonic_init(void) {
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
	GPIO_vSetPinDirection(Port_D, Pin_7, Pin_Output); // Trigger pin
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	67 e0       	ldi	r22, 0x07	; 7
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
	GPIO_vSetPinDirection(Port_D, Pin_6, Pin_Input); // Echo pin
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	66 e0       	ldi	r22, 0x06	; 6
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>

	TIMER1_vidINCAPRissing();         // Start with rising edge
     fae:	0e 94 f5 01 	call	0x3ea	; 0x3ea <TIMER1_vidINCAPRissing>
	TIMER1_vidInit();                 // Use NORMAL mode (set in config)
     fb2:	0e 94 c3 01 	call	0x386	; 0x386 <TIMER1_vidInit>
	TIMER1_vidCAPInterruptEnable();   // Enable ICU interrupt
     fb6:	0e 94 82 02 	call	0x504	; 0x504 <TIMER1_vidCAPInterruptEnable>
	TIMER1_vidStart();                // Start Timer1
     fba:	0e 94 12 02 	call	0x424	; 0x424 <TIMER1_vidStart>

	ICU_setCallBack(Ultrasonic_edgeProcessing);
     fbe:	8c e4       	ldi	r24, 0x4C	; 76
     fc0:	9a e0       	ldi	r25, 0x0A	; 10
     fc2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <ICU_setCallBack>
}
     fc6:	00 00       	nop
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <Ultrasonic_Trigger>:

// ------------------- TRIGGER -------------------
void Ultrasonic_Trigger(void) {
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	a0 97       	sbiw	r28, 0x20	; 32
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
	GPIO_vSetPinValue(Port_D, Pin_7, Pin_High);  // Trigger = High
     fe2:	41 e0       	ldi	r20, 0x01	; 1
     fe4:	67 e0       	ldi	r22, 0x07	; 7
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	a0 e2       	ldi	r26, 0x20	; 32
     ff2:	b1 e4       	ldi	r27, 0x41	; 65
     ff4:	89 83       	std	Y+1, r24	; 0x01
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	ab 83       	std	Y+3, r26	; 0x03
     ffa:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     ffc:	2b ea       	ldi	r18, 0xAB	; 171
     ffe:	3a ea       	ldi	r19, 0xAA	; 170
    1000:	4a ea       	ldi	r20, 0xAA	; 170
    1002:	5e e3       	ldi	r21, 0x3E	; 62
    1004:	69 81       	ldd	r22, Y+1	; 0x01
    1006:	7a 81       	ldd	r23, Y+2	; 0x02
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	8d 83       	std	Y+5, r24	; 0x05
    1016:	9e 83       	std	Y+6, r25	; 0x06
    1018:	af 83       	std	Y+7, r26	; 0x07
    101a:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e8       	ldi	r20, 0x80	; 128
    1022:	5e e3       	ldi	r21, 0x3E	; 62
    1024:	69 81       	ldd	r22, Y+1	; 0x01
    1026:	7a 81       	ldd	r23, Y+2	; 0x02
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	89 87       	std	Y+9, r24	; 0x09
    1036:	9a 87       	std	Y+10, r25	; 0x0a
    1038:	ab 87       	std	Y+11, r26	; 0x0b
    103a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	5f e3       	ldi	r21, 0x3F	; 63
    1044:	6d 81       	ldd	r22, Y+5	; 0x05
    1046:	7e 81       	ldd	r23, Y+6	; 0x06
    1048:	8f 81       	ldd	r24, Y+7	; 0x07
    104a:	98 85       	ldd	r25, Y+8	; 0x08
    104c:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    1050:	88 23       	and	r24, r24
    1052:	1c f4       	brge	.+6      	; 0x105a <Ultrasonic_Trigger+0x8c>
		__ticks = 1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	8d 87       	std	Y+13, r24	; 0x0d
    1058:	b2 c0       	rjmp	.+356    	; 0x11be <Ultrasonic_Trigger+0x1f0>
	else if (__tmp2 > 65535)
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	3f ef       	ldi	r19, 0xFF	; 255
    105e:	4f e7       	ldi	r20, 0x7F	; 127
    1060:	57 e4       	ldi	r21, 0x47	; 71
    1062:	69 85       	ldd	r22, Y+9	; 0x09
    1064:	7a 85       	ldd	r23, Y+10	; 0x0a
    1066:	8b 85       	ldd	r24, Y+11	; 0x0b
    1068:	9c 85       	ldd	r25, Y+12	; 0x0c
    106a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    106e:	18 16       	cp	r1, r24
    1070:	0c f0       	brlt	.+2      	; 0x1074 <Ultrasonic_Trigger+0xa6>
    1072:	7b c0       	rjmp	.+246    	; 0x116a <Ultrasonic_Trigger+0x19c>
	{
		_delay_ms(__us / 1000.0);
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4a e7       	ldi	r20, 0x7A	; 122
    107a:	54 e4       	ldi	r21, 0x44	; 68
    107c:	69 81       	ldd	r22, Y+1	; 0x01
    107e:	7a 81       	ldd	r23, Y+2	; 0x02
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__divsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	8e 87       	std	Y+14, r24	; 0x0e
    108e:	9f 87       	std	Y+15, r25	; 0x0f
    1090:	a8 8b       	std	Y+16, r26	; 0x10
    1092:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	4a e7       	ldi	r20, 0x7A	; 122
    109a:	53 e4       	ldi	r21, 0x43	; 67
    109c:	6e 85       	ldd	r22, Y+14	; 0x0e
    109e:	7f 85       	ldd	r23, Y+15	; 0x0f
    10a0:	88 89       	ldd	r24, Y+16	; 0x10
    10a2:	99 89       	ldd	r25, Y+17	; 0x11
    10a4:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	8a 8b       	std	Y+18, r24	; 0x12
    10ae:	9b 8b       	std	Y+19, r25	; 0x13
    10b0:	ac 8b       	std	Y+20, r26	; 0x14
    10b2:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	5f e3       	ldi	r21, 0x3F	; 63
    10bc:	6a 89       	ldd	r22, Y+18	; 0x12
    10be:	7b 89       	ldd	r23, Y+19	; 0x13
    10c0:	8c 89       	ldd	r24, Y+20	; 0x14
    10c2:	9d 89       	ldd	r25, Y+21	; 0x15
    10c4:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <Ultrasonic_Trigger+0x108>
		__ticks = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9f 8b       	std	Y+23, r25	; 0x17
    10d2:	8e 8b       	std	Y+22, r24	; 0x16
    10d4:	3f c0       	rjmp	.+126    	; 0x1154 <Ultrasonic_Trigger+0x186>
	else if (__tmp > 65535)
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	3f ef       	ldi	r19, 0xFF	; 255
    10da:	4f e7       	ldi	r20, 0x7F	; 127
    10dc:	57 e4       	ldi	r21, 0x47	; 71
    10de:	6a 89       	ldd	r22, Y+18	; 0x12
    10e0:	7b 89       	ldd	r23, Y+19	; 0x13
    10e2:	8c 89       	ldd	r24, Y+20	; 0x14
    10e4:	9d 89       	ldd	r25, Y+21	; 0x15
    10e6:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    10ea:	18 16       	cp	r1, r24
    10ec:	4c f5       	brge	.+82     	; 0x1140 <Ultrasonic_Trigger+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e2       	ldi	r20, 0x20	; 32
    10f4:	51 e4       	ldi	r21, 0x41	; 65
    10f6:	6e 85       	ldd	r22, Y+14	; 0x0e
    10f8:	7f 85       	ldd	r23, Y+15	; 0x0f
    10fa:	88 89       	ldd	r24, Y+16	; 0x10
    10fc:	99 89       	ldd	r25, Y+17	; 0x11
    10fe:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	9f 8b       	std	Y+23, r25	; 0x17
    1114:	8e 8b       	std	Y+22, r24	; 0x16
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <Ultrasonic_Trigger+0x168>
    1118:	89 e1       	ldi	r24, 0x19	; 25
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	99 8f       	std	Y+25, r25	; 0x19
    111e:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1120:	88 8d       	ldd	r24, Y+24	; 0x18
    1122:	99 8d       	ldd	r25, Y+25	; 0x19
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <Ultrasonic_Trigger+0x156>
    1128:	99 8f       	std	Y+25, r25	; 0x19
    112a:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112c:	8e 89       	ldd	r24, Y+22	; 0x16
    112e:	9f 89       	ldd	r25, Y+23	; 0x17
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	9f 8b       	std	Y+23, r25	; 0x17
    1134:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1136:	8e 89       	ldd	r24, Y+22	; 0x16
    1138:	9f 89       	ldd	r25, Y+23	; 0x17
    113a:	89 2b       	or	r24, r25
    113c:	69 f7       	brne	.-38     	; 0x1118 <Ultrasonic_Trigger+0x14a>
    113e:	3f c0       	rjmp	.+126    	; 0x11be <Ultrasonic_Trigger+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1140:	6a 89       	ldd	r22, Y+18	; 0x12
    1142:	7b 89       	ldd	r23, Y+19	; 0x13
    1144:	8c 89       	ldd	r24, Y+20	; 0x14
    1146:	9d 89       	ldd	r25, Y+21	; 0x15
    1148:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9f 8b       	std	Y+23, r25	; 0x17
    1152:	8e 8b       	std	Y+22, r24	; 0x16
    1154:	8e 89       	ldd	r24, Y+22	; 0x16
    1156:	9f 89       	ldd	r25, Y+23	; 0x17
    1158:	9b 8f       	std	Y+27, r25	; 0x1b
    115a:	8a 8f       	std	Y+26, r24	; 0x1a
    115c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    115e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <Ultrasonic_Trigger+0x192>
    1164:	9b 8f       	std	Y+27, r25	; 0x1b
    1166:	8a 8f       	std	Y+26, r24	; 0x1a
    1168:	2a c0       	rjmp	.+84     	; 0x11be <Ultrasonic_Trigger+0x1f0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	4f e7       	ldi	r20, 0x7F	; 127
    1170:	53 e4       	ldi	r21, 0x43	; 67
    1172:	6d 81       	ldd	r22, Y+5	; 0x05
    1174:	7e 81       	ldd	r23, Y+6	; 0x06
    1176:	8f 81       	ldd	r24, Y+7	; 0x07
    1178:	98 85       	ldd	r25, Y+8	; 0x08
    117a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    117e:	18 16       	cp	r1, r24
    1180:	ac f4       	brge	.+42     	; 0x11ac <Ultrasonic_Trigger+0x1de>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1182:	69 85       	ldd	r22, Y+9	; 0x09
    1184:	7a 85       	ldd	r23, Y+10	; 0x0a
    1186:	8b 85       	ldd	r24, Y+11	; 0x0b
    1188:	9c 85       	ldd	r25, Y+12	; 0x0c
    118a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9d 8f       	std	Y+29, r25	; 0x1d
    1194:	8c 8f       	std	Y+28, r24	; 0x1c
    1196:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1198:	9d 8d       	ldd	r25, Y+29	; 0x1d
    119a:	9f 8f       	std	Y+31, r25	; 0x1f
    119c:	8e 8f       	std	Y+30, r24	; 0x1e
    119e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <Ultrasonic_Trigger+0x1d4>
    11a6:	9f 8f       	std	Y+31, r25	; 0x1f
    11a8:	8e 8f       	std	Y+30, r24	; 0x1e
    11aa:	0f c0       	rjmp	.+30     	; 0x11ca <Ultrasonic_Trigger+0x1fc>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11ac:	6d 81       	ldd	r22, Y+5	; 0x05
    11ae:	7e 81       	ldd	r23, Y+6	; 0x06
    11b0:	8f 81       	ldd	r24, Y+7	; 0x07
    11b2:	98 85       	ldd	r25, Y+8	; 0x08
    11b4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	8d 87       	std	Y+13, r24	; 0x0d
    11be:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c0:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11c2:	88 a1       	ldd	r24, Y+32	; 0x20
    11c4:	8a 95       	dec	r24
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <Ultrasonic_Trigger+0x1f6>
    11c8:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(10);                               // 10 microseconds
	GPIO_vSetPinValue(Port_D, Pin_7, Pin_Low);   // Trigger = Low
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	67 e0       	ldi	r22, 0x07	; 7
    11ce:	83 e0       	ldi	r24, 0x03	; 3
    11d0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
}
    11d4:	00 00       	nop
    11d6:	a0 96       	adiw	r28, 0x20	; 32
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <Ultrasonic_readDistance>:

// ------------------- READ DISTANCE -------------------
uint16 Ultrasonic_readDistance(void) {
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	a6 97       	sbiw	r28, 0x26	; 38
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
//	uint16 distance_cm = (uint16)(time * 0.0272);  // Approx. for F_CPU=8MHz, Prescaler=8
//
//	return distance_cm;

	// unit testing
	Ultrasonic_Trigger();
    11fc:	0e 94 e7 07 	call	0xfce	; 0xfce <Ultrasonic_Trigger>

	uint32 timeout = 50000;
    1200:	80 e5       	ldi	r24, 0x50	; 80
    1202:	93 ec       	ldi	r25, 0xC3	; 195
    1204:	a0 e0       	ldi	r26, 0x00	; 0
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	ab 83       	std	Y+3, r26	; 0x03
    120e:	bc 83       	std	Y+4, r27	; 0x04
	while (g_edge_flag != 0 && timeout--) {
    1210:	ef c0       	rjmp	.+478    	; 0x13f0 <Ultrasonic_readDistance+0x208>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a0 e8       	ldi	r26, 0x80	; 128
    1218:	bf e3       	ldi	r27, 0x3F	; 63
    121a:	8f 83       	std	Y+7, r24	; 0x07
    121c:	98 87       	std	Y+8, r25	; 0x08
    121e:	a9 87       	std	Y+9, r26	; 0x09
    1220:	ba 87       	std	Y+10, r27	; 0x0a
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1222:	2b ea       	ldi	r18, 0xAB	; 171
    1224:	3a ea       	ldi	r19, 0xAA	; 170
    1226:	4a ea       	ldi	r20, 0xAA	; 170
    1228:	5e e3       	ldi	r21, 0x3E	; 62
    122a:	6f 81       	ldd	r22, Y+7	; 0x07
    122c:	78 85       	ldd	r23, Y+8	; 0x08
    122e:	89 85       	ldd	r24, Y+9	; 0x09
    1230:	9a 85       	ldd	r25, Y+10	; 0x0a
    1232:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	8b 87       	std	Y+11, r24	; 0x0b
    123c:	9c 87       	std	Y+12, r25	; 0x0c
    123e:	ad 87       	std	Y+13, r26	; 0x0d
    1240:	be 87       	std	Y+14, r27	; 0x0e
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5e e3       	ldi	r21, 0x3E	; 62
    124a:	6f 81       	ldd	r22, Y+7	; 0x07
    124c:	78 85       	ldd	r23, Y+8	; 0x08
    124e:	89 85       	ldd	r24, Y+9	; 0x09
    1250:	9a 85       	ldd	r25, Y+10	; 0x0a
    1252:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	8f 87       	std	Y+15, r24	; 0x0f
    125c:	98 8b       	std	Y+16, r25	; 0x10
    125e:	a9 8b       	std	Y+17, r26	; 0x11
    1260:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	6b 85       	ldd	r22, Y+11	; 0x0b
    126c:	7c 85       	ldd	r23, Y+12	; 0x0c
    126e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1270:	9e 85       	ldd	r25, Y+14	; 0x0e
    1272:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    1276:	88 23       	and	r24, r24
    1278:	1c f4       	brge	.+6      	; 0x1280 <Ultrasonic_readDistance+0x98>
		__ticks = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	8b 8b       	std	Y+19, r24	; 0x13
    127e:	b2 c0       	rjmp	.+356    	; 0x13e4 <Ultrasonic_readDistance+0x1fc>
	else if (__tmp2 > 65535)
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	3f ef       	ldi	r19, 0xFF	; 255
    1284:	4f e7       	ldi	r20, 0x7F	; 127
    1286:	57 e4       	ldi	r21, 0x47	; 71
    1288:	6f 85       	ldd	r22, Y+15	; 0x0f
    128a:	78 89       	ldd	r23, Y+16	; 0x10
    128c:	89 89       	ldd	r24, Y+17	; 0x11
    128e:	9a 89       	ldd	r25, Y+18	; 0x12
    1290:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    1294:	18 16       	cp	r1, r24
    1296:	0c f0       	brlt	.+2      	; 0x129a <Ultrasonic_readDistance+0xb2>
    1298:	7b c0       	rjmp	.+246    	; 0x1390 <Ultrasonic_readDistance+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	4a e7       	ldi	r20, 0x7A	; 122
    12a0:	54 e4       	ldi	r21, 0x44	; 68
    12a2:	6f 81       	ldd	r22, Y+7	; 0x07
    12a4:	78 85       	ldd	r23, Y+8	; 0x08
    12a6:	89 85       	ldd	r24, Y+9	; 0x09
    12a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12aa:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__divsf3>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	8c 8b       	std	Y+20, r24	; 0x14
    12b4:	9d 8b       	std	Y+21, r25	; 0x15
    12b6:	ae 8b       	std	Y+22, r26	; 0x16
    12b8:	bf 8b       	std	Y+23, r27	; 0x17

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	4a e7       	ldi	r20, 0x7A	; 122
    12c0:	53 e4       	ldi	r21, 0x43	; 67
    12c2:	6c 89       	ldd	r22, Y+20	; 0x14
    12c4:	7d 89       	ldd	r23, Y+21	; 0x15
    12c6:	8e 89       	ldd	r24, Y+22	; 0x16
    12c8:	9f 89       	ldd	r25, Y+23	; 0x17
    12ca:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	88 8f       	std	Y+24, r24	; 0x18
    12d4:	99 8f       	std	Y+25, r25	; 0x19
    12d6:	aa 8f       	std	Y+26, r26	; 0x1a
    12d8:	bb 8f       	std	Y+27, r27	; 0x1b
	if (__tmp < 1.0)
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e8       	ldi	r20, 0x80	; 128
    12e0:	5f e3       	ldi	r21, 0x3F	; 63
    12e2:	68 8d       	ldd	r22, Y+24	; 0x18
    12e4:	79 8d       	ldd	r23, Y+25	; 0x19
    12e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12ea:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    12ee:	88 23       	and	r24, r24
    12f0:	2c f4       	brge	.+10     	; 0x12fc <Ultrasonic_readDistance+0x114>
		__ticks = 1;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9d 8f       	std	Y+29, r25	; 0x1d
    12f8:	8c 8f       	std	Y+28, r24	; 0x1c
    12fa:	3f c0       	rjmp	.+126    	; 0x137a <Ultrasonic_readDistance+0x192>
	else if (__tmp > 65535)
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	3f ef       	ldi	r19, 0xFF	; 255
    1300:	4f e7       	ldi	r20, 0x7F	; 127
    1302:	57 e4       	ldi	r21, 0x47	; 71
    1304:	68 8d       	ldd	r22, Y+24	; 0x18
    1306:	79 8d       	ldd	r23, Y+25	; 0x19
    1308:	8a 8d       	ldd	r24, Y+26	; 0x1a
    130a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    130c:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    1310:	18 16       	cp	r1, r24
    1312:	4c f5       	brge	.+82     	; 0x1366 <Ultrasonic_readDistance+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e2       	ldi	r20, 0x20	; 32
    131a:	51 e4       	ldi	r21, 0x41	; 65
    131c:	6c 89       	ldd	r22, Y+20	; 0x14
    131e:	7d 89       	ldd	r23, Y+21	; 0x15
    1320:	8e 89       	ldd	r24, Y+22	; 0x16
    1322:	9f 89       	ldd	r25, Y+23	; 0x17
    1324:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9d 8f       	std	Y+29, r25	; 0x1d
    133a:	8c 8f       	std	Y+28, r24	; 0x1c
    133c:	0f c0       	rjmp	.+30     	; 0x135c <Ultrasonic_readDistance+0x174>
    133e:	89 e1       	ldi	r24, 0x19	; 25
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9f 8f       	std	Y+31, r25	; 0x1f
    1344:	8e 8f       	std	Y+30, r24	; 0x1e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1346:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1348:	9f 8d       	ldd	r25, Y+31	; 0x1f
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <Ultrasonic_readDistance+0x162>
    134e:	9f 8f       	std	Y+31, r25	; 0x1f
    1350:	8e 8f       	std	Y+30, r24	; 0x1e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1352:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1354:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	9d 8f       	std	Y+29, r25	; 0x1d
    135a:	8c 8f       	std	Y+28, r24	; 0x1c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    135e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1360:	89 2b       	or	r24, r25
    1362:	69 f7       	brne	.-38     	; 0x133e <Ultrasonic_readDistance+0x156>
    1364:	3f c0       	rjmp	.+126    	; 0x13e4 <Ultrasonic_readDistance+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1366:	68 8d       	ldd	r22, Y+24	; 0x18
    1368:	79 8d       	ldd	r23, Y+25	; 0x19
    136a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    136c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    136e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9d 8f       	std	Y+29, r25	; 0x1d
    1378:	8c 8f       	std	Y+28, r24	; 0x1c
    137a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    137c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    137e:	99 a3       	std	Y+33, r25	; 0x21
    1380:	88 a3       	std	Y+32, r24	; 0x20
    1382:	88 a1       	ldd	r24, Y+32	; 0x20
    1384:	99 a1       	ldd	r25, Y+33	; 0x21
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <Ultrasonic_readDistance+0x19e>
    138a:	99 a3       	std	Y+33, r25	; 0x21
    138c:	88 a3       	std	Y+32, r24	; 0x20
    138e:	2a c0       	rjmp	.+84     	; 0x13e4 <Ultrasonic_readDistance+0x1fc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	4f e7       	ldi	r20, 0x7F	; 127
    1396:	53 e4       	ldi	r21, 0x43	; 67
    1398:	6b 85       	ldd	r22, Y+11	; 0x0b
    139a:	7c 85       	ldd	r23, Y+12	; 0x0c
    139c:	8d 85       	ldd	r24, Y+13	; 0x0d
    139e:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a0:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    13a4:	18 16       	cp	r1, r24
    13a6:	ac f4       	brge	.+42     	; 0x13d2 <Ultrasonic_readDistance+0x1ea>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    13a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    13aa:	78 89       	ldd	r23, Y+16	; 0x10
    13ac:	89 89       	ldd	r24, Y+17	; 0x11
    13ae:	9a 89       	ldd	r25, Y+18	; 0x12
    13b0:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	9b a3       	std	Y+35, r25	; 0x23
    13ba:	8a a3       	std	Y+34, r24	; 0x22
    13bc:	8a a1       	ldd	r24, Y+34	; 0x22
    13be:	9b a1       	ldd	r25, Y+35	; 0x23
    13c0:	9d a3       	std	Y+37, r25	; 0x25
    13c2:	8c a3       	std	Y+36, r24	; 0x24
    13c4:	8c a1       	ldd	r24, Y+36	; 0x24
    13c6:	9d a1       	ldd	r25, Y+37	; 0x25
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <Ultrasonic_readDistance+0x1e0>
    13cc:	9d a3       	std	Y+37, r25	; 0x25
    13ce:	8c a3       	std	Y+36, r24	; 0x24
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <Ultrasonic_readDistance+0x208>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	8b 8b       	std	Y+19, r24	; 0x13
    13e4:	8b 89       	ldd	r24, Y+19	; 0x13
    13e6:	8e a3       	std	Y+38, r24	; 0x26
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13e8:	8e a1       	ldd	r24, Y+38	; 0x26
    13ea:	8a 95       	dec	r24
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <Ultrasonic_readDistance+0x202>
    13ee:	8e a3       	std	Y+38, r24	; 0x26
    13f0:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <g_edge_flag>
    13f4:	88 23       	and	r24, r24
    13f6:	99 f0       	breq	.+38     	; 0x141e <Ultrasonic_readDistance+0x236>
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	ab 81       	ldd	r26, Y+3	; 0x03
    13fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1400:	9c 01       	movw	r18, r24
    1402:	ad 01       	movw	r20, r26
    1404:	21 50       	subi	r18, 0x01	; 1
    1406:	31 09       	sbc	r19, r1
    1408:	41 09       	sbc	r20, r1
    140a:	51 09       	sbc	r21, r1
    140c:	29 83       	std	Y+1, r18	; 0x01
    140e:	3a 83       	std	Y+2, r19	; 0x02
    1410:	4b 83       	std	Y+3, r20	; 0x03
    1412:	5c 83       	std	Y+4, r21	; 0x04
    1414:	89 2b       	or	r24, r25
    1416:	8a 2b       	or	r24, r26
    1418:	8b 2b       	or	r24, r27
    141a:	09 f0       	breq	.+2      	; 0x141e <Ultrasonic_readDistance+0x236>
    141c:	fa ce       	rjmp	.-524    	; 0x1212 <Ultrasonic_readDistance+0x2a>
		_delay_us(1);
	}

	if (timeout == 0) {
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	ab 81       	ldd	r26, Y+3	; 0x03
    1424:	bc 81       	ldd	r27, Y+4	; 0x04
    1426:	89 2b       	or	r24, r25
    1428:	8a 2b       	or	r24, r26
    142a:	8b 2b       	or	r24, r27
    142c:	19 f4       	brne	.+6      	; 0x1434 <Ultrasonic_readDistance+0x24c>
		return 0xFFFF; // خطأ أو timeout
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	9f ef       	ldi	r25, 0xFF	; 255
    1432:	29 c0       	rjmp	.+82     	; 0x1486 <Ultrasonic_readDistance+0x29e>
	}

	uint16 time = g_falling_time - g_rising_time;
    1434:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <g_falling_time>
    1438:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <g_falling_time+0x1>
    143c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <g_rising_time>
    1440:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <g_rising_time+0x1>
    1444:	a9 01       	movw	r20, r18
    1446:	48 1b       	sub	r20, r24
    1448:	59 0b       	sbc	r21, r25
    144a:	ca 01       	movw	r24, r20
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
	return (uint16)(time * 0.0272);
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	cc 01       	movw	r24, r24
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <__floatunsisf>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	29 e8       	ldi	r18, 0x89	; 137
    1468:	32 ed       	ldi	r19, 0xD2	; 210
    146a:	4e ed       	ldi	r20, 0xDE	; 222
    146c:	5c e3       	ldi	r21, 0x3C	; 60
    146e:	bc 01       	movw	r22, r24
    1470:	cd 01       	movw	r24, r26
    1472:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
}
    1486:	a6 96       	adiw	r28, 0x26	; 38
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <Ultrasonic_edgeProcessing>:

// ------------------- ICU ISR Callback -------------------
void Ultrasonic_edgeProcessing(void) {
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
	if (g_edge_flag == 0) {
    14a0:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <g_edge_flag>
    14a4:	88 23       	and	r24, r24
    14a6:	61 f4       	brne	.+24     	; 0x14c0 <Ultrasonic_edgeProcessing+0x28>
		g_rising_time = TIMER1_u16INCAPRead();
    14a8:	0e 94 06 02 	call	0x40c	; 0x40c <TIMER1_u16INCAPRead>
    14ac:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <g_rising_time+0x1>
    14b0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <g_rising_time>
		TIMER1_vidINCAPFalling();
    14b4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TIMER1_vidINCAPFalling>
		g_edge_flag = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <g_edge_flag>
	} else {
		g_falling_time = TIMER1_u16INCAPRead();
		TIMER1_vidINCAPRissing();
		g_edge_flag = 0;
	}
}
    14be:	0a c0       	rjmp	.+20     	; 0x14d4 <Ultrasonic_edgeProcessing+0x3c>
	if (g_edge_flag == 0) {
		g_rising_time = TIMER1_u16INCAPRead();
		TIMER1_vidINCAPFalling();
		g_edge_flag = 1;
	} else {
		g_falling_time = TIMER1_u16INCAPRead();
    14c0:	0e 94 06 02 	call	0x40c	; 0x40c <TIMER1_u16INCAPRead>
    14c4:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <g_falling_time+0x1>
    14c8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <g_falling_time>
		TIMER1_vidINCAPRissing();
    14cc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <TIMER1_vidINCAPRissing>
		g_edge_flag = 0;
    14d0:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <g_edge_flag>
	}
}
    14d4:	00 00       	nop
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <LCD_vidInit>:

uint8 LCD_Data_Pin[4]={D0,D1,D2,D3};
uint8 i=0;


void LCD_vidInit(){
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	c6 54       	subi	r28, 0x46	; 70
    14ea:	d1 09       	sbc	r29, r1
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
	GPIO_vSetPinDirection(LCD_PORT,LCD_Data_Pin[0],Pin_Output);
    14f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <LCD_Data_Pin>
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	68 2f       	mov	r22, r24
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
	GPIO_vSetPinDirection(LCD_PORT,LCD_Data_Pin[1],Pin_Output);
    1504:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <LCD_Data_Pin+0x1>
    1508:	40 e0       	ldi	r20, 0x00	; 0
    150a:	68 2f       	mov	r22, r24
    150c:	82 e0       	ldi	r24, 0x02	; 2
    150e:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
	GPIO_vSetPinDirection(LCD_PORT,LCD_Data_Pin[2],Pin_Output);
    1512:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <LCD_Data_Pin+0x2>
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	68 2f       	mov	r22, r24
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
	GPIO_vSetPinDirection(LCD_PORT,LCD_Data_Pin[3],Pin_Output);
    1520:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <LCD_Data_Pin+0x3>
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	68 2f       	mov	r22, r24
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>

	GPIO_vSetPinDirection(LCD_PORT,RS,Pin_Output);
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	64 e0       	ldi	r22, 0x04	; 4
    1532:	82 e0       	ldi	r24, 0x02	; 2
    1534:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
	GPIO_vSetPinDirection(LCD_PORT,E,Pin_Output);
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	65 e0       	ldi	r22, 0x05	; 5
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a0 e2       	ldi	r26, 0x20	; 32
    1548:	b2 e4       	ldi	r27, 0x42	; 66
    154a:	89 8b       	std	Y+17, r24	; 0x11
    154c:	9a 8b       	std	Y+18, r25	; 0x12
    154e:	ab 8b       	std	Y+19, r26	; 0x13
    1550:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	4a e7       	ldi	r20, 0x7A	; 122
    1558:	53 e4       	ldi	r21, 0x43	; 67
    155a:	69 89       	ldd	r22, Y+17	; 0x11
    155c:	7a 89       	ldd	r23, Y+18	; 0x12
    155e:	8b 89       	ldd	r24, Y+19	; 0x13
    1560:	9c 89       	ldd	r25, Y+20	; 0x14
    1562:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	8d 8b       	std	Y+21, r24	; 0x15
    156c:	9e 8b       	std	Y+22, r25	; 0x16
    156e:	af 8b       	std	Y+23, r26	; 0x17
    1570:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e8       	ldi	r20, 0x80	; 128
    1578:	5f e3       	ldi	r21, 0x3F	; 63
    157a:	6d 89       	ldd	r22, Y+21	; 0x15
    157c:	7e 89       	ldd	r23, Y+22	; 0x16
    157e:	8f 89       	ldd	r24, Y+23	; 0x17
    1580:	98 8d       	ldd	r25, Y+24	; 0x18
    1582:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    1586:	88 23       	and	r24, r24
    1588:	2c f4       	brge	.+10     	; 0x1594 <LCD_vidInit+0xb8>
		__ticks = 1;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	9a 8f       	std	Y+26, r25	; 0x1a
    1590:	89 8f       	std	Y+25, r24	; 0x19
    1592:	3f c0       	rjmp	.+126    	; 0x1612 <LCD_vidInit+0x136>
	else if (__tmp > 65535)
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	57 e4       	ldi	r21, 0x47	; 71
    159c:	6d 89       	ldd	r22, Y+21	; 0x15
    159e:	7e 89       	ldd	r23, Y+22	; 0x16
    15a0:	8f 89       	ldd	r24, Y+23	; 0x17
    15a2:	98 8d       	ldd	r25, Y+24	; 0x18
    15a4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    15a8:	18 16       	cp	r1, r24
    15aa:	4c f5       	brge	.+82     	; 0x15fe <LCD_vidInit+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e2       	ldi	r20, 0x20	; 32
    15b2:	51 e4       	ldi	r21, 0x41	; 65
    15b4:	69 89       	ldd	r22, Y+17	; 0x11
    15b6:	7a 89       	ldd	r23, Y+18	; 0x12
    15b8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ba:	9c 89       	ldd	r25, Y+20	; 0x14
    15bc:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	9a 8f       	std	Y+26, r25	; 0x1a
    15d2:	89 8f       	std	Y+25, r24	; 0x19
    15d4:	0f c0       	rjmp	.+30     	; 0x15f4 <LCD_vidInit+0x118>
    15d6:	89 e1       	ldi	r24, 0x19	; 25
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	9c 8f       	std	Y+28, r25	; 0x1c
    15dc:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <LCD_vidInit+0x106>
    15e6:	9c 8f       	std	Y+28, r25	; 0x1c
    15e8:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ea:	89 8d       	ldd	r24, Y+25	; 0x19
    15ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	9a 8f       	std	Y+26, r25	; 0x1a
    15f2:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f4:	89 8d       	ldd	r24, Y+25	; 0x19
    15f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15f8:	89 2b       	or	r24, r25
    15fa:	69 f7       	brne	.-38     	; 0x15d6 <LCD_vidInit+0xfa>
    15fc:	14 c0       	rjmp	.+40     	; 0x1626 <LCD_vidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1600:	7e 89       	ldd	r23, Y+22	; 0x16
    1602:	8f 89       	ldd	r24, Y+23	; 0x17
    1604:	98 8d       	ldd	r25, Y+24	; 0x18
    1606:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	9a 8f       	std	Y+26, r25	; 0x1a
    1610:	89 8f       	std	Y+25, r24	; 0x19
    1612:	89 8d       	ldd	r24, Y+25	; 0x19
    1614:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1616:	9e 8f       	std	Y+30, r25	; 0x1e
    1618:	8d 8f       	std	Y+29, r24	; 0x1d
    161a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    161c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <LCD_vidInit+0x142>
    1622:	9e 8f       	std	Y+30, r25	; 0x1e
    1624:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(40);
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_Low);
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	64 e0       	ldi	r22, 0x04	; 4
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	for(i=0;i<4;i++){
    1630:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <i>
    1634:	22 c0       	rjmp	.+68     	; 0x167a <LCD_vidInit+0x19e>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],(GET_BIT(_LCD_BIT_4_MODE,(4+i))));
    1636:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <i>
    163a:	88 2f       	mov	r24, r24
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9c 01       	movw	r18, r24
    1640:	2c 5f       	subi	r18, 0xFC	; 252
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	88 e2       	ldi	r24, 0x28	; 40
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 c0       	rjmp	.+4      	; 0x164e <LCD_vidInit+0x172>
    164a:	95 95       	asr	r25
    164c:	87 95       	ror	r24
    164e:	2a 95       	dec	r18
    1650:	e2 f7       	brpl	.-8      	; 0x164a <LCD_vidInit+0x16e>
    1652:	28 2f       	mov	r18, r24
    1654:	21 70       	andi	r18, 0x01	; 1
    1656:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <i>
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	88 58       	subi	r24, 0x88	; 136
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	fc 01       	movw	r30, r24
    1664:	80 81       	ld	r24, Z
    1666:	42 2f       	mov	r20, r18
    1668:	68 2f       	mov	r22, r24
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>

	GPIO_vSetPinDirection(LCD_PORT,RS,Pin_Output);
	GPIO_vSetPinDirection(LCD_PORT,E,Pin_Output);
	_delay_ms(40);
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_Low);
	for(i=0;i<4;i++){
    1670:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <i>
    1674:	8f 5f       	subi	r24, 0xFF	; 255
    1676:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <i>
    167a:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <i>
    167e:	84 30       	cpi	r24, 0x04	; 4
    1680:	d0 f2       	brcs	.-76     	; 0x1636 <LCD_vidInit+0x15a>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],(GET_BIT(_LCD_BIT_4_MODE,(4+i))));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	65 e0       	ldi	r22, 0x05	; 5
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a0 e8       	ldi	r26, 0x80	; 128
    1692:	bf e3       	ldi	r27, 0x3F	; 63
    1694:	8d 83       	std	Y+5, r24	; 0x05
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	af 83       	std	Y+7, r26	; 0x07
    169a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	4a e7       	ldi	r20, 0x7A	; 122
    16a2:	53 e4       	ldi	r21, 0x43	; 67
    16a4:	6d 81       	ldd	r22, Y+5	; 0x05
    16a6:	7e 81       	ldd	r23, Y+6	; 0x06
    16a8:	8f 81       	ldd	r24, Y+7	; 0x07
    16aa:	98 85       	ldd	r25, Y+8	; 0x08
    16ac:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	9e 01       	movw	r18, r28
    16b6:	23 5c       	subi	r18, 0xC3	; 195
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	f9 01       	movw	r30, r18
    16bc:	80 83       	st	Z, r24
    16be:	91 83       	std	Z+1, r25	; 0x01
    16c0:	a2 83       	std	Z+2, r26	; 0x02
    16c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	ce 01       	movw	r24, r28
    16ce:	cd 96       	adiw	r24, 0x3d	; 61
    16d0:	fc 01       	movw	r30, r24
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    16de:	88 23       	and	r24, r24
    16e0:	4c f4       	brge	.+18     	; 0x16f4 <LCD_vidInit+0x218>
		__ticks = 1;
    16e2:	ce 01       	movw	r24, r28
    16e4:	8f 5b       	subi	r24, 0xBF	; 191
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	21 e0       	ldi	r18, 0x01	; 1
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	fc 01       	movw	r30, r24
    16ee:	31 83       	std	Z+1, r19	; 0x01
    16f0:	20 83       	st	Z, r18
    16f2:	67 c0       	rjmp	.+206    	; 0x17c2 <LCD_vidInit+0x2e6>
	else if (__tmp > 65535)
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	3f ef       	ldi	r19, 0xFF	; 255
    16f8:	4f e7       	ldi	r20, 0x7F	; 127
    16fa:	57 e4       	ldi	r21, 0x47	; 71
    16fc:	ce 01       	movw	r24, r28
    16fe:	cd 96       	adiw	r24, 0x3d	; 61
    1700:	fc 01       	movw	r30, r24
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    170e:	18 16       	cp	r1, r24
    1710:	0c f0       	brlt	.+2      	; 0x1714 <LCD_vidInit+0x238>
    1712:	46 c0       	rjmp	.+140    	; 0x17a0 <LCD_vidInit+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e2       	ldi	r20, 0x20	; 32
    171a:	51 e4       	ldi	r21, 0x41	; 65
    171c:	6d 81       	ldd	r22, Y+5	; 0x05
    171e:	7e 81       	ldd	r23, Y+6	; 0x06
    1720:	8f 81       	ldd	r24, Y+7	; 0x07
    1722:	98 85       	ldd	r25, Y+8	; 0x08
    1724:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	8e 01       	movw	r16, r28
    172e:	0f 5b       	subi	r16, 0xBF	; 191
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	f8 01       	movw	r30, r16
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
    1744:	24 c0       	rjmp	.+72     	; 0x178e <LCD_vidInit+0x2b2>
    1746:	ce 01       	movw	r24, r28
    1748:	8d 5b       	subi	r24, 0xBD	; 189
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	29 e1       	ldi	r18, 0x19	; 25
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	31 83       	std	Z+1, r19	; 0x01
    1754:	20 83       	st	Z, r18
    1756:	ce 01       	movw	r24, r28
    1758:	8d 5b       	subi	r24, 0xBD	; 189
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	fc 01       	movw	r30, r24
    175e:	80 81       	ld	r24, Z
    1760:	91 81       	ldd	r25, Z+1	; 0x01
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <LCD_vidInit+0x286>
    1766:	9e 01       	movw	r18, r28
    1768:	2d 5b       	subi	r18, 0xBD	; 189
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	f9 01       	movw	r30, r18
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	ce 01       	movw	r24, r28
    1774:	8f 5b       	subi	r24, 0xBF	; 191
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	9e 01       	movw	r18, r28
    177a:	2f 5b       	subi	r18, 0xBF	; 191
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	f9 01       	movw	r30, r18
    1780:	20 81       	ld	r18, Z
    1782:	31 81       	ldd	r19, Z+1	; 0x01
    1784:	21 50       	subi	r18, 0x01	; 1
    1786:	31 09       	sbc	r19, r1
    1788:	fc 01       	movw	r30, r24
    178a:	31 83       	std	Z+1, r19	; 0x01
    178c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178e:	ce 01       	movw	r24, r28
    1790:	8f 5b       	subi	r24, 0xBF	; 191
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	fc 01       	movw	r30, r24
    1796:	80 81       	ld	r24, Z
    1798:	91 81       	ldd	r25, Z+1	; 0x01
    179a:	89 2b       	or	r24, r25
    179c:	a1 f6       	brne	.-88     	; 0x1746 <LCD_vidInit+0x26a>
    179e:	2b c0       	rjmp	.+86     	; 0x17f6 <LCD_vidInit+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	8e 01       	movw	r16, r28
    17a2:	0f 5b       	subi	r16, 0xBF	; 191
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	ce 01       	movw	r24, r28
    17a8:	cd 96       	adiw	r24, 0x3d	; 61
    17aa:	fc 01       	movw	r30, r24
    17ac:	60 81       	ld	r22, Z
    17ae:	71 81       	ldd	r23, Z+1	; 0x01
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	93 81       	ldd	r25, Z+3	; 0x03
    17b4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	f8 01       	movw	r30, r16
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
    17c2:	ce 01       	movw	r24, r28
    17c4:	8b 5b       	subi	r24, 0xBB	; 187
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
    17c8:	9e 01       	movw	r18, r28
    17ca:	2f 5b       	subi	r18, 0xBF	; 191
    17cc:	3f 4f       	sbci	r19, 0xFF	; 255
    17ce:	f9 01       	movw	r30, r18
    17d0:	20 81       	ld	r18, Z
    17d2:	31 81       	ldd	r19, Z+1	; 0x01
    17d4:	fc 01       	movw	r30, r24
    17d6:	31 83       	std	Z+1, r19	; 0x01
    17d8:	20 83       	st	Z, r18
    17da:	ce 01       	movw	r24, r28
    17dc:	8b 5b       	subi	r24, 0xBB	; 187
    17de:	9f 4f       	sbci	r25, 0xFF	; 255
    17e0:	fc 01       	movw	r30, r24
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <LCD_vidInit+0x30a>
    17ea:	9e 01       	movw	r18, r28
    17ec:	2b 5b       	subi	r18, 0xBB	; 187
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	f9 01       	movw	r30, r18
    17f2:	91 83       	std	Z+1, r25	; 0x01
    17f4:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	65 e0       	ldi	r22, 0x05	; 5
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	LCD_vidWriteCmd(_LCD_BIT_4_MODE);
    1800:	88 e2       	ldi	r24, 0x28	; 40
    1802:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_vidWriteCmd>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e8       	ldi	r26, 0x80	; 128
    180c:	bf e3       	ldi	r27, 0x3F	; 63
    180e:	89 87       	std	Y+9, r24	; 0x09
    1810:	9a 87       	std	Y+10, r25	; 0x0a
    1812:	ab 87       	std	Y+11, r26	; 0x0b
    1814:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4a e7       	ldi	r20, 0x7A	; 122
    181c:	53 e4       	ldi	r21, 0x43	; 67
    181e:	69 85       	ldd	r22, Y+9	; 0x09
    1820:	7a 85       	ldd	r23, Y+10	; 0x0a
    1822:	8b 85       	ldd	r24, Y+11	; 0x0b
    1824:	9c 85       	ldd	r25, Y+12	; 0x0c
    1826:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	8b ab       	std	Y+51, r24	; 0x33
    1830:	9c ab       	std	Y+52, r25	; 0x34
    1832:	ad ab       	std	Y+53, r26	; 0x35
    1834:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e8       	ldi	r20, 0x80	; 128
    183c:	5f e3       	ldi	r21, 0x3F	; 63
    183e:	6b a9       	ldd	r22, Y+51	; 0x33
    1840:	7c a9       	ldd	r23, Y+52	; 0x34
    1842:	8d a9       	ldd	r24, Y+53	; 0x35
    1844:	9e a9       	ldd	r25, Y+54	; 0x36
    1846:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    184a:	88 23       	and	r24, r24
    184c:	2c f4       	brge	.+10     	; 0x1858 <LCD_vidInit+0x37c>
		__ticks = 1;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	98 af       	std	Y+56, r25	; 0x38
    1854:	8f ab       	std	Y+55, r24	; 0x37
    1856:	3f c0       	rjmp	.+126    	; 0x18d6 <LCD_vidInit+0x3fa>
	else if (__tmp > 65535)
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	3f ef       	ldi	r19, 0xFF	; 255
    185c:	4f e7       	ldi	r20, 0x7F	; 127
    185e:	57 e4       	ldi	r21, 0x47	; 71
    1860:	6b a9       	ldd	r22, Y+51	; 0x33
    1862:	7c a9       	ldd	r23, Y+52	; 0x34
    1864:	8d a9       	ldd	r24, Y+53	; 0x35
    1866:	9e a9       	ldd	r25, Y+54	; 0x36
    1868:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    186c:	18 16       	cp	r1, r24
    186e:	4c f5       	brge	.+82     	; 0x18c2 <LCD_vidInit+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e2       	ldi	r20, 0x20	; 32
    1876:	51 e4       	ldi	r21, 0x41	; 65
    1878:	69 85       	ldd	r22, Y+9	; 0x09
    187a:	7a 85       	ldd	r23, Y+10	; 0x0a
    187c:	8b 85       	ldd	r24, Y+11	; 0x0b
    187e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1880:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	bc 01       	movw	r22, r24
    188a:	cd 01       	movw	r24, r26
    188c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	98 af       	std	Y+56, r25	; 0x38
    1896:	8f ab       	std	Y+55, r24	; 0x37
    1898:	0f c0       	rjmp	.+30     	; 0x18b8 <LCD_vidInit+0x3dc>
    189a:	89 e1       	ldi	r24, 0x19	; 25
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9a af       	std	Y+58, r25	; 0x3a
    18a0:	89 af       	std	Y+57, r24	; 0x39
    18a2:	89 ad       	ldd	r24, Y+57	; 0x39
    18a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <LCD_vidInit+0x3ca>
    18aa:	9a af       	std	Y+58, r25	; 0x3a
    18ac:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ae:	8f a9       	ldd	r24, Y+55	; 0x37
    18b0:	98 ad       	ldd	r25, Y+56	; 0x38
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	98 af       	std	Y+56, r25	; 0x38
    18b6:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b8:	8f a9       	ldd	r24, Y+55	; 0x37
    18ba:	98 ad       	ldd	r25, Y+56	; 0x38
    18bc:	89 2b       	or	r24, r25
    18be:	69 f7       	brne	.-38     	; 0x189a <LCD_vidInit+0x3be>
    18c0:	14 c0       	rjmp	.+40     	; 0x18ea <LCD_vidInit+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c2:	6b a9       	ldd	r22, Y+51	; 0x33
    18c4:	7c a9       	ldd	r23, Y+52	; 0x34
    18c6:	8d a9       	ldd	r24, Y+53	; 0x35
    18c8:	9e a9       	ldd	r25, Y+54	; 0x36
    18ca:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	98 af       	std	Y+56, r25	; 0x38
    18d4:	8f ab       	std	Y+55, r24	; 0x37
    18d6:	8f a9       	ldd	r24, Y+55	; 0x37
    18d8:	98 ad       	ldd	r25, Y+56	; 0x38
    18da:	9c af       	std	Y+60, r25	; 0x3c
    18dc:	8b af       	std	Y+59, r24	; 0x3b
    18de:	8b ad       	ldd	r24, Y+59	; 0x3b
    18e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <LCD_vidInit+0x406>
    18e6:	9c af       	std	Y+60, r25	; 0x3c
    18e8:	8b af       	std	Y+59, r24	; 0x3b
	_delay_ms(1);
	LCD_vidWriteCmd(_LCD_DISPLAY_ON);
    18ea:	8c e0       	ldi	r24, 0x0C	; 12
    18ec:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_vidWriteCmd>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e8       	ldi	r26, 0x80	; 128
    18f6:	bf e3       	ldi	r27, 0x3F	; 63
    18f8:	8d 87       	std	Y+13, r24	; 0x0d
    18fa:	9e 87       	std	Y+14, r25	; 0x0e
    18fc:	af 87       	std	Y+15, r26	; 0x0f
    18fe:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a e7       	ldi	r20, 0x7A	; 122
    1906:	53 e4       	ldi	r21, 0x43	; 67
    1908:	6d 85       	ldd	r22, Y+13	; 0x0d
    190a:	7e 85       	ldd	r23, Y+14	; 0x0e
    190c:	8f 85       	ldd	r24, Y+15	; 0x0f
    190e:	98 89       	ldd	r25, Y+16	; 0x10
    1910:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	89 a7       	std	Y+41, r24	; 0x29
    191a:	9a a7       	std	Y+42, r25	; 0x2a
    191c:	ab a7       	std	Y+43, r26	; 0x2b
    191e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	69 a5       	ldd	r22, Y+41	; 0x29
    192a:	7a a5       	ldd	r23, Y+42	; 0x2a
    192c:	8b a5       	ldd	r24, Y+43	; 0x2b
    192e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1930:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <LCD_vidInit+0x466>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9e a7       	std	Y+46, r25	; 0x2e
    193e:	8d a7       	std	Y+45, r24	; 0x2d
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <LCD_vidInit+0x4e4>
	else if (__tmp > 65535)
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	57 e4       	ldi	r21, 0x47	; 71
    194a:	69 a5       	ldd	r22, Y+41	; 0x29
    194c:	7a a5       	ldd	r23, Y+42	; 0x2a
    194e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1950:	9c a5       	ldd	r25, Y+44	; 0x2c
    1952:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <LCD_vidInit+0x4d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	6d 85       	ldd	r22, Y+13	; 0x0d
    1964:	7e 85       	ldd	r23, Y+14	; 0x0e
    1966:	8f 85       	ldd	r24, Y+15	; 0x0f
    1968:	98 89       	ldd	r25, Y+16	; 0x10
    196a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9e a7       	std	Y+46, r25	; 0x2e
    1980:	8d a7       	std	Y+45, r24	; 0x2d
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <LCD_vidInit+0x4c6>
    1984:	89 e1       	ldi	r24, 0x19	; 25
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	98 ab       	std	Y+48, r25	; 0x30
    198a:	8f a7       	std	Y+47, r24	; 0x2f
    198c:	8f a5       	ldd	r24, Y+47	; 0x2f
    198e:	98 a9       	ldd	r25, Y+48	; 0x30
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_vidInit+0x4b4>
    1994:	98 ab       	std	Y+48, r25	; 0x30
    1996:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	8d a5       	ldd	r24, Y+45	; 0x2d
    199a:	9e a5       	ldd	r25, Y+46	; 0x2e
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9e a7       	std	Y+46, r25	; 0x2e
    19a0:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    19a6:	89 2b       	or	r24, r25
    19a8:	69 f7       	brne	.-38     	; 0x1984 <LCD_vidInit+0x4a8>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <LCD_vidInit+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	69 a5       	ldd	r22, Y+41	; 0x29
    19ae:	7a a5       	ldd	r23, Y+42	; 0x2a
    19b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    19b4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9e a7       	std	Y+46, r25	; 0x2e
    19be:	8d a7       	std	Y+45, r24	; 0x2d
    19c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    19c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    19c4:	9a ab       	std	Y+50, r25	; 0x32
    19c6:	89 ab       	std	Y+49, r24	; 0x31
    19c8:	89 a9       	ldd	r24, Y+49	; 0x31
    19ca:	9a a9       	ldd	r25, Y+50	; 0x32
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_vidInit+0x4f0>
    19d0:	9a ab       	std	Y+50, r25	; 0x32
    19d2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1);
	LCD_vidWriteCmd(_LCD_CLEAR_DIS);
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_vidWriteCmd>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a0 e0       	ldi	r26, 0x00	; 0
    19e0:	b0 e4       	ldi	r27, 0x40	; 64
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	ab 83       	std	Y+3, r26	; 0x03
    19e8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	53 e4       	ldi	r21, 0x43	; 67
    19f2:	69 81       	ldd	r22, Y+1	; 0x01
    19f4:	7a 81       	ldd	r23, Y+2	; 0x02
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	9c 81       	ldd	r25, Y+4	; 0x04
    19fa:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8f 8f       	std	Y+31, r24	; 0x1f
    1a04:	98 a3       	std	Y+32, r25	; 0x20
    1a06:	a9 a3       	std	Y+33, r26	; 0x21
    1a08:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e8       	ldi	r20, 0x80	; 128
    1a10:	5f e3       	ldi	r21, 0x3F	; 63
    1a12:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a14:	78 a1       	ldd	r23, Y+32	; 0x20
    1a16:	89 a1       	ldd	r24, Y+33	; 0x21
    1a18:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1a:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <LCD_vidInit+0x550>
		__ticks = 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9c a3       	std	Y+36, r25	; 0x24
    1a28:	8b a3       	std	Y+35, r24	; 0x23
    1a2a:	3f c0       	rjmp	.+126    	; 0x1aaa <LCD_vidInit+0x5ce>
	else if (__tmp > 65535)
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	3f ef       	ldi	r19, 0xFF	; 255
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	57 e4       	ldi	r21, 0x47	; 71
    1a34:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a36:	78 a1       	ldd	r23, Y+32	; 0x20
    1a38:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3c:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    1a40:	18 16       	cp	r1, r24
    1a42:	4c f5       	brge	.+82     	; 0x1a96 <LCD_vidInit+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	69 81       	ldd	r22, Y+1	; 0x01
    1a4e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9c a3       	std	Y+36, r25	; 0x24
    1a6a:	8b a3       	std	Y+35, r24	; 0x23
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <LCD_vidInit+0x5b0>
    1a6e:	89 e1       	ldi	r24, 0x19	; 25
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9e a3       	std	Y+38, r25	; 0x26
    1a74:	8d a3       	std	Y+37, r24	; 0x25
    1a76:	8d a1       	ldd	r24, Y+37	; 0x25
    1a78:	9e a1       	ldd	r25, Y+38	; 0x26
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_vidInit+0x59e>
    1a7e:	9e a3       	std	Y+38, r25	; 0x26
    1a80:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	8b a1       	ldd	r24, Y+35	; 0x23
    1a84:	9c a1       	ldd	r25, Y+36	; 0x24
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	9c a3       	std	Y+36, r25	; 0x24
    1a8a:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8c:	8b a1       	ldd	r24, Y+35	; 0x23
    1a8e:	9c a1       	ldd	r25, Y+36	; 0x24
    1a90:	89 2b       	or	r24, r25
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <LCD_vidInit+0x592>
    1a94:	14 c0       	rjmp	.+40     	; 0x1abe <LCD_vidInit+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a98:	78 a1       	ldd	r23, Y+32	; 0x20
    1a9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a9e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9c a3       	std	Y+36, r25	; 0x24
    1aa8:	8b a3       	std	Y+35, r24	; 0x23
    1aaa:	8b a1       	ldd	r24, Y+35	; 0x23
    1aac:	9c a1       	ldd	r25, Y+36	; 0x24
    1aae:	98 a7       	std	Y+40, r25	; 0x28
    1ab0:	8f a3       	std	Y+39, r24	; 0x27
    1ab2:	8f a1       	ldd	r24, Y+39	; 0x27
    1ab4:	98 a5       	ldd	r25, Y+40	; 0x28
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_vidInit+0x5da>
    1aba:	98 a7       	std	Y+40, r25	; 0x28
    1abc:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(2);
	LCD_vidWriteCmd(_LCD_ENTRY_MODE_INC);
    1abe:	86 e0       	ldi	r24, 0x06	; 6
    1ac0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_vidWriteCmd>
}
    1ac4:	00 00       	nop
    1ac6:	ca 5b       	subi	r28, 0xBA	; 186
    1ac8:	df 4f       	sbci	r29, 0xFF	; 255
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	08 95       	ret

00001ade <LCD_vidWriteCmd>:

void LCD_vidWriteCmd(uint8 u8CmdCopy){
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	6e 97       	sbiw	r28, 0x1e	; 30
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i=0;
    1af4:	19 82       	std	Y+1, r1	; 0x01
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_Low);
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	64 e0       	ldi	r22, 0x04	; 4
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	for(i=0;i<4;i++){
    1b00:	19 82       	std	Y+1, r1	; 0x01
    1b02:	1e c0       	rjmp	.+60     	; 0x1b40 <LCD_vidWriteCmd+0x62>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],(GET_BIT(u8CmdCopy,(4+i))));
    1b04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	29 81       	ldd	r18, Y+1	; 0x01
    1b0c:	22 2f       	mov	r18, r18
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	2c 5f       	subi	r18, 0xFC	; 252
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <LCD_vidWriteCmd+0x3c>
    1b16:	95 95       	asr	r25
    1b18:	87 95       	ror	r24
    1b1a:	2a 95       	dec	r18
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <LCD_vidWriteCmd+0x38>
    1b1e:	28 2f       	mov	r18, r24
    1b20:	21 70       	andi	r18, 0x01	; 1
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	88 58       	subi	r24, 0x88	; 136
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	80 81       	ld	r24, Z
    1b30:	42 2f       	mov	r20, r18
    1b32:	68 2f       	mov	r22, r24
    1b34:	82 e0       	ldi	r24, 0x02	; 2
    1b36:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
}

void LCD_vidWriteCmd(uint8 u8CmdCopy){
	uint8 i=0;
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_Low);
	for(i=0;i<4;i++){
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	8f 5f       	subi	r24, 0xFF	; 255
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	84 30       	cpi	r24, 0x04	; 4
    1b44:	f8 f2       	brcs	.-66     	; 0x1b04 <LCD_vidWriteCmd+0x26>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],(GET_BIT(u8CmdCopy,(4+i))));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	65 e0       	ldi	r22, 0x05	; 5
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e8       	ldi	r26, 0x80	; 128
    1b56:	bf e3       	ldi	r27, 0x3F	; 63
    1b58:	8e 83       	std	Y+6, r24	; 0x06
    1b5a:	9f 83       	std	Y+7, r25	; 0x07
    1b5c:	a8 87       	std	Y+8, r26	; 0x08
    1b5e:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a e7       	ldi	r20, 0x7A	; 122
    1b66:	53 e4       	ldi	r21, 0x43	; 67
    1b68:	6e 81       	ldd	r22, Y+6	; 0x06
    1b6a:	7f 81       	ldd	r23, Y+7	; 0x07
    1b6c:	88 85       	ldd	r24, Y+8	; 0x08
    1b6e:	99 85       	ldd	r25, Y+9	; 0x09
    1b70:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8a 87       	std	Y+10, r24	; 0x0a
    1b7a:	9b 87       	std	Y+11, r25	; 0x0b
    1b7c:	ac 87       	std	Y+12, r26	; 0x0c
    1b7e:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f e3       	ldi	r21, 0x3F	; 63
    1b88:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b8a:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b90:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <LCD_vidWriteCmd+0xc4>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9f 87       	std	Y+15, r25	; 0x0f
    1b9e:	8e 87       	std	Y+14, r24	; 0x0e
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <LCD_vidWriteCmd+0x142>
	else if (__tmp > 65535)
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	4f e7       	ldi	r20, 0x7F	; 127
    1ba8:	57 e4       	ldi	r21, 0x47	; 71
    1baa:	6a 85       	ldd	r22, Y+10	; 0x0a
    1bac:	7b 85       	ldd	r23, Y+11	; 0x0b
    1bae:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bb0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bb2:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <LCD_vidWriteCmd+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e2       	ldi	r20, 0x20	; 32
    1bc0:	51 e4       	ldi	r21, 0x41	; 65
    1bc2:	6e 81       	ldd	r22, Y+6	; 0x06
    1bc4:	7f 81       	ldd	r23, Y+7	; 0x07
    1bc6:	88 85       	ldd	r24, Y+8	; 0x08
    1bc8:	99 85       	ldd	r25, Y+9	; 0x09
    1bca:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9f 87       	std	Y+15, r25	; 0x0f
    1be0:	8e 87       	std	Y+14, r24	; 0x0e
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <LCD_vidWriteCmd+0x124>
    1be4:	89 e1       	ldi	r24, 0x19	; 25
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	99 8b       	std	Y+17, r25	; 0x11
    1bea:	88 8b       	std	Y+16, r24	; 0x10
    1bec:	88 89       	ldd	r24, Y+16	; 0x10
    1bee:	99 89       	ldd	r25, Y+17	; 0x11
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_vidWriteCmd+0x112>
    1bf4:	99 8b       	std	Y+17, r25	; 0x11
    1bf6:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bfa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9f 87       	std	Y+15, r25	; 0x0f
    1c00:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c04:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c06:	89 2b       	or	r24, r25
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <LCD_vidWriteCmd+0x106>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <LCD_vidWriteCmd+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c0e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1c10:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c12:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c14:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9f 87       	std	Y+15, r25	; 0x0f
    1c1e:	8e 87       	std	Y+14, r24	; 0x0e
    1c20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c22:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c24:	9b 8b       	std	Y+19, r25	; 0x13
    1c26:	8a 8b       	std	Y+18, r24	; 0x12
    1c28:	8a 89       	ldd	r24, Y+18	; 0x12
    1c2a:	9b 89       	ldd	r25, Y+19	; 0x13
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_vidWriteCmd+0x14e>
    1c30:	9b 8b       	std	Y+19, r25	; 0x13
    1c32:	8a 8b       	std	Y+18, r24	; 0x12
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	65 e0       	ldi	r22, 0x05	; 5
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	for(i=0;i<4;i++){
    1c3e:	19 82       	std	Y+1, r1	; 0x01
    1c40:	1c c0       	rjmp	.+56     	; 0x1c7a <LCD_vidWriteCmd+0x19c>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],(GET_BIT(u8CmdCopy,(i))));
    1c42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	29 81       	ldd	r18, Y+1	; 0x01
    1c4a:	22 2f       	mov	r18, r18
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <LCD_vidWriteCmd+0x176>
    1c50:	95 95       	asr	r25
    1c52:	87 95       	ror	r24
    1c54:	2a 95       	dec	r18
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <LCD_vidWriteCmd+0x172>
    1c58:	28 2f       	mov	r18, r24
    1c5a:	21 70       	andi	r18, 0x01	; 1
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	88 58       	subi	r24, 0x88	; 136
    1c64:	9f 4f       	sbci	r25, 0xFF	; 255
    1c66:	fc 01       	movw	r30, r24
    1c68:	80 81       	ld	r24, Z
    1c6a:	42 2f       	mov	r20, r18
    1c6c:	68 2f       	mov	r22, r24
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],(GET_BIT(u8CmdCopy,(4+i))));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
	for(i=0;i<4;i++){
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	8f 5f       	subi	r24, 0xFF	; 255
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	84 30       	cpi	r24, 0x04	; 4
    1c7e:	08 f3       	brcs	.-62     	; 0x1c42 <LCD_vidWriteCmd+0x164>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],(GET_BIT(u8CmdCopy,(i))));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	65 e0       	ldi	r22, 0x05	; 5
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a0 e8       	ldi	r26, 0x80	; 128
    1c90:	bf e3       	ldi	r27, 0x3F	; 63
    1c92:	8a 83       	std	Y+2, r24	; 0x02
    1c94:	9b 83       	std	Y+3, r25	; 0x03
    1c96:	ac 83       	std	Y+4, r26	; 0x04
    1c98:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a e7       	ldi	r20, 0x7A	; 122
    1ca0:	53 e4       	ldi	r21, 0x43	; 67
    1ca2:	6a 81       	ldd	r22, Y+2	; 0x02
    1ca4:	7b 81       	ldd	r23, Y+3	; 0x03
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    1caa:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8c 8b       	std	Y+20, r24	; 0x14
    1cb4:	9d 8b       	std	Y+21, r25	; 0x15
    1cb6:	ae 8b       	std	Y+22, r26	; 0x16
    1cb8:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	6c 89       	ldd	r22, Y+20	; 0x14
    1cc4:	7d 89       	ldd	r23, Y+21	; 0x15
    1cc6:	8e 89       	ldd	r24, Y+22	; 0x16
    1cc8:	9f 89       	ldd	r25, Y+23	; 0x17
    1cca:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <LCD_vidWriteCmd+0x1fe>
		__ticks = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	99 8f       	std	Y+25, r25	; 0x19
    1cd8:	88 8f       	std	Y+24, r24	; 0x18
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <LCD_vidWriteCmd+0x27c>
	else if (__tmp > 65535)
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	6c 89       	ldd	r22, Y+20	; 0x14
    1ce6:	7d 89       	ldd	r23, Y+21	; 0x15
    1ce8:	8e 89       	ldd	r24, Y+22	; 0x16
    1cea:	9f 89       	ldd	r25, Y+23	; 0x17
    1cec:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	4c f5       	brge	.+82     	; 0x1d46 <LCD_vidWriteCmd+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	6a 81       	ldd	r22, Y+2	; 0x02
    1cfe:	7b 81       	ldd	r23, Y+3	; 0x03
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	9d 81       	ldd	r25, Y+5	; 0x05
    1d04:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	99 8f       	std	Y+25, r25	; 0x19
    1d1a:	88 8f       	std	Y+24, r24	; 0x18
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <LCD_vidWriteCmd+0x25e>
    1d1e:	89 e1       	ldi	r24, 0x19	; 25
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9b 8f       	std	Y+27, r25	; 0x1b
    1d24:	8a 8f       	std	Y+26, r24	; 0x1a
    1d26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d28:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <LCD_vidWriteCmd+0x24c>
    1d2e:	9b 8f       	std	Y+27, r25	; 0x1b
    1d30:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	88 8d       	ldd	r24, Y+24	; 0x18
    1d34:	99 8d       	ldd	r25, Y+25	; 0x19
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	99 8f       	std	Y+25, r25	; 0x19
    1d3a:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3c:	88 8d       	ldd	r24, Y+24	; 0x18
    1d3e:	99 8d       	ldd	r25, Y+25	; 0x19
    1d40:	89 2b       	or	r24, r25
    1d42:	69 f7       	brne	.-38     	; 0x1d1e <LCD_vidWriteCmd+0x240>
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <LCD_vidWriteCmd+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	6c 89       	ldd	r22, Y+20	; 0x14
    1d48:	7d 89       	ldd	r23, Y+21	; 0x15
    1d4a:	8e 89       	ldd	r24, Y+22	; 0x16
    1d4c:	9f 89       	ldd	r25, Y+23	; 0x17
    1d4e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	99 8f       	std	Y+25, r25	; 0x19
    1d58:	88 8f       	std	Y+24, r24	; 0x18
    1d5a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d5c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d5e:	9d 8f       	std	Y+29, r25	; 0x1d
    1d60:	8c 8f       	std	Y+28, r24	; 0x1c
    1d62:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d64:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_vidWriteCmd+0x288>
    1d6a:	9d 8f       	std	Y+29, r25	; 0x1d
    1d6c:	8c 8f       	std	Y+28, r24	; 0x1c
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	65 e0       	ldi	r22, 0x05	; 5
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
}
    1d78:	00 00       	nop
    1d7a:	6e 96       	adiw	r28, 0x1e	; 30
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	08 95       	ret

00001d8c <LCD_vidWriteChar>:

void LCD_vidWriteChar(uint8 u8CharCopy){
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	6e 97       	sbiw	r28, 0x1e	; 30
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i=0;
    1da2:	19 82       	std	Y+1, r1	; 0x01
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_High);
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	64 e0       	ldi	r22, 0x04	; 4
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	for(i=0;i<4;i++){
    1dae:	19 82       	std	Y+1, r1	; 0x01
    1db0:	1e c0       	rjmp	.+60     	; 0x1dee <LCD_vidWriteChar+0x62>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((u8CharCopy >> (i+4))& 0x01));
    1db2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	29 81       	ldd	r18, Y+1	; 0x01
    1dba:	22 2f       	mov	r18, r18
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	2c 5f       	subi	r18, 0xFC	; 252
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <LCD_vidWriteChar+0x3c>
    1dc4:	95 95       	asr	r25
    1dc6:	87 95       	ror	r24
    1dc8:	2a 95       	dec	r18
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <LCD_vidWriteChar+0x38>
    1dcc:	28 2f       	mov	r18, r24
    1dce:	21 70       	andi	r18, 0x01	; 1
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	88 2f       	mov	r24, r24
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	88 58       	subi	r24, 0x88	; 136
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	fc 01       	movw	r30, r24
    1ddc:	80 81       	ld	r24, Z
    1dde:	42 2f       	mov	r20, r18
    1de0:	68 2f       	mov	r22, r24
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
}

void LCD_vidWriteChar(uint8 u8CharCopy){
	uint8 i=0;
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_High);
	for(i=0;i<4;i++){
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	8f 5f       	subi	r24, 0xFF	; 255
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	84 30       	cpi	r24, 0x04	; 4
    1df2:	f8 f2       	brcs	.-66     	; 0x1db2 <LCD_vidWriteChar+0x26>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((u8CharCopy >> (i+4))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	65 e0       	ldi	r22, 0x05	; 5
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	a0 e8       	ldi	r26, 0x80	; 128
    1e04:	bf e3       	ldi	r27, 0x3F	; 63
    1e06:	8e 83       	std	Y+6, r24	; 0x06
    1e08:	9f 83       	std	Y+7, r25	; 0x07
    1e0a:	a8 87       	std	Y+8, r26	; 0x08
    1e0c:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	4a e7       	ldi	r20, 0x7A	; 122
    1e14:	53 e4       	ldi	r21, 0x43	; 67
    1e16:	6e 81       	ldd	r22, Y+6	; 0x06
    1e18:	7f 81       	ldd	r23, Y+7	; 0x07
    1e1a:	88 85       	ldd	r24, Y+8	; 0x08
    1e1c:	99 85       	ldd	r25, Y+9	; 0x09
    1e1e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	8a 87       	std	Y+10, r24	; 0x0a
    1e28:	9b 87       	std	Y+11, r25	; 0x0b
    1e2a:	ac 87       	std	Y+12, r26	; 0x0c
    1e2c:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	6a 85       	ldd	r22, Y+10	; 0x0a
    1e38:	7b 85       	ldd	r23, Y+11	; 0x0b
    1e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e3e:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    1e42:	88 23       	and	r24, r24
    1e44:	2c f4       	brge	.+10     	; 0x1e50 <LCD_vidWriteChar+0xc4>
		__ticks = 1;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	9f 87       	std	Y+15, r25	; 0x0f
    1e4c:	8e 87       	std	Y+14, r24	; 0x0e
    1e4e:	3f c0       	rjmp	.+126    	; 0x1ece <LCD_vidWriteChar+0x142>
	else if (__tmp > 65535)
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	6a 85       	ldd	r22, Y+10	; 0x0a
    1e5a:	7b 85       	ldd	r23, Y+11	; 0x0b
    1e5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e5e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e60:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    1e64:	18 16       	cp	r1, r24
    1e66:	4c f5       	brge	.+82     	; 0x1eba <LCD_vidWriteChar+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e2       	ldi	r20, 0x20	; 32
    1e6e:	51 e4       	ldi	r21, 0x41	; 65
    1e70:	6e 81       	ldd	r22, Y+6	; 0x06
    1e72:	7f 81       	ldd	r23, Y+7	; 0x07
    1e74:	88 85       	ldd	r24, Y+8	; 0x08
    1e76:	99 85       	ldd	r25, Y+9	; 0x09
    1e78:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	bc 01       	movw	r22, r24
    1e82:	cd 01       	movw	r24, r26
    1e84:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	9f 87       	std	Y+15, r25	; 0x0f
    1e8e:	8e 87       	std	Y+14, r24	; 0x0e
    1e90:	0f c0       	rjmp	.+30     	; 0x1eb0 <LCD_vidWriteChar+0x124>
    1e92:	89 e1       	ldi	r24, 0x19	; 25
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	99 8b       	std	Y+17, r25	; 0x11
    1e98:	88 8b       	std	Y+16, r24	; 0x10
    1e9a:	88 89       	ldd	r24, Y+16	; 0x10
    1e9c:	99 89       	ldd	r25, Y+17	; 0x11
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <LCD_vidWriteChar+0x112>
    1ea2:	99 8b       	std	Y+17, r25	; 0x11
    1ea4:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	9f 87       	std	Y+15, r25	; 0x0f
    1eae:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eb4:	89 2b       	or	r24, r25
    1eb6:	69 f7       	brne	.-38     	; 0x1e92 <LCD_vidWriteChar+0x106>
    1eb8:	14 c0       	rjmp	.+40     	; 0x1ee2 <LCD_vidWriteChar+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eba:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ebc:	7b 85       	ldd	r23, Y+11	; 0x0b
    1ebe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ec0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ec2:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9f 87       	std	Y+15, r25	; 0x0f
    1ecc:	8e 87       	std	Y+14, r24	; 0x0e
    1ece:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ed0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ed2:	9b 8b       	std	Y+19, r25	; 0x13
    1ed4:	8a 8b       	std	Y+18, r24	; 0x12
    1ed6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ed8:	9b 89       	ldd	r25, Y+19	; 0x13
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <LCD_vidWriteChar+0x14e>
    1ede:	9b 8b       	std	Y+19, r25	; 0x13
    1ee0:	8a 8b       	std	Y+18, r24	; 0x12
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	65 e0       	ldi	r22, 0x05	; 5
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	for(i=0;i<4;i++){
    1eec:	19 82       	std	Y+1, r1	; 0x01
    1eee:	1c c0       	rjmp	.+56     	; 0x1f28 <LCD_vidWriteChar+0x19c>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((u8CharCopy >> (i))& 0x01));
    1ef0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	29 81       	ldd	r18, Y+1	; 0x01
    1ef8:	22 2f       	mov	r18, r18
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <LCD_vidWriteChar+0x176>
    1efe:	95 95       	asr	r25
    1f00:	87 95       	ror	r24
    1f02:	2a 95       	dec	r18
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <LCD_vidWriteChar+0x172>
    1f06:	28 2f       	mov	r18, r24
    1f08:	21 70       	andi	r18, 0x01	; 1
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	88 58       	subi	r24, 0x88	; 136
    1f12:	9f 4f       	sbci	r25, 0xFF	; 255
    1f14:	fc 01       	movw	r30, r24
    1f16:	80 81       	ld	r24, Z
    1f18:	42 2f       	mov	r20, r18
    1f1a:	68 2f       	mov	r22, r24
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((u8CharCopy >> (i+4))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
	for(i=0;i<4;i++){
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	8f 5f       	subi	r24, 0xFF	; 255
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	84 30       	cpi	r24, 0x04	; 4
    1f2c:	08 f3       	brcs	.-62     	; 0x1ef0 <LCD_vidWriteChar+0x164>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((u8CharCopy >> (i))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	65 e0       	ldi	r22, 0x05	; 5
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a0 e8       	ldi	r26, 0x80	; 128
    1f3e:	bf e3       	ldi	r27, 0x3F	; 63
    1f40:	8a 83       	std	Y+2, r24	; 0x02
    1f42:	9b 83       	std	Y+3, r25	; 0x03
    1f44:	ac 83       	std	Y+4, r26	; 0x04
    1f46:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a e7       	ldi	r20, 0x7A	; 122
    1f4e:	53 e4       	ldi	r21, 0x43	; 67
    1f50:	6a 81       	ldd	r22, Y+2	; 0x02
    1f52:	7b 81       	ldd	r23, Y+3	; 0x03
    1f54:	8c 81       	ldd	r24, Y+4	; 0x04
    1f56:	9d 81       	ldd	r25, Y+5	; 0x05
    1f58:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	8c 8b       	std	Y+20, r24	; 0x14
    1f62:	9d 8b       	std	Y+21, r25	; 0x15
    1f64:	ae 8b       	std	Y+22, r26	; 0x16
    1f66:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	6c 89       	ldd	r22, Y+20	; 0x14
    1f72:	7d 89       	ldd	r23, Y+21	; 0x15
    1f74:	8e 89       	ldd	r24, Y+22	; 0x16
    1f76:	9f 89       	ldd	r25, Y+23	; 0x17
    1f78:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	2c f4       	brge	.+10     	; 0x1f8a <LCD_vidWriteChar+0x1fe>
		__ticks = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	99 8f       	std	Y+25, r25	; 0x19
    1f86:	88 8f       	std	Y+24, r24	; 0x18
    1f88:	3f c0       	rjmp	.+126    	; 0x2008 <LCD_vidWriteChar+0x27c>
	else if (__tmp > 65535)
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	6c 89       	ldd	r22, Y+20	; 0x14
    1f94:	7d 89       	ldd	r23, Y+21	; 0x15
    1f96:	8e 89       	ldd	r24, Y+22	; 0x16
    1f98:	9f 89       	ldd	r25, Y+23	; 0x17
    1f9a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	4c f5       	brge	.+82     	; 0x1ff4 <LCD_vidWriteChar+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	51 e4       	ldi	r21, 0x41	; 65
    1faa:	6a 81       	ldd	r22, Y+2	; 0x02
    1fac:	7b 81       	ldd	r23, Y+3	; 0x03
    1fae:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb2:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	99 8f       	std	Y+25, r25	; 0x19
    1fc8:	88 8f       	std	Y+24, r24	; 0x18
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <LCD_vidWriteChar+0x25e>
    1fcc:	89 e1       	ldi	r24, 0x19	; 25
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9b 8f       	std	Y+27, r25	; 0x1b
    1fd2:	8a 8f       	std	Y+26, r24	; 0x1a
    1fd4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fd6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_vidWriteChar+0x24c>
    1fdc:	9b 8f       	std	Y+27, r25	; 0x1b
    1fde:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	88 8d       	ldd	r24, Y+24	; 0x18
    1fe2:	99 8d       	ldd	r25, Y+25	; 0x19
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	99 8f       	std	Y+25, r25	; 0x19
    1fe8:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	88 8d       	ldd	r24, Y+24	; 0x18
    1fec:	99 8d       	ldd	r25, Y+25	; 0x19
    1fee:	89 2b       	or	r24, r25
    1ff0:	69 f7       	brne	.-38     	; 0x1fcc <LCD_vidWriteChar+0x240>
    1ff2:	14 c0       	rjmp	.+40     	; 0x201c <LCD_vidWriteChar+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff4:	6c 89       	ldd	r22, Y+20	; 0x14
    1ff6:	7d 89       	ldd	r23, Y+21	; 0x15
    1ff8:	8e 89       	ldd	r24, Y+22	; 0x16
    1ffa:	9f 89       	ldd	r25, Y+23	; 0x17
    1ffc:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	99 8f       	std	Y+25, r25	; 0x19
    2006:	88 8f       	std	Y+24, r24	; 0x18
    2008:	88 8d       	ldd	r24, Y+24	; 0x18
    200a:	99 8d       	ldd	r25, Y+25	; 0x19
    200c:	9d 8f       	std	Y+29, r25	; 0x1d
    200e:	8c 8f       	std	Y+28, r24	; 0x1c
    2010:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2012:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_vidWriteChar+0x288>
    2018:	9d 8f       	std	Y+29, r25	; 0x1d
    201a:	8c 8f       	std	Y+28, r24	; 0x1c
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	65 e0       	ldi	r22, 0x05	; 5
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
}
    2026:	00 00       	nop
    2028:	6e 96       	adiw	r28, 0x1e	; 30
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <LCD_vidClrDisp>:


void LCD_vidClrDisp(){
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	6d 97       	sbiw	r28, 0x1d	; 29
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
    204e:	19 82       	std	Y+1, r1	; 0x01
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_Low);
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	64 e0       	ldi	r22, 0x04	; 4
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	for(i=0;i<4;i++){
    205a:	19 82       	std	Y+1, r1	; 0x01
    205c:	1e c0       	rjmp	.+60     	; 0x209a <LCD_vidClrDisp+0x60>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_CLEAR_DIS >> (i+4))& 0x01));
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9c 01       	movw	r18, r24
    2066:	2c 5f       	subi	r18, 0xFC	; 252
    2068:	3f 4f       	sbci	r19, 0xFF	; 255
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <LCD_vidClrDisp+0x3a>
    2070:	95 95       	asr	r25
    2072:	87 95       	ror	r24
    2074:	2a 95       	dec	r18
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <LCD_vidClrDisp+0x36>
    2078:	28 2f       	mov	r18, r24
    207a:	21 70       	andi	r18, 0x01	; 1
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	88 58       	subi	r24, 0x88	; 136
    2084:	9f 4f       	sbci	r25, 0xFF	; 255
    2086:	fc 01       	movw	r30, r24
    2088:	80 81       	ld	r24, Z
    208a:	42 2f       	mov	r20, r18
    208c:	68 2f       	mov	r22, r24
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>


void LCD_vidClrDisp(){
	uint8 i=0;
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_Low);
	for(i=0;i<4;i++){
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	8f 5f       	subi	r24, 0xFF	; 255
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	84 30       	cpi	r24, 0x04	; 4
    209e:	f8 f2       	brcs	.-66     	; 0x205e <LCD_vidClrDisp+0x24>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_CLEAR_DIS >> (i+4))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
    20a0:	41 e0       	ldi	r20, 0x01	; 1
    20a2:	65 e0       	ldi	r22, 0x05	; 5
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 e8       	ldi	r26, 0x80	; 128
    20b0:	bf e3       	ldi	r27, 0x3F	; 63
    20b2:	8e 83       	std	Y+6, r24	; 0x06
    20b4:	9f 83       	std	Y+7, r25	; 0x07
    20b6:	a8 87       	std	Y+8, r26	; 0x08
    20b8:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a e7       	ldi	r20, 0x7A	; 122
    20c0:	53 e4       	ldi	r21, 0x43	; 67
    20c2:	6e 81       	ldd	r22, Y+6	; 0x06
    20c4:	7f 81       	ldd	r23, Y+7	; 0x07
    20c6:	88 85       	ldd	r24, Y+8	; 0x08
    20c8:	99 85       	ldd	r25, Y+9	; 0x09
    20ca:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	8a 87       	std	Y+10, r24	; 0x0a
    20d4:	9b 87       	std	Y+11, r25	; 0x0b
    20d6:	ac 87       	std	Y+12, r26	; 0x0c
    20d8:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	6a 85       	ldd	r22, Y+10	; 0x0a
    20e4:	7b 85       	ldd	r23, Y+11	; 0x0b
    20e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    20e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    20ea:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    20ee:	88 23       	and	r24, r24
    20f0:	2c f4       	brge	.+10     	; 0x20fc <LCD_vidClrDisp+0xc2>
		__ticks = 1;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9f 87       	std	Y+15, r25	; 0x0f
    20f8:	8e 87       	std	Y+14, r24	; 0x0e
    20fa:	3f c0       	rjmp	.+126    	; 0x217a <LCD_vidClrDisp+0x140>
	else if (__tmp > 65535)
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	6a 85       	ldd	r22, Y+10	; 0x0a
    2106:	7b 85       	ldd	r23, Y+11	; 0x0b
    2108:	8c 85       	ldd	r24, Y+12	; 0x0c
    210a:	9d 85       	ldd	r25, Y+13	; 0x0d
    210c:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    2110:	18 16       	cp	r1, r24
    2112:	4c f5       	brge	.+82     	; 0x2166 <LCD_vidClrDisp+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	6e 81       	ldd	r22, Y+6	; 0x06
    211e:	7f 81       	ldd	r23, Y+7	; 0x07
    2120:	88 85       	ldd	r24, Y+8	; 0x08
    2122:	99 85       	ldd	r25, Y+9	; 0x09
    2124:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9f 87       	std	Y+15, r25	; 0x0f
    213a:	8e 87       	std	Y+14, r24	; 0x0e
    213c:	0f c0       	rjmp	.+30     	; 0x215c <LCD_vidClrDisp+0x122>
    213e:	89 e1       	ldi	r24, 0x19	; 25
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	99 8b       	std	Y+17, r25	; 0x11
    2144:	88 8b       	std	Y+16, r24	; 0x10
    2146:	88 89       	ldd	r24, Y+16	; 0x10
    2148:	99 89       	ldd	r25, Y+17	; 0x11
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <LCD_vidClrDisp+0x110>
    214e:	99 8b       	std	Y+17, r25	; 0x11
    2150:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2152:	8e 85       	ldd	r24, Y+14	; 0x0e
    2154:	9f 85       	ldd	r25, Y+15	; 0x0f
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	9f 87       	std	Y+15, r25	; 0x0f
    215a:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215c:	8e 85       	ldd	r24, Y+14	; 0x0e
    215e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2160:	89 2b       	or	r24, r25
    2162:	69 f7       	brne	.-38     	; 0x213e <LCD_vidClrDisp+0x104>
    2164:	14 c0       	rjmp	.+40     	; 0x218e <LCD_vidClrDisp+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2166:	6a 85       	ldd	r22, Y+10	; 0x0a
    2168:	7b 85       	ldd	r23, Y+11	; 0x0b
    216a:	8c 85       	ldd	r24, Y+12	; 0x0c
    216c:	9d 85       	ldd	r25, Y+13	; 0x0d
    216e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	9f 87       	std	Y+15, r25	; 0x0f
    2178:	8e 87       	std	Y+14, r24	; 0x0e
    217a:	8e 85       	ldd	r24, Y+14	; 0x0e
    217c:	9f 85       	ldd	r25, Y+15	; 0x0f
    217e:	9b 8b       	std	Y+19, r25	; 0x13
    2180:	8a 8b       	std	Y+18, r24	; 0x12
    2182:	8a 89       	ldd	r24, Y+18	; 0x12
    2184:	9b 89       	ldd	r25, Y+19	; 0x13
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <LCD_vidClrDisp+0x14c>
    218a:	9b 8b       	std	Y+19, r25	; 0x13
    218c:	8a 8b       	std	Y+18, r24	; 0x12
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	65 e0       	ldi	r22, 0x05	; 5
    2192:	82 e0       	ldi	r24, 0x02	; 2
    2194:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	for(i=0;i<4;i++){
    2198:	19 82       	std	Y+1, r1	; 0x01
    219a:	1b c0       	rjmp	.+54     	; 0x21d2 <LCD_vidClrDisp+0x198>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_CLEAR_DIS >> (i))& 0x01));
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <LCD_vidClrDisp+0x172>
    21a8:	95 95       	asr	r25
    21aa:	87 95       	ror	r24
    21ac:	2a 95       	dec	r18
    21ae:	e2 f7       	brpl	.-8      	; 0x21a8 <LCD_vidClrDisp+0x16e>
    21b0:	28 2f       	mov	r18, r24
    21b2:	21 70       	andi	r18, 0x01	; 1
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	88 2f       	mov	r24, r24
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	88 58       	subi	r24, 0x88	; 136
    21bc:	9f 4f       	sbci	r25, 0xFF	; 255
    21be:	fc 01       	movw	r30, r24
    21c0:	80 81       	ld	r24, Z
    21c2:	42 2f       	mov	r20, r18
    21c4:	68 2f       	mov	r22, r24
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_CLEAR_DIS >> (i+4))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
	for(i=0;i<4;i++){
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	8f 5f       	subi	r24, 0xFF	; 255
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	84 30       	cpi	r24, 0x04	; 4
    21d6:	10 f3       	brcs	.-60     	; 0x219c <LCD_vidClrDisp+0x162>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_CLEAR_DIS >> (i))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	65 e0       	ldi	r22, 0x05	; 5
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 e8       	ldi	r26, 0x80	; 128
    21e8:	bf e3       	ldi	r27, 0x3F	; 63
    21ea:	8a 83       	std	Y+2, r24	; 0x02
    21ec:	9b 83       	std	Y+3, r25	; 0x03
    21ee:	ac 83       	std	Y+4, r26	; 0x04
    21f0:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a e7       	ldi	r20, 0x7A	; 122
    21f8:	53 e4       	ldi	r21, 0x43	; 67
    21fa:	6a 81       	ldd	r22, Y+2	; 0x02
    21fc:	7b 81       	ldd	r23, Y+3	; 0x03
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	9d 81       	ldd	r25, Y+5	; 0x05
    2202:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8c 8b       	std	Y+20, r24	; 0x14
    220c:	9d 8b       	std	Y+21, r25	; 0x15
    220e:	ae 8b       	std	Y+22, r26	; 0x16
    2210:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	6c 89       	ldd	r22, Y+20	; 0x14
    221c:	7d 89       	ldd	r23, Y+21	; 0x15
    221e:	8e 89       	ldd	r24, Y+22	; 0x16
    2220:	9f 89       	ldd	r25, Y+23	; 0x17
    2222:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    2226:	88 23       	and	r24, r24
    2228:	2c f4       	brge	.+10     	; 0x2234 <LCD_vidClrDisp+0x1fa>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	99 8f       	std	Y+25, r25	; 0x19
    2230:	88 8f       	std	Y+24, r24	; 0x18
    2232:	3f c0       	rjmp	.+126    	; 0x22b2 <LCD_vidClrDisp+0x278>
	else if (__tmp > 65535)
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	6c 89       	ldd	r22, Y+20	; 0x14
    223e:	7d 89       	ldd	r23, Y+21	; 0x15
    2240:	8e 89       	ldd	r24, Y+22	; 0x16
    2242:	9f 89       	ldd	r25, Y+23	; 0x17
    2244:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    2248:	18 16       	cp	r1, r24
    224a:	4c f5       	brge	.+82     	; 0x229e <LCD_vidClrDisp+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	6a 81       	ldd	r22, Y+2	; 0x02
    2256:	7b 81       	ldd	r23, Y+3	; 0x03
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	9d 81       	ldd	r25, Y+5	; 0x05
    225c:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	99 8f       	std	Y+25, r25	; 0x19
    2272:	88 8f       	std	Y+24, r24	; 0x18
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <LCD_vidClrDisp+0x25a>
    2276:	89 e1       	ldi	r24, 0x19	; 25
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9b 8f       	std	Y+27, r25	; 0x1b
    227c:	8a 8f       	std	Y+26, r24	; 0x1a
    227e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2280:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_vidClrDisp+0x248>
    2286:	9b 8f       	std	Y+27, r25	; 0x1b
    2288:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	88 8d       	ldd	r24, Y+24	; 0x18
    228c:	99 8d       	ldd	r25, Y+25	; 0x19
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	99 8f       	std	Y+25, r25	; 0x19
    2292:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	88 8d       	ldd	r24, Y+24	; 0x18
    2296:	99 8d       	ldd	r25, Y+25	; 0x19
    2298:	89 2b       	or	r24, r25
    229a:	69 f7       	brne	.-38     	; 0x2276 <LCD_vidClrDisp+0x23c>
    229c:	14 c0       	rjmp	.+40     	; 0x22c6 <LCD_vidClrDisp+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	6c 89       	ldd	r22, Y+20	; 0x14
    22a0:	7d 89       	ldd	r23, Y+21	; 0x15
    22a2:	8e 89       	ldd	r24, Y+22	; 0x16
    22a4:	9f 89       	ldd	r25, Y+23	; 0x17
    22a6:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	99 8f       	std	Y+25, r25	; 0x19
    22b0:	88 8f       	std	Y+24, r24	; 0x18
    22b2:	88 8d       	ldd	r24, Y+24	; 0x18
    22b4:	99 8d       	ldd	r25, Y+25	; 0x19
    22b6:	9d 8f       	std	Y+29, r25	; 0x1d
    22b8:	8c 8f       	std	Y+28, r24	; 0x1c
    22ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <LCD_vidClrDisp+0x284>
    22c2:	9d 8f       	std	Y+29, r25	; 0x1d
    22c4:	8c 8f       	std	Y+28, r24	; 0x1c
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	65 e0       	ldi	r22, 0x05	; 5
    22ca:	82 e0       	ldi	r24, 0x02	; 2
    22cc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
}
    22d0:	00 00       	nop
    22d2:	6d 96       	adiw	r28, 0x1d	; 29
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	08 95       	ret

000022e4 <LCD_vidShiftLeft>:

void LCD_vidShiftLeft(){
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	6d 97       	sbiw	r28, 0x1d	; 29
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
    22f8:	19 82       	std	Y+1, r1	; 0x01
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_Low);
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	64 e0       	ldi	r22, 0x04	; 4
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	for(i=0;i<4;i++){
    2304:	19 82       	std	Y+1, r1	; 0x01
    2306:	1e c0       	rjmp	.+60     	; 0x2344 <LCD_vidShiftLeft+0x60>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_SHIFT_DIS_L >> (i+4))& 0x01));
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	88 2f       	mov	r24, r24
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9c 01       	movw	r18, r24
    2310:	2c 5f       	subi	r18, 0xFC	; 252
    2312:	3f 4f       	sbci	r19, 0xFF	; 255
    2314:	88 e1       	ldi	r24, 0x18	; 24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	02 c0       	rjmp	.+4      	; 0x231e <LCD_vidShiftLeft+0x3a>
    231a:	95 95       	asr	r25
    231c:	87 95       	ror	r24
    231e:	2a 95       	dec	r18
    2320:	e2 f7       	brpl	.-8      	; 0x231a <LCD_vidShiftLeft+0x36>
    2322:	28 2f       	mov	r18, r24
    2324:	21 70       	andi	r18, 0x01	; 1
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	88 58       	subi	r24, 0x88	; 136
    232e:	9f 4f       	sbci	r25, 0xFF	; 255
    2330:	fc 01       	movw	r30, r24
    2332:	80 81       	ld	r24, Z
    2334:	42 2f       	mov	r20, r18
    2336:	68 2f       	mov	r22, r24
    2338:	82 e0       	ldi	r24, 0x02	; 2
    233a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
}

void LCD_vidShiftLeft(){
	uint8 i=0;
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_Low);
	for(i=0;i<4;i++){
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	8f 5f       	subi	r24, 0xFF	; 255
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	84 30       	cpi	r24, 0x04	; 4
    2348:	f8 f2       	brcs	.-66     	; 0x2308 <LCD_vidShiftLeft+0x24>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_SHIFT_DIS_L >> (i+4))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	65 e0       	ldi	r22, 0x05	; 5
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e8       	ldi	r26, 0x80	; 128
    235a:	bf e3       	ldi	r27, 0x3F	; 63
    235c:	8e 83       	std	Y+6, r24	; 0x06
    235e:	9f 83       	std	Y+7, r25	; 0x07
    2360:	a8 87       	std	Y+8, r26	; 0x08
    2362:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4a e7       	ldi	r20, 0x7A	; 122
    236a:	53 e4       	ldi	r21, 0x43	; 67
    236c:	6e 81       	ldd	r22, Y+6	; 0x06
    236e:	7f 81       	ldd	r23, Y+7	; 0x07
    2370:	88 85       	ldd	r24, Y+8	; 0x08
    2372:	99 85       	ldd	r25, Y+9	; 0x09
    2374:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8a 87       	std	Y+10, r24	; 0x0a
    237e:	9b 87       	std	Y+11, r25	; 0x0b
    2380:	ac 87       	std	Y+12, r26	; 0x0c
    2382:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e8       	ldi	r20, 0x80	; 128
    238a:	5f e3       	ldi	r21, 0x3F	; 63
    238c:	6a 85       	ldd	r22, Y+10	; 0x0a
    238e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2390:	8c 85       	ldd	r24, Y+12	; 0x0c
    2392:	9d 85       	ldd	r25, Y+13	; 0x0d
    2394:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    2398:	88 23       	and	r24, r24
    239a:	2c f4       	brge	.+10     	; 0x23a6 <LCD_vidShiftLeft+0xc2>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9f 87       	std	Y+15, r25	; 0x0f
    23a2:	8e 87       	std	Y+14, r24	; 0x0e
    23a4:	3f c0       	rjmp	.+126    	; 0x2424 <LCD_vidShiftLeft+0x140>
	else if (__tmp > 65535)
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	6a 85       	ldd	r22, Y+10	; 0x0a
    23b0:	7b 85       	ldd	r23, Y+11	; 0x0b
    23b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    23b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    23b6:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	4c f5       	brge	.+82     	; 0x2410 <LCD_vidShiftLeft+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	6e 81       	ldd	r22, Y+6	; 0x06
    23c8:	7f 81       	ldd	r23, Y+7	; 0x07
    23ca:	88 85       	ldd	r24, Y+8	; 0x08
    23cc:	99 85       	ldd	r25, Y+9	; 0x09
    23ce:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9f 87       	std	Y+15, r25	; 0x0f
    23e4:	8e 87       	std	Y+14, r24	; 0x0e
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <LCD_vidShiftLeft+0x122>
    23e8:	89 e1       	ldi	r24, 0x19	; 25
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	99 8b       	std	Y+17, r25	; 0x11
    23ee:	88 8b       	std	Y+16, r24	; 0x10
    23f0:	88 89       	ldd	r24, Y+16	; 0x10
    23f2:	99 89       	ldd	r25, Y+17	; 0x11
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_vidShiftLeft+0x110>
    23f8:	99 8b       	std	Y+17, r25	; 0x11
    23fa:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    23fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	9f 87       	std	Y+15, r25	; 0x0f
    2404:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	8e 85       	ldd	r24, Y+14	; 0x0e
    2408:	9f 85       	ldd	r25, Y+15	; 0x0f
    240a:	89 2b       	or	r24, r25
    240c:	69 f7       	brne	.-38     	; 0x23e8 <LCD_vidShiftLeft+0x104>
    240e:	14 c0       	rjmp	.+40     	; 0x2438 <LCD_vidShiftLeft+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	6a 85       	ldd	r22, Y+10	; 0x0a
    2412:	7b 85       	ldd	r23, Y+11	; 0x0b
    2414:	8c 85       	ldd	r24, Y+12	; 0x0c
    2416:	9d 85       	ldd	r25, Y+13	; 0x0d
    2418:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9f 87       	std	Y+15, r25	; 0x0f
    2422:	8e 87       	std	Y+14, r24	; 0x0e
    2424:	8e 85       	ldd	r24, Y+14	; 0x0e
    2426:	9f 85       	ldd	r25, Y+15	; 0x0f
    2428:	9b 8b       	std	Y+19, r25	; 0x13
    242a:	8a 8b       	std	Y+18, r24	; 0x12
    242c:	8a 89       	ldd	r24, Y+18	; 0x12
    242e:	9b 89       	ldd	r25, Y+19	; 0x13
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <LCD_vidShiftLeft+0x14c>
    2434:	9b 8b       	std	Y+19, r25	; 0x13
    2436:	8a 8b       	std	Y+18, r24	; 0x12
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	65 e0       	ldi	r22, 0x05	; 5
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	for(i=0;i<4;i++){
    2442:	19 82       	std	Y+1, r1	; 0x01
    2444:	1b c0       	rjmp	.+54     	; 0x247c <LCD_vidShiftLeft+0x198>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_SHIFT_DIS_L >> (i))& 0x01));
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	88 e1       	ldi	r24, 0x18	; 24
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <LCD_vidShiftLeft+0x172>
    2452:	95 95       	asr	r25
    2454:	87 95       	ror	r24
    2456:	2a 95       	dec	r18
    2458:	e2 f7       	brpl	.-8      	; 0x2452 <LCD_vidShiftLeft+0x16e>
    245a:	28 2f       	mov	r18, r24
    245c:	21 70       	andi	r18, 0x01	; 1
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	88 58       	subi	r24, 0x88	; 136
    2466:	9f 4f       	sbci	r25, 0xFF	; 255
    2468:	fc 01       	movw	r30, r24
    246a:	80 81       	ld	r24, Z
    246c:	42 2f       	mov	r20, r18
    246e:	68 2f       	mov	r22, r24
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_SHIFT_DIS_L >> (i+4))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
	for(i=0;i<4;i++){
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	84 30       	cpi	r24, 0x04	; 4
    2480:	10 f3       	brcs	.-60     	; 0x2446 <LCD_vidShiftLeft+0x162>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_SHIFT_DIS_L >> (i))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
    2482:	41 e0       	ldi	r20, 0x01	; 1
    2484:	65 e0       	ldi	r22, 0x05	; 5
    2486:	82 e0       	ldi	r24, 0x02	; 2
    2488:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a0 e8       	ldi	r26, 0x80	; 128
    2492:	bf e3       	ldi	r27, 0x3F	; 63
    2494:	8a 83       	std	Y+2, r24	; 0x02
    2496:	9b 83       	std	Y+3, r25	; 0x03
    2498:	ac 83       	std	Y+4, r26	; 0x04
    249a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a e7       	ldi	r20, 0x7A	; 122
    24a2:	53 e4       	ldi	r21, 0x43	; 67
    24a4:	6a 81       	ldd	r22, Y+2	; 0x02
    24a6:	7b 81       	ldd	r23, Y+3	; 0x03
    24a8:	8c 81       	ldd	r24, Y+4	; 0x04
    24aa:	9d 81       	ldd	r25, Y+5	; 0x05
    24ac:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	8c 8b       	std	Y+20, r24	; 0x14
    24b6:	9d 8b       	std	Y+21, r25	; 0x15
    24b8:	ae 8b       	std	Y+22, r26	; 0x16
    24ba:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	6c 89       	ldd	r22, Y+20	; 0x14
    24c6:	7d 89       	ldd	r23, Y+21	; 0x15
    24c8:	8e 89       	ldd	r24, Y+22	; 0x16
    24ca:	9f 89       	ldd	r25, Y+23	; 0x17
    24cc:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	2c f4       	brge	.+10     	; 0x24de <LCD_vidShiftLeft+0x1fa>
		__ticks = 1;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	99 8f       	std	Y+25, r25	; 0x19
    24da:	88 8f       	std	Y+24, r24	; 0x18
    24dc:	3f c0       	rjmp	.+126    	; 0x255c <LCD_vidShiftLeft+0x278>
	else if (__tmp > 65535)
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	3f ef       	ldi	r19, 0xFF	; 255
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	6c 89       	ldd	r22, Y+20	; 0x14
    24e8:	7d 89       	ldd	r23, Y+21	; 0x15
    24ea:	8e 89       	ldd	r24, Y+22	; 0x16
    24ec:	9f 89       	ldd	r25, Y+23	; 0x17
    24ee:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	4c f5       	brge	.+82     	; 0x2548 <LCD_vidShiftLeft+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e2       	ldi	r20, 0x20	; 32
    24fc:	51 e4       	ldi	r21, 0x41	; 65
    24fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2500:	7b 81       	ldd	r23, Y+3	; 0x03
    2502:	8c 81       	ldd	r24, Y+4	; 0x04
    2504:	9d 81       	ldd	r25, Y+5	; 0x05
    2506:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	99 8f       	std	Y+25, r25	; 0x19
    251c:	88 8f       	std	Y+24, r24	; 0x18
    251e:	0f c0       	rjmp	.+30     	; 0x253e <LCD_vidShiftLeft+0x25a>
    2520:	89 e1       	ldi	r24, 0x19	; 25
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	9b 8f       	std	Y+27, r25	; 0x1b
    2526:	8a 8f       	std	Y+26, r24	; 0x1a
    2528:	8a 8d       	ldd	r24, Y+26	; 0x1a
    252a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <LCD_vidShiftLeft+0x248>
    2530:	9b 8f       	std	Y+27, r25	; 0x1b
    2532:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2534:	88 8d       	ldd	r24, Y+24	; 0x18
    2536:	99 8d       	ldd	r25, Y+25	; 0x19
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	99 8f       	std	Y+25, r25	; 0x19
    253c:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253e:	88 8d       	ldd	r24, Y+24	; 0x18
    2540:	99 8d       	ldd	r25, Y+25	; 0x19
    2542:	89 2b       	or	r24, r25
    2544:	69 f7       	brne	.-38     	; 0x2520 <LCD_vidShiftLeft+0x23c>
    2546:	14 c0       	rjmp	.+40     	; 0x2570 <LCD_vidShiftLeft+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2548:	6c 89       	ldd	r22, Y+20	; 0x14
    254a:	7d 89       	ldd	r23, Y+21	; 0x15
    254c:	8e 89       	ldd	r24, Y+22	; 0x16
    254e:	9f 89       	ldd	r25, Y+23	; 0x17
    2550:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	99 8f       	std	Y+25, r25	; 0x19
    255a:	88 8f       	std	Y+24, r24	; 0x18
    255c:	88 8d       	ldd	r24, Y+24	; 0x18
    255e:	99 8d       	ldd	r25, Y+25	; 0x19
    2560:	9d 8f       	std	Y+29, r25	; 0x1d
    2562:	8c 8f       	std	Y+28, r24	; 0x1c
    2564:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2566:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <LCD_vidShiftLeft+0x284>
    256c:	9d 8f       	std	Y+29, r25	; 0x1d
    256e:	8c 8f       	std	Y+28, r24	; 0x1c
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	65 e0       	ldi	r22, 0x05	; 5
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
}
    257a:	00 00       	nop
    257c:	6d 96       	adiw	r28, 0x1d	; 29
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	08 95       	ret

0000258e <LCD_vidShiftRight>:


void LCD_vidShiftRight(){
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	6d 97       	sbiw	r28, 0x1d	; 29
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
    25a2:	19 82       	std	Y+1, r1	; 0x01
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_Low);
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	64 e0       	ldi	r22, 0x04	; 4
    25a8:	82 e0       	ldi	r24, 0x02	; 2
    25aa:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	for(i=0;i<4;i++){
    25ae:	19 82       	std	Y+1, r1	; 0x01
    25b0:	1e c0       	rjmp	.+60     	; 0x25ee <LCD_vidShiftRight+0x60>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_SHIFT_DIS_R >> (i+4))& 0x01));
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	88 2f       	mov	r24, r24
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9c 01       	movw	r18, r24
    25ba:	2c 5f       	subi	r18, 0xFC	; 252
    25bc:	3f 4f       	sbci	r19, 0xFF	; 255
    25be:	8c e1       	ldi	r24, 0x1C	; 28
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <LCD_vidShiftRight+0x3a>
    25c4:	95 95       	asr	r25
    25c6:	87 95       	ror	r24
    25c8:	2a 95       	dec	r18
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <LCD_vidShiftRight+0x36>
    25cc:	28 2f       	mov	r18, r24
    25ce:	21 70       	andi	r18, 0x01	; 1
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	88 2f       	mov	r24, r24
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	88 58       	subi	r24, 0x88	; 136
    25d8:	9f 4f       	sbci	r25, 0xFF	; 255
    25da:	fc 01       	movw	r30, r24
    25dc:	80 81       	ld	r24, Z
    25de:	42 2f       	mov	r20, r18
    25e0:	68 2f       	mov	r22, r24
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>


void LCD_vidShiftRight(){
	uint8 i=0;
	GPIO_vSetPinValue(LCD_PORT,RS,Pin_Low);
	for(i=0;i<4;i++){
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	8f 5f       	subi	r24, 0xFF	; 255
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	84 30       	cpi	r24, 0x04	; 4
    25f2:	f8 f2       	brcs	.-66     	; 0x25b2 <LCD_vidShiftRight+0x24>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_SHIFT_DIS_R >> (i+4))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
    25f4:	41 e0       	ldi	r20, 0x01	; 1
    25f6:	65 e0       	ldi	r22, 0x05	; 5
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	a0 e8       	ldi	r26, 0x80	; 128
    2604:	bf e3       	ldi	r27, 0x3F	; 63
    2606:	8e 83       	std	Y+6, r24	; 0x06
    2608:	9f 83       	std	Y+7, r25	; 0x07
    260a:	a8 87       	std	Y+8, r26	; 0x08
    260c:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	4a e7       	ldi	r20, 0x7A	; 122
    2614:	53 e4       	ldi	r21, 0x43	; 67
    2616:	6e 81       	ldd	r22, Y+6	; 0x06
    2618:	7f 81       	ldd	r23, Y+7	; 0x07
    261a:	88 85       	ldd	r24, Y+8	; 0x08
    261c:	99 85       	ldd	r25, Y+9	; 0x09
    261e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	8a 87       	std	Y+10, r24	; 0x0a
    2628:	9b 87       	std	Y+11, r25	; 0x0b
    262a:	ac 87       	std	Y+12, r26	; 0x0c
    262c:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	6a 85       	ldd	r22, Y+10	; 0x0a
    2638:	7b 85       	ldd	r23, Y+11	; 0x0b
    263a:	8c 85       	ldd	r24, Y+12	; 0x0c
    263c:	9d 85       	ldd	r25, Y+13	; 0x0d
    263e:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    2642:	88 23       	and	r24, r24
    2644:	2c f4       	brge	.+10     	; 0x2650 <LCD_vidShiftRight+0xc2>
		__ticks = 1;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	9f 87       	std	Y+15, r25	; 0x0f
    264c:	8e 87       	std	Y+14, r24	; 0x0e
    264e:	3f c0       	rjmp	.+126    	; 0x26ce <LCD_vidShiftRight+0x140>
	else if (__tmp > 65535)
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	3f ef       	ldi	r19, 0xFF	; 255
    2654:	4f e7       	ldi	r20, 0x7F	; 127
    2656:	57 e4       	ldi	r21, 0x47	; 71
    2658:	6a 85       	ldd	r22, Y+10	; 0x0a
    265a:	7b 85       	ldd	r23, Y+11	; 0x0b
    265c:	8c 85       	ldd	r24, Y+12	; 0x0c
    265e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2660:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    2664:	18 16       	cp	r1, r24
    2666:	4c f5       	brge	.+82     	; 0x26ba <LCD_vidShiftRight+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e2       	ldi	r20, 0x20	; 32
    266e:	51 e4       	ldi	r21, 0x41	; 65
    2670:	6e 81       	ldd	r22, Y+6	; 0x06
    2672:	7f 81       	ldd	r23, Y+7	; 0x07
    2674:	88 85       	ldd	r24, Y+8	; 0x08
    2676:	99 85       	ldd	r25, Y+9	; 0x09
    2678:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	9f 87       	std	Y+15, r25	; 0x0f
    268e:	8e 87       	std	Y+14, r24	; 0x0e
    2690:	0f c0       	rjmp	.+30     	; 0x26b0 <LCD_vidShiftRight+0x122>
    2692:	89 e1       	ldi	r24, 0x19	; 25
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	99 8b       	std	Y+17, r25	; 0x11
    2698:	88 8b       	std	Y+16, r24	; 0x10
    269a:	88 89       	ldd	r24, Y+16	; 0x10
    269c:	99 89       	ldd	r25, Y+17	; 0x11
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <LCD_vidShiftRight+0x110>
    26a2:	99 8b       	std	Y+17, r25	; 0x11
    26a4:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	9f 87       	std	Y+15, r25	; 0x0f
    26ae:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    26b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    26b4:	89 2b       	or	r24, r25
    26b6:	69 f7       	brne	.-38     	; 0x2692 <LCD_vidShiftRight+0x104>
    26b8:	14 c0       	rjmp	.+40     	; 0x26e2 <LCD_vidShiftRight+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ba:	6a 85       	ldd	r22, Y+10	; 0x0a
    26bc:	7b 85       	ldd	r23, Y+11	; 0x0b
    26be:	8c 85       	ldd	r24, Y+12	; 0x0c
    26c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    26c2:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9f 87       	std	Y+15, r25	; 0x0f
    26cc:	8e 87       	std	Y+14, r24	; 0x0e
    26ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    26d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    26d2:	9b 8b       	std	Y+19, r25	; 0x13
    26d4:	8a 8b       	std	Y+18, r24	; 0x12
    26d6:	8a 89       	ldd	r24, Y+18	; 0x12
    26d8:	9b 89       	ldd	r25, Y+19	; 0x13
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <LCD_vidShiftRight+0x14c>
    26de:	9b 8b       	std	Y+19, r25	; 0x13
    26e0:	8a 8b       	std	Y+18, r24	; 0x12
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	65 e0       	ldi	r22, 0x05	; 5
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
	for(i=0;i<4;i++){
    26ec:	19 82       	std	Y+1, r1	; 0x01
    26ee:	1b c0       	rjmp	.+54     	; 0x2726 <LCD_vidShiftRight+0x198>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_SHIFT_DIS_R >> (i))& 0x01));
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	8c e1       	ldi	r24, 0x1C	; 28
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <LCD_vidShiftRight+0x172>
    26fc:	95 95       	asr	r25
    26fe:	87 95       	ror	r24
    2700:	2a 95       	dec	r18
    2702:	e2 f7       	brpl	.-8      	; 0x26fc <LCD_vidShiftRight+0x16e>
    2704:	28 2f       	mov	r18, r24
    2706:	21 70       	andi	r18, 0x01	; 1
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	88 2f       	mov	r24, r24
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	88 58       	subi	r24, 0x88	; 136
    2710:	9f 4f       	sbci	r25, 0xFF	; 255
    2712:	fc 01       	movw	r30, r24
    2714:	80 81       	ld	r24, Z
    2716:	42 2f       	mov	r20, r18
    2718:	68 2f       	mov	r22, r24
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_SHIFT_DIS_R >> (i+4))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
	for(i=0;i<4;i++){
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	8f 5f       	subi	r24, 0xFF	; 255
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	84 30       	cpi	r24, 0x04	; 4
    272a:	10 f3       	brcs	.-60     	; 0x26f0 <LCD_vidShiftRight+0x162>
		GPIO_vSetPinValue(LCD_PORT,LCD_Data_Pin[i],((_LCD_SHIFT_DIS_R >> (i))& 0x01));
	}
	GPIO_vSetPinValue(LCD_PORT,E,Pin_High);
    272c:	41 e0       	ldi	r20, 0x01	; 1
    272e:	65 e0       	ldi	r22, 0x05	; 5
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	a0 e8       	ldi	r26, 0x80	; 128
    273c:	bf e3       	ldi	r27, 0x3F	; 63
    273e:	8a 83       	std	Y+2, r24	; 0x02
    2740:	9b 83       	std	Y+3, r25	; 0x03
    2742:	ac 83       	std	Y+4, r26	; 0x04
    2744:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	4a e7       	ldi	r20, 0x7A	; 122
    274c:	53 e4       	ldi	r21, 0x43	; 67
    274e:	6a 81       	ldd	r22, Y+2	; 0x02
    2750:	7b 81       	ldd	r23, Y+3	; 0x03
    2752:	8c 81       	ldd	r24, Y+4	; 0x04
    2754:	9d 81       	ldd	r25, Y+5	; 0x05
    2756:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	8c 8b       	std	Y+20, r24	; 0x14
    2760:	9d 8b       	std	Y+21, r25	; 0x15
    2762:	ae 8b       	std	Y+22, r26	; 0x16
    2764:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e8       	ldi	r20, 0x80	; 128
    276c:	5f e3       	ldi	r21, 0x3F	; 63
    276e:	6c 89       	ldd	r22, Y+20	; 0x14
    2770:	7d 89       	ldd	r23, Y+21	; 0x15
    2772:	8e 89       	ldd	r24, Y+22	; 0x16
    2774:	9f 89       	ldd	r25, Y+23	; 0x17
    2776:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__cmpsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <LCD_vidShiftRight+0x1fa>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	99 8f       	std	Y+25, r25	; 0x19
    2784:	88 8f       	std	Y+24, r24	; 0x18
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <LCD_vidShiftRight+0x278>
	else if (__tmp > 65535)
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	3f ef       	ldi	r19, 0xFF	; 255
    278c:	4f e7       	ldi	r20, 0x7F	; 127
    278e:	57 e4       	ldi	r21, 0x47	; 71
    2790:	6c 89       	ldd	r22, Y+20	; 0x14
    2792:	7d 89       	ldd	r23, Y+21	; 0x15
    2794:	8e 89       	ldd	r24, Y+22	; 0x16
    2796:	9f 89       	ldd	r25, Y+23	; 0x17
    2798:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__gesf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <LCD_vidShiftRight+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e2       	ldi	r20, 0x20	; 32
    27a6:	51 e4       	ldi	r21, 0x41	; 65
    27a8:	6a 81       	ldd	r22, Y+2	; 0x02
    27aa:	7b 81       	ldd	r23, Y+3	; 0x03
    27ac:	8c 81       	ldd	r24, Y+4	; 0x04
    27ae:	9d 81       	ldd	r25, Y+5	; 0x05
    27b0:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	99 8f       	std	Y+25, r25	; 0x19
    27c6:	88 8f       	std	Y+24, r24	; 0x18
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <LCD_vidShiftRight+0x25a>
    27ca:	89 e1       	ldi	r24, 0x19	; 25
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9b 8f       	std	Y+27, r25	; 0x1b
    27d0:	8a 8f       	std	Y+26, r24	; 0x1a
    27d2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27d4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <LCD_vidShiftRight+0x248>
    27da:	9b 8f       	std	Y+27, r25	; 0x1b
    27dc:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	88 8d       	ldd	r24, Y+24	; 0x18
    27e0:	99 8d       	ldd	r25, Y+25	; 0x19
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	99 8f       	std	Y+25, r25	; 0x19
    27e6:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	88 8d       	ldd	r24, Y+24	; 0x18
    27ea:	99 8d       	ldd	r25, Y+25	; 0x19
    27ec:	89 2b       	or	r24, r25
    27ee:	69 f7       	brne	.-38     	; 0x27ca <LCD_vidShiftRight+0x23c>
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <LCD_vidShiftRight+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	6c 89       	ldd	r22, Y+20	; 0x14
    27f4:	7d 89       	ldd	r23, Y+21	; 0x15
    27f6:	8e 89       	ldd	r24, Y+22	; 0x16
    27f8:	9f 89       	ldd	r25, Y+23	; 0x17
    27fa:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	99 8f       	std	Y+25, r25	; 0x19
    2804:	88 8f       	std	Y+24, r24	; 0x18
    2806:	88 8d       	ldd	r24, Y+24	; 0x18
    2808:	99 8d       	ldd	r25, Y+25	; 0x19
    280a:	9d 8f       	std	Y+29, r25	; 0x1d
    280c:	8c 8f       	std	Y+28, r24	; 0x1c
    280e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2810:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <LCD_vidShiftRight+0x284>
    2816:	9d 8f       	std	Y+29, r25	; 0x1d
    2818:	8c 8f       	std	Y+28, r24	; 0x1c
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_PORT,E,Pin_Low);
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	65 e0       	ldi	r22, 0x05	; 5
    281e:	82 e0       	ldi	r24, 0x02	; 2
    2820:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
}
    2824:	00 00       	nop
    2826:	6d 96       	adiw	r28, 0x1d	; 29
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	08 95       	ret

00002838 <LCD_vidWriteInt>:

void LCD_vidWriteInt(sint32 u32NumCopy){
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	60 97       	sbiw	r28, 0x10	; 16
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	6d 87       	std	Y+13, r22	; 0x0d
    2852:	7e 87       	std	Y+14, r23	; 0x0e
    2854:	8f 87       	std	Y+15, r24	; 0x0f
    2856:	98 8b       	std	Y+16, r25	; 0x10
	uint8 arr[11]={0};
    2858:	2b e0       	ldi	r18, 0x0B	; 11
    285a:	ce 01       	movw	r24, r28
    285c:	02 96       	adiw	r24, 0x02	; 2
    285e:	fc 01       	movw	r30, r24
    2860:	32 2f       	mov	r19, r18
    2862:	11 92       	st	Z+, r1
    2864:	3a 95       	dec	r19
    2866:	e9 f7       	brne	.-6      	; 0x2862 <LCD_vidWriteInt+0x2a>
	sint8 i=0;
    2868:	19 82       	std	Y+1, r1	; 0x01
	if(u32NumCopy <0){
    286a:	8d 85       	ldd	r24, Y+13	; 0x0d
    286c:	9e 85       	ldd	r25, Y+14	; 0x0e
    286e:	af 85       	ldd	r26, Y+15	; 0x0f
    2870:	b8 89       	ldd	r27, Y+16	; 0x10
    2872:	bb 23       	and	r27, r27
    2874:	0c f0       	brlt	.+2      	; 0x2878 <LCD_vidWriteInt+0x40>
    2876:	41 c0       	rjmp	.+130    	; 0x28fa <LCD_vidWriteInt+0xc2>
		LCD_vidWriteChar('-');
    2878:	8d e2       	ldi	r24, 0x2D	; 45
    287a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_vidWriteChar>
		u32NumCopy *= -1;
    287e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2880:	9e 85       	ldd	r25, Y+14	; 0x0e
    2882:	af 85       	ldd	r26, Y+15	; 0x0f
    2884:	b8 89       	ldd	r27, Y+16	; 0x10
    2886:	b0 95       	com	r27
    2888:	a0 95       	com	r26
    288a:	90 95       	com	r25
    288c:	81 95       	neg	r24
    288e:	9f 4f       	sbci	r25, 0xFF	; 255
    2890:	af 4f       	sbci	r26, 0xFF	; 255
    2892:	bf 4f       	sbci	r27, 0xFF	; 255
    2894:	8d 87       	std	Y+13, r24	; 0x0d
    2896:	9e 87       	std	Y+14, r25	; 0x0e
    2898:	af 87       	std	Y+15, r26	; 0x0f
    289a:	b8 8b       	std	Y+16, r27	; 0x10
	}

	while(u32NumCopy){
    289c:	2e c0       	rjmp	.+92     	; 0x28fa <LCD_vidWriteInt+0xc2>
		arr[i]=(uint8)(u32NumCopy%10);
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	08 2f       	mov	r16, r24
    28a2:	88 0f       	add	r24, r24
    28a4:	11 0b       	sbc	r17, r17
    28a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28aa:	af 85       	ldd	r26, Y+15	; 0x0f
    28ac:	b8 89       	ldd	r27, Y+16	; 0x10
    28ae:	2a e0       	ldi	r18, 0x0A	; 10
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e0       	ldi	r20, 0x00	; 0
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__divmodsi4>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	28 2f       	mov	r18, r24
    28c4:	ce 01       	movw	r24, r28
    28c6:	02 96       	adiw	r24, 0x02	; 2
    28c8:	80 0f       	add	r24, r16
    28ca:	91 1f       	adc	r25, r17
    28cc:	fc 01       	movw	r30, r24
    28ce:	20 83       	st	Z, r18
		u32NumCopy /=10;
    28d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d4:	af 85       	ldd	r26, Y+15	; 0x0f
    28d6:	b8 89       	ldd	r27, Y+16	; 0x10
    28d8:	2a e0       	ldi	r18, 0x0A	; 10
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e0       	ldi	r20, 0x00	; 0
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	bc 01       	movw	r22, r24
    28e2:	cd 01       	movw	r24, r26
    28e4:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__divmodsi4>
    28e8:	da 01       	movw	r26, r20
    28ea:	c9 01       	movw	r24, r18
    28ec:	8d 87       	std	Y+13, r24	; 0x0d
    28ee:	9e 87       	std	Y+14, r25	; 0x0e
    28f0:	af 87       	std	Y+15, r26	; 0x0f
    28f2:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	8f 5f       	subi	r24, 0xFF	; 255
    28f8:	89 83       	std	Y+1, r24	; 0x01
	if(u32NumCopy <0){
		LCD_vidWriteChar('-');
		u32NumCopy *= -1;
	}

	while(u32NumCopy){
    28fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28fe:	af 85       	ldd	r26, Y+15	; 0x0f
    2900:	b8 89       	ldd	r27, Y+16	; 0x10
    2902:	89 2b       	or	r24, r25
    2904:	8a 2b       	or	r24, r26
    2906:	8b 2b       	or	r24, r27
    2908:	51 f6       	brne	.-108    	; 0x289e <LCD_vidWriteInt+0x66>
		arr[i]=(uint8)(u32NumCopy%10);
		u32NumCopy /=10;
		i++;
	}

	for(i=i-1;i>=0;i--){
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	81 50       	subi	r24, 0x01	; 1
    290e:	89 83       	std	Y+1, r24	; 0x01
    2910:	11 c0       	rjmp	.+34     	; 0x2934 <LCD_vidWriteInt+0xfc>
		LCD_vidWriteChar((arr[i]+'0'));
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	08 2e       	mov	r0, r24
    2916:	00 0c       	add	r0, r0
    2918:	99 0b       	sbc	r25, r25
    291a:	9e 01       	movw	r18, r28
    291c:	2e 5f       	subi	r18, 0xFE	; 254
    291e:	3f 4f       	sbci	r19, 0xFF	; 255
    2920:	82 0f       	add	r24, r18
    2922:	93 1f       	adc	r25, r19
    2924:	fc 01       	movw	r30, r24
    2926:	80 81       	ld	r24, Z
    2928:	80 5d       	subi	r24, 0xD0	; 208
    292a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_vidWriteChar>
		arr[i]=(uint8)(u32NumCopy%10);
		u32NumCopy /=10;
		i++;
	}

	for(i=i-1;i>=0;i--){
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	81 50       	subi	r24, 0x01	; 1
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	88 23       	and	r24, r24
    2938:	64 f7       	brge	.-40     	; 0x2912 <LCD_vidWriteInt+0xda>
		LCD_vidWriteChar((arr[i]+'0'));
	}
}
    293a:	00 00       	nop
    293c:	60 96       	adiw	r28, 0x10	; 16
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	08 95       	ret

00002952 <LCD_vidWriteStr>:

void LCD_vidWriteStr(uint8 *u8StrCopy){
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	00 d0       	rcall	.+0      	; 0x2958 <LCD_vidWriteStr+0x6>
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	89 83       	std	Y+1, r24	; 0x01
	while(((*u8StrCopy) != '\0')){
    2960:	0b c0       	rjmp	.+22     	; 0x2978 <LCD_vidWriteStr+0x26>
		LCD_vidWriteChar((*(u8StrCopy++)));
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	9a 81       	ldd	r25, Y+2	; 0x02
    2966:	9c 01       	movw	r18, r24
    2968:	2f 5f       	subi	r18, 0xFF	; 255
    296a:	3f 4f       	sbci	r19, 0xFF	; 255
    296c:	3a 83       	std	Y+2, r19	; 0x02
    296e:	29 83       	std	Y+1, r18	; 0x01
    2970:	fc 01       	movw	r30, r24
    2972:	80 81       	ld	r24, Z
    2974:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_vidWriteChar>
		LCD_vidWriteChar((arr[i]+'0'));
	}
}

void LCD_vidWriteStr(uint8 *u8StrCopy){
	while(((*u8StrCopy) != '\0')){
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	fc 01       	movw	r30, r24
    297e:	80 81       	ld	r24, Z
    2980:	88 23       	and	r24, r24
    2982:	79 f7       	brne	.-34     	; 0x2962 <LCD_vidWriteStr+0x10>
		LCD_vidWriteChar((*(u8StrCopy++)));
	}
}
    2984:	00 00       	nop
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	08 95       	ret

00002990 <LCD_vidGoto>:

void LCD_vidGoto(uint8 u8RowCopy,uint8 u8ColCopy){
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	00 d0       	rcall	.+0      	; 0x2996 <LCD_vidGoto+0x6>
    2996:	1f 92       	push	r1
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	8a 83       	std	Y+2, r24	; 0x02
    299e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 add=0;
    29a0:	19 82       	std	Y+1, r1	; 0x01
	switch(u8RowCopy){
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	88 2f       	mov	r24, r24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	81 30       	cpi	r24, 0x01	; 1
    29aa:	91 05       	cpc	r25, r1
    29ac:	19 f0       	breq	.+6      	; 0x29b4 <LCD_vidGoto+0x24>
    29ae:	02 97       	sbiw	r24, 0x02	; 2
    29b0:	21 f0       	breq	.+8      	; 0x29ba <LCD_vidGoto+0x2a>
    29b2:	07 c0       	rjmp	.+14     	; 0x29c2 <LCD_vidGoto+0x32>
	case 1 : add=u8ColCopy;  break;
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	04 c0       	rjmp	.+8      	; 0x29c2 <LCD_vidGoto+0x32>
	case 2 : add=u8ColCopy+0x40;  break;
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	80 5c       	subi	r24, 0xC0	; 192
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	00 00       	nop
	}
	LCD_vidWriteCmd((add+_LCD_AD_DDRAM));
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	80 58       	subi	r24, 0x80	; 128
    29c6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_vidWriteCmd>
}
    29ca:	00 00       	nop
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	df 91       	pop	r29
    29d4:	cf 91       	pop	r28
    29d6:	08 95       	ret

000029d8 <LCD_vidWritePatternCGRAM>:

void LCD_vidWritePatternCGRAM(uint8 *u8Pattern,uint8 u8Loc){
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	00 d0       	rcall	.+0      	; 0x29de <LCD_vidWritePatternCGRAM+0x6>
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <LCD_vidWritePatternCGRAM+0x8>
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	9b 83       	std	Y+3, r25	; 0x03
    29e6:	8a 83       	std	Y+2, r24	; 0x02
    29e8:	6c 83       	std	Y+4, r22	; 0x04
	LCD_vidWriteCmd((_LCD_AD_CGRAM + ((u8Loc-1)*8)));
    29ea:	8c 81       	ldd	r24, Y+4	; 0x04
    29ec:	88 2f       	mov	r24, r24
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	07 96       	adiw	r24, 0x07	; 7
    29f2:	88 0f       	add	r24, r24
    29f4:	88 0f       	add	r24, r24
    29f6:	88 0f       	add	r24, r24
    29f8:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_vidWriteCmd>
	uint8 i=0;
    29fc:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<8;i++){
    29fe:	19 82       	std	Y+1, r1	; 0x01
    2a00:	0e c0       	rjmp	.+28     	; 0x2a1e <LCD_vidWritePatternCGRAM+0x46>
		LCD_vidWriteChar(u8Pattern[i]);
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	88 2f       	mov	r24, r24
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	2a 81       	ldd	r18, Y+2	; 0x02
    2a0a:	3b 81       	ldd	r19, Y+3	; 0x03
    2a0c:	82 0f       	add	r24, r18
    2a0e:	93 1f       	adc	r25, r19
    2a10:	fc 01       	movw	r30, r24
    2a12:	80 81       	ld	r24, Z
    2a14:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_vidWriteChar>
}

void LCD_vidWritePatternCGRAM(uint8 *u8Pattern,uint8 u8Loc){
	LCD_vidWriteCmd((_LCD_AD_CGRAM + ((u8Loc-1)*8)));
	uint8 i=0;
	for(i=0;i<8;i++){
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	8f 5f       	subi	r24, 0xFF	; 255
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	88 30       	cpi	r24, 0x08	; 8
    2a22:	78 f3       	brcs	.-34     	; 0x2a02 <LCD_vidWritePatternCGRAM+0x2a>
		LCD_vidWriteChar(u8Pattern[i]);
	}
}
    2a24:	00 00       	nop
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	df 91       	pop	r29
    2a30:	cf 91       	pop	r28
    2a32:	08 95       	ret

00002a34 <DcMotor_Init>:
 *      Author: ziad
 */

#include "DC_MOTOR.h"

void DcMotor_Init(void) {
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
	GPIO_vSetPinDirection(DcMotorIN1_port, DcMotorIN1_pin, Pin_Output);
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	83 e0       	ldi	r24, 0x03	; 3
    2a42:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
	GPIO_vSetPinDirection(DcMotorIN2_port, DcMotorIN2_pin, Pin_Output);
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	61 e0       	ldi	r22, 0x01	; 1
    2a4a:	83 e0       	ldi	r24, 0x03	; 3
    2a4c:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
	GPIO_vSetPinDirection(DcMotorEN_port, DcMotorEN_pin, Pin_Output);
    2a50:	40 e0       	ldi	r20, 0x00	; 0
    2a52:	63 e0       	ldi	r22, 0x03	; 3
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
}
    2a5a:	00 00       	nop
    2a5c:	df 91       	pop	r29
    2a5e:	cf 91       	pop	r28
    2a60:	08 95       	ret

00002a62 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed) {
    2a62:	cf 93       	push	r28
    2a64:	df 93       	push	r29
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <DcMotor_Rotate+0x6>
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	81 30       	cpi	r24, 0x01	; 1
    2a78:	91 05       	cpc	r25, r1
    2a7a:	81 f0       	breq	.+32     	; 0x2a9c <DcMotor_Rotate+0x3a>
    2a7c:	82 30       	cpi	r24, 0x02	; 2
    2a7e:	91 05       	cpc	r25, r1
    2a80:	c1 f0       	breq	.+48     	; 0x2ab2 <DcMotor_Rotate+0x50>
    2a82:	89 2b       	or	r24, r25
    2a84:	09 f5       	brne	.+66     	; 0x2ac8 <DcMotor_Rotate+0x66>
		case forward:
			GPIO_vSetPinValue(DcMotorIN1_port, DcMotorIN1_pin, Pin_High);
    2a86:	41 e0       	ldi	r20, 0x01	; 1
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	83 e0       	ldi	r24, 0x03	; 3
    2a8c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
			GPIO_vSetPinValue(DcMotorIN2_port, DcMotorIN2_pin, Pin_Low);
    2a90:	40 e0       	ldi	r20, 0x00	; 0
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	83 e0       	ldi	r24, 0x03	; 3
    2a96:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
			break;
    2a9a:	16 c0       	rjmp	.+44     	; 0x2ac8 <DcMotor_Rotate+0x66>
		case reverse:
			GPIO_vSetPinValue(DcMotorIN1_port, DcMotorIN1_pin, Pin_Low);
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	83 e0       	ldi	r24, 0x03	; 3
    2aa2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
			GPIO_vSetPinValue(DcMotorIN2_port, DcMotorIN2_pin, Pin_High);
    2aa6:	41 e0       	ldi	r20, 0x01	; 1
    2aa8:	61 e0       	ldi	r22, 0x01	; 1
    2aaa:	83 e0       	ldi	r24, 0x03	; 3
    2aac:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
			break;
    2ab0:	0b c0       	rjmp	.+22     	; 0x2ac8 <DcMotor_Rotate+0x66>
		case stop:
			GPIO_vSetPinValue(DcMotorIN1_port, DcMotorIN1_pin, Pin_Low);
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	83 e0       	ldi	r24, 0x03	; 3
    2ab8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
			GPIO_vSetPinValue(DcMotorIN2_port, DcMotorIN2_pin, Pin_Low);
    2abc:	40 e0       	ldi	r20, 0x00	; 0
    2abe:	61 e0       	ldi	r22, 0x01	; 1
    2ac0:	83 e0       	ldi	r24, 0x03	; 3
    2ac2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
			break;
    2ac6:	00 00       	nop
	}
	PWM_Timer0_Start(speed);
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	0e 94 52 03 	call	0x6a4	; 0x6a4 <PWM_Timer0_Start>
}
    2ace:	00 00       	nop
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	08 95       	ret

00002ada <Buzzer_init>:
 *      Author: ziad
 */

#include "BUZZ.h"

void Buzzer_init() {
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
	GPIO_vSetPinDirection(Buzzr_port, Buzzr_pin, Pin_Output);
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	65 e0       	ldi	r22, 0x05	; 5
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
}
    2aec:	00 00       	nop
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	08 95       	ret

00002af4 <Buzzer_ON>:

void Buzzer_ON() {
    2af4:	cf 93       	push	r28
    2af6:	df 93       	push	r29
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
	GPIO_vSetPinValue(Buzzr_port, Buzzr_pin, Pin_High);
    2afc:	41 e0       	ldi	r20, 0x01	; 1
    2afe:	65 e0       	ldi	r22, 0x05	; 5
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
}
    2b06:	00 00       	nop
    2b08:	df 91       	pop	r29
    2b0a:	cf 91       	pop	r28
    2b0c:	08 95       	ret

00002b0e <Buzzer_OFF>:

void Buzzer_OFF() {
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
	GPIO_vSetPinValue(Buzzr_port, Buzzr_pin, Pin_High);
    2b16:	41 e0       	ldi	r20, 0x01	; 1
    2b18:	65 e0       	ldi	r22, 0x05	; 5
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPIO_vSetPinValue>
}
    2b20:	00 00       	nop
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	08 95       	ret

00002b28 <BUTTON_init>:
 *      Author: ziad
 */

#include "BTN.h"

void BUTTON_init() {
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
	GPIO_vSetPinDirection(btn_Port, btn_Pin, Port_Output);
    2b30:	4f ef       	ldi	r20, 0xFF	; 255
    2b32:	62 e0       	ldi	r22, 0x02	; 2
    2b34:	83 e0       	ldi	r24, 0x03	; 3
    2b36:	0e 94 86 05 	call	0xb0c	; 0xb0c <GPIO_vSetPinDirection>
}
    2b3a:	00 00       	nop
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	08 95       	ret

00002b42 <BUTTON_read>:

uint8 BUTTON_read() {
    2b42:	cf 93       	push	r28
    2b44:	df 93       	push	r29
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
	return GPIO_u8GetPinValue(btn_Port, btn_Pin);
    2b4a:	62 e0       	ldi	r22, 0x02	; 2
    2b4c:	83 e0       	ldi	r24, 0x03	; 3
    2b4e:	0e 94 76 06 	call	0xcec	; 0xcec <GPIO_u8GetPinValue>
}
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	08 95       	ret

00002b58 <main>:
volatile uint8_t speed = 0;
volatile uint16_t distance = 0;
volatile uint8 acc_enabled = 1;
volatile uint8 motor_speed = 0;

int main(void) {
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_init();
    2b60:	0e 94 c9 07 	call	0xf92	; 0xf92 <Ultrasonic_init>
	TIMER0_vidInit();
    2b64:	0e 94 2a 03 	call	0x654	; 0x654 <TIMER0_vidInit>
	EX_Interrupt_init(EX_INT0, EX_Rising_Edge);
    2b68:	63 e0       	ldi	r22, 0x03	; 3
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	0e 94 19 04 	call	0x832	; 0x832 <EX_Interrupt_init>
	ADC_vidInit();
    2b70:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <ADC_vidInit>
	Buzzer_init();
    2b74:	0e 94 6d 15 	call	0x2ada	; 0x2ada <Buzzer_init>
	DcMotor_Init();
    2b78:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <DcMotor_Init>
	LCD_vidInit();
    2b7c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidInit>
	LCD_vidGoto(1, 0);
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_vidGoto>
	LCD_vidWriteStr("speed:");
    2b88:	8d e7       	ldi	r24, 0x7D	; 125
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 a9 14 	call	0x2952	; 0x2952 <LCD_vidWriteStr>
	LCD_vidGoto(2, 0);
    2b90:	60 e0       	ldi	r22, 0x00	; 0
    2b92:	82 e0       	ldi	r24, 0x02	; 2
    2b94:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_vidGoto>
	LCD_vidWriteStr("distance:");
    2b98:	84 e8       	ldi	r24, 0x84	; 132
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0e 94 a9 14 	call	0x2952	; 0x2952 <LCD_vidWriteStr>

	while(1) {
		speed = (ADC_u16ReadDigitalVal(ADC_CHANNEL1) * 100) / 1023;
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	0e 94 18 07 	call	0xe30	; 0xe30 <ADC_u16ReadDigitalVal>
    2ba6:	9c 01       	movw	r18, r24
    2ba8:	44 e6       	ldi	r20, 0x64	; 100
    2baa:	42 9f       	mul	r20, r18
    2bac:	c0 01       	movw	r24, r0
    2bae:	43 9f       	mul	r20, r19
    2bb0:	90 0d       	add	r25, r0
    2bb2:	11 24       	eor	r1, r1
    2bb4:	2f ef       	ldi	r18, 0xFF	; 255
    2bb6:	33 e0       	ldi	r19, 0x03	; 3
    2bb8:	b9 01       	movw	r22, r18
    2bba:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__udivmodhi4>
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <speed>
		distance = Ultrasonic_readDistance();
    2bc4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <Ultrasonic_readDistance>
    2bc8:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <distance+0x1>
    2bcc:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <distance>

		LCD_vidGoto(1, 9); LCD_vidWriteStr("    ");
    2bd0:	69 e0       	ldi	r22, 0x09	; 9
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_vidGoto>
    2bd8:	8e e8       	ldi	r24, 0x8E	; 142
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	0e 94 a9 14 	call	0x2952	; 0x2952 <LCD_vidWriteStr>
		LCD_vidGoto(1, 9); LCD_vidWriteInt(speed);
    2be0:	69 e0       	ldi	r22, 0x09	; 9
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_vidGoto>
    2be8:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <speed>
    2bec:	88 2f       	mov	r24, r24
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a0 e0       	ldi	r26, 0x00	; 0
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_vidWriteInt>
		LCD_vidGoto(1, 13); LCD_vidWriteStr("km/h");
    2bfc:	6d e0       	ldi	r22, 0x0D	; 13
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_vidGoto>
    2c04:	83 e9       	ldi	r24, 0x93	; 147
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	0e 94 a9 14 	call	0x2952	; 0x2952 <LCD_vidWriteStr>

		LCD_vidGoto(2, 10); LCD_vidWriteStr("    ");
    2c0c:	6a e0       	ldi	r22, 0x0A	; 10
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_vidGoto>
    2c14:	8e e8       	ldi	r24, 0x8E	; 142
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	0e 94 a9 14 	call	0x2952	; 0x2952 <LCD_vidWriteStr>
		LCD_vidGoto(2, 10); LCD_vidWriteInt(distance);
    2c1c:	6a e0       	ldi	r22, 0x0A	; 10
    2c1e:	82 e0       	ldi	r24, 0x02	; 2
    2c20:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_vidGoto>
    2c24:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <distance>
    2c28:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <distance+0x1>
    2c2c:	cc 01       	movw	r24, r24
    2c2e:	a0 e0       	ldi	r26, 0x00	; 0
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_vidWriteInt>
		LCD_vidGoto(2, 13); LCD_vidWriteStr("cm");
    2c3a:	6d e0       	ldi	r22, 0x0D	; 13
    2c3c:	82 e0       	ldi	r24, 0x02	; 2
    2c3e:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_vidGoto>
    2c42:	88 e9       	ldi	r24, 0x98	; 152
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	0e 94 a9 14 	call	0x2952	; 0x2952 <LCD_vidWriteStr>

		if (acc_enabled) {
    2c4a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <acc_enabled>
    2c4e:	88 23       	and	r24, r24
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <main+0xfc>
    2c52:	48 c0       	rjmp	.+144    	; 0x2ce4 <main+0x18c>
			if (distance < 20) {
    2c54:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <distance>
    2c58:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <distance+0x1>
    2c5c:	44 97       	sbiw	r24, 0x14	; 20
    2c5e:	38 f4       	brcc	.+14     	; 0x2c6e <main+0x116>
				DcMotor_Rotate(stop, 0);
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	82 e0       	ldi	r24, 0x02	; 2
    2c64:	0e 94 31 15 	call	0x2a62	; 0x2a62 <DcMotor_Rotate>
				Buzzer_ON();
    2c68:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Buzzer_ON>
    2c6c:	99 cf       	rjmp	.-206    	; 0x2ba0 <main+0x48>
			}
			else if (distance < 50) {
    2c6e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <distance>
    2c72:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <distance+0x1>
    2c76:	c2 97       	sbiw	r24, 0x32	; 50
    2c78:	98 f4       	brcc	.+38     	; 0x2ca0 <main+0x148>
				motor_speed = speed / 5;
    2c7a:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <speed>
    2c7e:	8d ec       	ldi	r24, 0xCD	; 205
    2c80:	98 9f       	mul	r25, r24
    2c82:	81 2d       	mov	r24, r1
    2c84:	11 24       	eor	r1, r1
    2c86:	86 95       	lsr	r24
    2c88:	86 95       	lsr	r24
    2c8a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <motor_speed>
				DcMotor_Rotate(forward, motor_speed);
    2c8e:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <motor_speed>
    2c92:	68 2f       	mov	r22, r24
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	0e 94 31 15 	call	0x2a62	; 0x2a62 <DcMotor_Rotate>
				Buzzer_OFF();
    2c9a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <Buzzer_OFF>
    2c9e:	80 cf       	rjmp	.-256    	; 0x2ba0 <main+0x48>
			}
			else if (distance < 100) {
    2ca0:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <distance>
    2ca4:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <distance+0x1>
    2ca8:	84 36       	cpi	r24, 0x64	; 100
    2caa:	91 05       	cpc	r25, r1
    2cac:	70 f4       	brcc	.+28     	; 0x2cca <main+0x172>
				motor_speed = speed / 2;  // 50%
    2cae:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <speed>
    2cb2:	86 95       	lsr	r24
    2cb4:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <motor_speed>
				DcMotor_Rotate(forward, motor_speed);
    2cb8:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <motor_speed>
    2cbc:	68 2f       	mov	r22, r24
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <DcMotor_Rotate>
				Buzzer_OFF();
    2cc4:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <Buzzer_OFF>
    2cc8:	6b cf       	rjmp	.-298    	; 0x2ba0 <main+0x48>
			}
			else {
				motor_speed = speed;
    2cca:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <speed>
    2cce:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <motor_speed>
				DcMotor_Rotate(forward, motor_speed);
    2cd2:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <motor_speed>
    2cd6:	68 2f       	mov	r22, r24
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	0e 94 31 15 	call	0x2a62	; 0x2a62 <DcMotor_Rotate>
				Buzzer_OFF();
    2cde:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <Buzzer_OFF>
    2ce2:	5e cf       	rjmp	.-324    	; 0x2ba0 <main+0x48>
			}
		}
		else {
			motor_speed = speed;
    2ce4:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <speed>
    2ce8:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <motor_speed>
			DcMotor_Rotate(forward, motor_speed);
    2cec:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <motor_speed>
    2cf0:	68 2f       	mov	r22, r24
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	0e 94 31 15 	call	0x2a62	; 0x2a62 <DcMotor_Rotate>
			Buzzer_OFF();
    2cf8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <Buzzer_OFF>
		}

	}
    2cfc:	51 cf       	rjmp	.-350    	; 0x2ba0 <main+0x48>

00002cfe <__vector_1>:
	return 0;
}

ISR(INT0_vec) {
    2cfe:	1f 92       	push	r1
    2d00:	0f 92       	push	r0
    2d02:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2d06:	0f 92       	push	r0
    2d08:	11 24       	eor	r1, r1
    2d0a:	8f 93       	push	r24
    2d0c:	9f 93       	push	r25
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
	acc_enabled ^= 1;
    2d16:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <acc_enabled>
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	89 27       	eor	r24, r25
    2d1e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <acc_enabled>
}
    2d22:	00 00       	nop
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	9f 91       	pop	r25
    2d2a:	8f 91       	pop	r24
    2d2c:	0f 90       	pop	r0
    2d2e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2d32:	0f 90       	pop	r0
    2d34:	1f 90       	pop	r1
    2d36:	18 95       	reti

00002d38 <__udivmodhi4>:
    2d38:	aa 1b       	sub	r26, r26
    2d3a:	bb 1b       	sub	r27, r27
    2d3c:	51 e1       	ldi	r21, 0x11	; 17
    2d3e:	07 c0       	rjmp	.+14     	; 0x2d4e <__udivmodhi4_ep>

00002d40 <__udivmodhi4_loop>:
    2d40:	aa 1f       	adc	r26, r26
    2d42:	bb 1f       	adc	r27, r27
    2d44:	a6 17       	cp	r26, r22
    2d46:	b7 07       	cpc	r27, r23
    2d48:	10 f0       	brcs	.+4      	; 0x2d4e <__udivmodhi4_ep>
    2d4a:	a6 1b       	sub	r26, r22
    2d4c:	b7 0b       	sbc	r27, r23

00002d4e <__udivmodhi4_ep>:
    2d4e:	88 1f       	adc	r24, r24
    2d50:	99 1f       	adc	r25, r25
    2d52:	5a 95       	dec	r21
    2d54:	a9 f7       	brne	.-22     	; 0x2d40 <__udivmodhi4_loop>
    2d56:	80 95       	com	r24
    2d58:	90 95       	com	r25
    2d5a:	bc 01       	movw	r22, r24
    2d5c:	cd 01       	movw	r24, r26
    2d5e:	08 95       	ret

00002d60 <__udivmodsi4>:
    2d60:	a1 e2       	ldi	r26, 0x21	; 33
    2d62:	1a 2e       	mov	r1, r26
    2d64:	aa 1b       	sub	r26, r26
    2d66:	bb 1b       	sub	r27, r27
    2d68:	fd 01       	movw	r30, r26
    2d6a:	0d c0       	rjmp	.+26     	; 0x2d86 <__udivmodsi4_ep>

00002d6c <__udivmodsi4_loop>:
    2d6c:	aa 1f       	adc	r26, r26
    2d6e:	bb 1f       	adc	r27, r27
    2d70:	ee 1f       	adc	r30, r30
    2d72:	ff 1f       	adc	r31, r31
    2d74:	a2 17       	cp	r26, r18
    2d76:	b3 07       	cpc	r27, r19
    2d78:	e4 07       	cpc	r30, r20
    2d7a:	f5 07       	cpc	r31, r21
    2d7c:	20 f0       	brcs	.+8      	; 0x2d86 <__udivmodsi4_ep>
    2d7e:	a2 1b       	sub	r26, r18
    2d80:	b3 0b       	sbc	r27, r19
    2d82:	e4 0b       	sbc	r30, r20
    2d84:	f5 0b       	sbc	r31, r21

00002d86 <__udivmodsi4_ep>:
    2d86:	66 1f       	adc	r22, r22
    2d88:	77 1f       	adc	r23, r23
    2d8a:	88 1f       	adc	r24, r24
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	1a 94       	dec	r1
    2d90:	69 f7       	brne	.-38     	; 0x2d6c <__udivmodsi4_loop>
    2d92:	60 95       	com	r22
    2d94:	70 95       	com	r23
    2d96:	80 95       	com	r24
    2d98:	90 95       	com	r25
    2d9a:	9b 01       	movw	r18, r22
    2d9c:	ac 01       	movw	r20, r24
    2d9e:	bd 01       	movw	r22, r26
    2da0:	cf 01       	movw	r24, r30
    2da2:	08 95       	ret

00002da4 <__divmodsi4>:
    2da4:	05 2e       	mov	r0, r21
    2da6:	97 fb       	bst	r25, 7
    2da8:	1e f4       	brtc	.+6      	; 0x2db0 <__divmodsi4+0xc>
    2daa:	00 94       	com	r0
    2dac:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__negsi2>
    2db0:	57 fd       	sbrc	r21, 7
    2db2:	07 d0       	rcall	.+14     	; 0x2dc2 <__divmodsi4_neg2>
    2db4:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <__udivmodsi4>
    2db8:	07 fc       	sbrc	r0, 7
    2dba:	03 d0       	rcall	.+6      	; 0x2dc2 <__divmodsi4_neg2>
    2dbc:	4e f4       	brtc	.+18     	; 0x2dd0 <__divmodsi4_exit>
    2dbe:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__negsi2>

00002dc2 <__divmodsi4_neg2>:
    2dc2:	50 95       	com	r21
    2dc4:	40 95       	com	r20
    2dc6:	30 95       	com	r19
    2dc8:	21 95       	neg	r18
    2dca:	3f 4f       	sbci	r19, 0xFF	; 255
    2dcc:	4f 4f       	sbci	r20, 0xFF	; 255
    2dce:	5f 4f       	sbci	r21, 0xFF	; 255

00002dd0 <__divmodsi4_exit>:
    2dd0:	08 95       	ret

00002dd2 <__negsi2>:
    2dd2:	90 95       	com	r25
    2dd4:	80 95       	com	r24
    2dd6:	70 95       	com	r23
    2dd8:	61 95       	neg	r22
    2dda:	7f 4f       	sbci	r23, 0xFF	; 255
    2ddc:	8f 4f       	sbci	r24, 0xFF	; 255
    2dde:	9f 4f       	sbci	r25, 0xFF	; 255
    2de0:	08 95       	ret

00002de2 <__muluhisi3>:
    2de2:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__umulhisi3>
    2de6:	a5 9f       	mul	r26, r21
    2de8:	90 0d       	add	r25, r0
    2dea:	b4 9f       	mul	r27, r20
    2dec:	90 0d       	add	r25, r0
    2dee:	a4 9f       	mul	r26, r20
    2df0:	80 0d       	add	r24, r0
    2df2:	91 1d       	adc	r25, r1
    2df4:	11 24       	eor	r1, r1
    2df6:	08 95       	ret

00002df8 <__umulhisi3>:
    2df8:	a2 9f       	mul	r26, r18
    2dfa:	b0 01       	movw	r22, r0
    2dfc:	b3 9f       	mul	r27, r19
    2dfe:	c0 01       	movw	r24, r0
    2e00:	a3 9f       	mul	r26, r19
    2e02:	70 0d       	add	r23, r0
    2e04:	81 1d       	adc	r24, r1
    2e06:	11 24       	eor	r1, r1
    2e08:	91 1d       	adc	r25, r1
    2e0a:	b2 9f       	mul	r27, r18
    2e0c:	70 0d       	add	r23, r0
    2e0e:	81 1d       	adc	r24, r1
    2e10:	11 24       	eor	r1, r1
    2e12:	91 1d       	adc	r25, r1
    2e14:	08 95       	ret

00002e16 <__cmpsf2>:
    2e16:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fp_cmp>
    2e1a:	08 f4       	brcc	.+2      	; 0x2e1e <__cmpsf2+0x8>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	08 95       	ret

00002e20 <__divsf3>:
    2e20:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__divsf3x>
    2e24:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__fp_round>
    2e28:	0e 94 22 18 	call	0x3044	; 0x3044 <__fp_pscB>
    2e2c:	58 f0       	brcs	.+22     	; 0x2e44 <__divsf3+0x24>
    2e2e:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fp_pscA>
    2e32:	40 f0       	brcs	.+16     	; 0x2e44 <__divsf3+0x24>
    2e34:	29 f4       	brne	.+10     	; 0x2e40 <__divsf3+0x20>
    2e36:	5f 3f       	cpi	r21, 0xFF	; 255
    2e38:	29 f0       	breq	.+10     	; 0x2e44 <__divsf3+0x24>
    2e3a:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__fp_inf>
    2e3e:	51 11       	cpse	r21, r1
    2e40:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__fp_szero>
    2e44:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__fp_nan>

00002e48 <__divsf3x>:
    2e48:	0e 94 3a 18 	call	0x3074	; 0x3074 <__fp_split3>
    2e4c:	68 f3       	brcs	.-38     	; 0x2e28 <__divsf3+0x8>

00002e4e <__divsf3_pse>:
    2e4e:	99 23       	and	r25, r25
    2e50:	b1 f3       	breq	.-20     	; 0x2e3e <__divsf3+0x1e>
    2e52:	55 23       	and	r21, r21
    2e54:	91 f3       	breq	.-28     	; 0x2e3a <__divsf3+0x1a>
    2e56:	95 1b       	sub	r25, r21
    2e58:	55 0b       	sbc	r21, r21
    2e5a:	bb 27       	eor	r27, r27
    2e5c:	aa 27       	eor	r26, r26
    2e5e:	62 17       	cp	r22, r18
    2e60:	73 07       	cpc	r23, r19
    2e62:	84 07       	cpc	r24, r20
    2e64:	38 f0       	brcs	.+14     	; 0x2e74 <__divsf3_pse+0x26>
    2e66:	9f 5f       	subi	r25, 0xFF	; 255
    2e68:	5f 4f       	sbci	r21, 0xFF	; 255
    2e6a:	22 0f       	add	r18, r18
    2e6c:	33 1f       	adc	r19, r19
    2e6e:	44 1f       	adc	r20, r20
    2e70:	aa 1f       	adc	r26, r26
    2e72:	a9 f3       	breq	.-22     	; 0x2e5e <__divsf3_pse+0x10>
    2e74:	35 d0       	rcall	.+106    	; 0x2ee0 <__divsf3_pse+0x92>
    2e76:	0e 2e       	mov	r0, r30
    2e78:	3a f0       	brmi	.+14     	; 0x2e88 <__divsf3_pse+0x3a>
    2e7a:	e0 e8       	ldi	r30, 0x80	; 128
    2e7c:	32 d0       	rcall	.+100    	; 0x2ee2 <__divsf3_pse+0x94>
    2e7e:	91 50       	subi	r25, 0x01	; 1
    2e80:	50 40       	sbci	r21, 0x00	; 0
    2e82:	e6 95       	lsr	r30
    2e84:	00 1c       	adc	r0, r0
    2e86:	ca f7       	brpl	.-14     	; 0x2e7a <__divsf3_pse+0x2c>
    2e88:	2b d0       	rcall	.+86     	; 0x2ee0 <__divsf3_pse+0x92>
    2e8a:	fe 2f       	mov	r31, r30
    2e8c:	29 d0       	rcall	.+82     	; 0x2ee0 <__divsf3_pse+0x92>
    2e8e:	66 0f       	add	r22, r22
    2e90:	77 1f       	adc	r23, r23
    2e92:	88 1f       	adc	r24, r24
    2e94:	bb 1f       	adc	r27, r27
    2e96:	26 17       	cp	r18, r22
    2e98:	37 07       	cpc	r19, r23
    2e9a:	48 07       	cpc	r20, r24
    2e9c:	ab 07       	cpc	r26, r27
    2e9e:	b0 e8       	ldi	r27, 0x80	; 128
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <__divsf3_pse+0x56>
    2ea2:	bb 0b       	sbc	r27, r27
    2ea4:	80 2d       	mov	r24, r0
    2ea6:	bf 01       	movw	r22, r30
    2ea8:	ff 27       	eor	r31, r31
    2eaa:	93 58       	subi	r25, 0x83	; 131
    2eac:	5f 4f       	sbci	r21, 0xFF	; 255
    2eae:	3a f0       	brmi	.+14     	; 0x2ebe <__divsf3_pse+0x70>
    2eb0:	9e 3f       	cpi	r25, 0xFE	; 254
    2eb2:	51 05       	cpc	r21, r1
    2eb4:	78 f0       	brcs	.+30     	; 0x2ed4 <__divsf3_pse+0x86>
    2eb6:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__fp_inf>
    2eba:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__fp_szero>
    2ebe:	5f 3f       	cpi	r21, 0xFF	; 255
    2ec0:	e4 f3       	brlt	.-8      	; 0x2eba <__divsf3_pse+0x6c>
    2ec2:	98 3e       	cpi	r25, 0xE8	; 232
    2ec4:	d4 f3       	brlt	.-12     	; 0x2eba <__divsf3_pse+0x6c>
    2ec6:	86 95       	lsr	r24
    2ec8:	77 95       	ror	r23
    2eca:	67 95       	ror	r22
    2ecc:	b7 95       	ror	r27
    2ece:	f7 95       	ror	r31
    2ed0:	9f 5f       	subi	r25, 0xFF	; 255
    2ed2:	c9 f7       	brne	.-14     	; 0x2ec6 <__divsf3_pse+0x78>
    2ed4:	88 0f       	add	r24, r24
    2ed6:	91 1d       	adc	r25, r1
    2ed8:	96 95       	lsr	r25
    2eda:	87 95       	ror	r24
    2edc:	97 f9       	bld	r25, 7
    2ede:	08 95       	ret
    2ee0:	e1 e0       	ldi	r30, 0x01	; 1
    2ee2:	66 0f       	add	r22, r22
    2ee4:	77 1f       	adc	r23, r23
    2ee6:	88 1f       	adc	r24, r24
    2ee8:	bb 1f       	adc	r27, r27
    2eea:	62 17       	cp	r22, r18
    2eec:	73 07       	cpc	r23, r19
    2eee:	84 07       	cpc	r24, r20
    2ef0:	ba 07       	cpc	r27, r26
    2ef2:	20 f0       	brcs	.+8      	; 0x2efc <__divsf3_pse+0xae>
    2ef4:	62 1b       	sub	r22, r18
    2ef6:	73 0b       	sbc	r23, r19
    2ef8:	84 0b       	sbc	r24, r20
    2efa:	ba 0b       	sbc	r27, r26
    2efc:	ee 1f       	adc	r30, r30
    2efe:	88 f7       	brcc	.-30     	; 0x2ee2 <__divsf3_pse+0x94>
    2f00:	e0 95       	com	r30
    2f02:	08 95       	ret

00002f04 <__fixunssfsi>:
    2f04:	0e 94 42 18 	call	0x3084	; 0x3084 <__fp_splitA>
    2f08:	88 f0       	brcs	.+34     	; 0x2f2c <__fixunssfsi+0x28>
    2f0a:	9f 57       	subi	r25, 0x7F	; 127
    2f0c:	98 f0       	brcs	.+38     	; 0x2f34 <__fixunssfsi+0x30>
    2f0e:	b9 2f       	mov	r27, r25
    2f10:	99 27       	eor	r25, r25
    2f12:	b7 51       	subi	r27, 0x17	; 23
    2f14:	b0 f0       	brcs	.+44     	; 0x2f42 <__fixunssfsi+0x3e>
    2f16:	e1 f0       	breq	.+56     	; 0x2f50 <__fixunssfsi+0x4c>
    2f18:	66 0f       	add	r22, r22
    2f1a:	77 1f       	adc	r23, r23
    2f1c:	88 1f       	adc	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	1a f0       	brmi	.+6      	; 0x2f28 <__fixunssfsi+0x24>
    2f22:	ba 95       	dec	r27
    2f24:	c9 f7       	brne	.-14     	; 0x2f18 <__fixunssfsi+0x14>
    2f26:	14 c0       	rjmp	.+40     	; 0x2f50 <__fixunssfsi+0x4c>
    2f28:	b1 30       	cpi	r27, 0x01	; 1
    2f2a:	91 f0       	breq	.+36     	; 0x2f50 <__fixunssfsi+0x4c>
    2f2c:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__fp_zero>
    2f30:	b1 e0       	ldi	r27, 0x01	; 1
    2f32:	08 95       	ret
    2f34:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__fp_zero>
    2f38:	67 2f       	mov	r22, r23
    2f3a:	78 2f       	mov	r23, r24
    2f3c:	88 27       	eor	r24, r24
    2f3e:	b8 5f       	subi	r27, 0xF8	; 248
    2f40:	39 f0       	breq	.+14     	; 0x2f50 <__fixunssfsi+0x4c>
    2f42:	b9 3f       	cpi	r27, 0xF9	; 249
    2f44:	cc f3       	brlt	.-14     	; 0x2f38 <__fixunssfsi+0x34>
    2f46:	86 95       	lsr	r24
    2f48:	77 95       	ror	r23
    2f4a:	67 95       	ror	r22
    2f4c:	b3 95       	inc	r27
    2f4e:	d9 f7       	brne	.-10     	; 0x2f46 <__fixunssfsi+0x42>
    2f50:	3e f4       	brtc	.+14     	; 0x2f60 <__fixunssfsi+0x5c>
    2f52:	90 95       	com	r25
    2f54:	80 95       	com	r24
    2f56:	70 95       	com	r23
    2f58:	61 95       	neg	r22
    2f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f60:	08 95       	ret

00002f62 <__floatunsisf>:
    2f62:	e8 94       	clt
    2f64:	09 c0       	rjmp	.+18     	; 0x2f78 <__floatsisf+0x12>

00002f66 <__floatsisf>:
    2f66:	97 fb       	bst	r25, 7
    2f68:	3e f4       	brtc	.+14     	; 0x2f78 <__floatsisf+0x12>
    2f6a:	90 95       	com	r25
    2f6c:	80 95       	com	r24
    2f6e:	70 95       	com	r23
    2f70:	61 95       	neg	r22
    2f72:	7f 4f       	sbci	r23, 0xFF	; 255
    2f74:	8f 4f       	sbci	r24, 0xFF	; 255
    2f76:	9f 4f       	sbci	r25, 0xFF	; 255
    2f78:	99 23       	and	r25, r25
    2f7a:	a9 f0       	breq	.+42     	; 0x2fa6 <__floatsisf+0x40>
    2f7c:	f9 2f       	mov	r31, r25
    2f7e:	96 e9       	ldi	r25, 0x96	; 150
    2f80:	bb 27       	eor	r27, r27
    2f82:	93 95       	inc	r25
    2f84:	f6 95       	lsr	r31
    2f86:	87 95       	ror	r24
    2f88:	77 95       	ror	r23
    2f8a:	67 95       	ror	r22
    2f8c:	b7 95       	ror	r27
    2f8e:	f1 11       	cpse	r31, r1
    2f90:	f8 cf       	rjmp	.-16     	; 0x2f82 <__floatsisf+0x1c>
    2f92:	fa f4       	brpl	.+62     	; 0x2fd2 <__floatsisf+0x6c>
    2f94:	bb 0f       	add	r27, r27
    2f96:	11 f4       	brne	.+4      	; 0x2f9c <__floatsisf+0x36>
    2f98:	60 ff       	sbrs	r22, 0
    2f9a:	1b c0       	rjmp	.+54     	; 0x2fd2 <__floatsisf+0x6c>
    2f9c:	6f 5f       	subi	r22, 0xFF	; 255
    2f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    2fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa4:	16 c0       	rjmp	.+44     	; 0x2fd2 <__floatsisf+0x6c>
    2fa6:	88 23       	and	r24, r24
    2fa8:	11 f0       	breq	.+4      	; 0x2fae <__floatsisf+0x48>
    2faa:	96 e9       	ldi	r25, 0x96	; 150
    2fac:	11 c0       	rjmp	.+34     	; 0x2fd0 <__floatsisf+0x6a>
    2fae:	77 23       	and	r23, r23
    2fb0:	21 f0       	breq	.+8      	; 0x2fba <__floatsisf+0x54>
    2fb2:	9e e8       	ldi	r25, 0x8E	; 142
    2fb4:	87 2f       	mov	r24, r23
    2fb6:	76 2f       	mov	r23, r22
    2fb8:	05 c0       	rjmp	.+10     	; 0x2fc4 <__floatsisf+0x5e>
    2fba:	66 23       	and	r22, r22
    2fbc:	71 f0       	breq	.+28     	; 0x2fda <__floatsisf+0x74>
    2fbe:	96 e8       	ldi	r25, 0x86	; 134
    2fc0:	86 2f       	mov	r24, r22
    2fc2:	70 e0       	ldi	r23, 0x00	; 0
    2fc4:	60 e0       	ldi	r22, 0x00	; 0
    2fc6:	2a f0       	brmi	.+10     	; 0x2fd2 <__floatsisf+0x6c>
    2fc8:	9a 95       	dec	r25
    2fca:	66 0f       	add	r22, r22
    2fcc:	77 1f       	adc	r23, r23
    2fce:	88 1f       	adc	r24, r24
    2fd0:	da f7       	brpl	.-10     	; 0x2fc8 <__floatsisf+0x62>
    2fd2:	88 0f       	add	r24, r24
    2fd4:	96 95       	lsr	r25
    2fd6:	87 95       	ror	r24
    2fd8:	97 f9       	bld	r25, 7
    2fda:	08 95       	ret

00002fdc <__fp_cmp>:
    2fdc:	99 0f       	add	r25, r25
    2fde:	00 08       	sbc	r0, r0
    2fe0:	55 0f       	add	r21, r21
    2fe2:	aa 0b       	sbc	r26, r26
    2fe4:	e0 e8       	ldi	r30, 0x80	; 128
    2fe6:	fe ef       	ldi	r31, 0xFE	; 254
    2fe8:	16 16       	cp	r1, r22
    2fea:	17 06       	cpc	r1, r23
    2fec:	e8 07       	cpc	r30, r24
    2fee:	f9 07       	cpc	r31, r25
    2ff0:	c0 f0       	brcs	.+48     	; 0x3022 <__fp_cmp+0x46>
    2ff2:	12 16       	cp	r1, r18
    2ff4:	13 06       	cpc	r1, r19
    2ff6:	e4 07       	cpc	r30, r20
    2ff8:	f5 07       	cpc	r31, r21
    2ffa:	98 f0       	brcs	.+38     	; 0x3022 <__fp_cmp+0x46>
    2ffc:	62 1b       	sub	r22, r18
    2ffe:	73 0b       	sbc	r23, r19
    3000:	84 0b       	sbc	r24, r20
    3002:	95 0b       	sbc	r25, r21
    3004:	39 f4       	brne	.+14     	; 0x3014 <__fp_cmp+0x38>
    3006:	0a 26       	eor	r0, r26
    3008:	61 f0       	breq	.+24     	; 0x3022 <__fp_cmp+0x46>
    300a:	23 2b       	or	r18, r19
    300c:	24 2b       	or	r18, r20
    300e:	25 2b       	or	r18, r21
    3010:	21 f4       	brne	.+8      	; 0x301a <__fp_cmp+0x3e>
    3012:	08 95       	ret
    3014:	0a 26       	eor	r0, r26
    3016:	09 f4       	brne	.+2      	; 0x301a <__fp_cmp+0x3e>
    3018:	a1 40       	sbci	r26, 0x01	; 1
    301a:	a6 95       	lsr	r26
    301c:	8f ef       	ldi	r24, 0xFF	; 255
    301e:	81 1d       	adc	r24, r1
    3020:	81 1d       	adc	r24, r1
    3022:	08 95       	ret

00003024 <__fp_inf>:
    3024:	97 f9       	bld	r25, 7
    3026:	9f 67       	ori	r25, 0x7F	; 127
    3028:	80 e8       	ldi	r24, 0x80	; 128
    302a:	70 e0       	ldi	r23, 0x00	; 0
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	08 95       	ret

00003030 <__fp_nan>:
    3030:	9f ef       	ldi	r25, 0xFF	; 255
    3032:	80 ec       	ldi	r24, 0xC0	; 192
    3034:	08 95       	ret

00003036 <__fp_pscA>:
    3036:	00 24       	eor	r0, r0
    3038:	0a 94       	dec	r0
    303a:	16 16       	cp	r1, r22
    303c:	17 06       	cpc	r1, r23
    303e:	18 06       	cpc	r1, r24
    3040:	09 06       	cpc	r0, r25
    3042:	08 95       	ret

00003044 <__fp_pscB>:
    3044:	00 24       	eor	r0, r0
    3046:	0a 94       	dec	r0
    3048:	12 16       	cp	r1, r18
    304a:	13 06       	cpc	r1, r19
    304c:	14 06       	cpc	r1, r20
    304e:	05 06       	cpc	r0, r21
    3050:	08 95       	ret

00003052 <__fp_round>:
    3052:	09 2e       	mov	r0, r25
    3054:	03 94       	inc	r0
    3056:	00 0c       	add	r0, r0
    3058:	11 f4       	brne	.+4      	; 0x305e <__fp_round+0xc>
    305a:	88 23       	and	r24, r24
    305c:	52 f0       	brmi	.+20     	; 0x3072 <__fp_round+0x20>
    305e:	bb 0f       	add	r27, r27
    3060:	40 f4       	brcc	.+16     	; 0x3072 <__fp_round+0x20>
    3062:	bf 2b       	or	r27, r31
    3064:	11 f4       	brne	.+4      	; 0x306a <__fp_round+0x18>
    3066:	60 ff       	sbrs	r22, 0
    3068:	04 c0       	rjmp	.+8      	; 0x3072 <__fp_round+0x20>
    306a:	6f 5f       	subi	r22, 0xFF	; 255
    306c:	7f 4f       	sbci	r23, 0xFF	; 255
    306e:	8f 4f       	sbci	r24, 0xFF	; 255
    3070:	9f 4f       	sbci	r25, 0xFF	; 255
    3072:	08 95       	ret

00003074 <__fp_split3>:
    3074:	57 fd       	sbrc	r21, 7
    3076:	90 58       	subi	r25, 0x80	; 128
    3078:	44 0f       	add	r20, r20
    307a:	55 1f       	adc	r21, r21
    307c:	59 f0       	breq	.+22     	; 0x3094 <__fp_splitA+0x10>
    307e:	5f 3f       	cpi	r21, 0xFF	; 255
    3080:	71 f0       	breq	.+28     	; 0x309e <__fp_splitA+0x1a>
    3082:	47 95       	ror	r20

00003084 <__fp_splitA>:
    3084:	88 0f       	add	r24, r24
    3086:	97 fb       	bst	r25, 7
    3088:	99 1f       	adc	r25, r25
    308a:	61 f0       	breq	.+24     	; 0x30a4 <__fp_splitA+0x20>
    308c:	9f 3f       	cpi	r25, 0xFF	; 255
    308e:	79 f0       	breq	.+30     	; 0x30ae <__fp_splitA+0x2a>
    3090:	87 95       	ror	r24
    3092:	08 95       	ret
    3094:	12 16       	cp	r1, r18
    3096:	13 06       	cpc	r1, r19
    3098:	14 06       	cpc	r1, r20
    309a:	55 1f       	adc	r21, r21
    309c:	f2 cf       	rjmp	.-28     	; 0x3082 <__fp_split3+0xe>
    309e:	46 95       	lsr	r20
    30a0:	f1 df       	rcall	.-30     	; 0x3084 <__fp_splitA>
    30a2:	08 c0       	rjmp	.+16     	; 0x30b4 <__fp_splitA+0x30>
    30a4:	16 16       	cp	r1, r22
    30a6:	17 06       	cpc	r1, r23
    30a8:	18 06       	cpc	r1, r24
    30aa:	99 1f       	adc	r25, r25
    30ac:	f1 cf       	rjmp	.-30     	; 0x3090 <__fp_splitA+0xc>
    30ae:	86 95       	lsr	r24
    30b0:	71 05       	cpc	r23, r1
    30b2:	61 05       	cpc	r22, r1
    30b4:	08 94       	sec
    30b6:	08 95       	ret

000030b8 <__fp_zero>:
    30b8:	e8 94       	clt

000030ba <__fp_szero>:
    30ba:	bb 27       	eor	r27, r27
    30bc:	66 27       	eor	r22, r22
    30be:	77 27       	eor	r23, r23
    30c0:	cb 01       	movw	r24, r22
    30c2:	97 f9       	bld	r25, 7
    30c4:	08 95       	ret

000030c6 <__gesf2>:
    30c6:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fp_cmp>
    30ca:	08 f4       	brcc	.+2      	; 0x30ce <__gesf2+0x8>
    30cc:	8f ef       	ldi	r24, 0xFF	; 255
    30ce:	08 95       	ret

000030d0 <__mulsf3>:
    30d0:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__mulsf3x>
    30d4:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__fp_round>
    30d8:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fp_pscA>
    30dc:	38 f0       	brcs	.+14     	; 0x30ec <__mulsf3+0x1c>
    30de:	0e 94 22 18 	call	0x3044	; 0x3044 <__fp_pscB>
    30e2:	20 f0       	brcs	.+8      	; 0x30ec <__mulsf3+0x1c>
    30e4:	95 23       	and	r25, r21
    30e6:	11 f0       	breq	.+4      	; 0x30ec <__mulsf3+0x1c>
    30e8:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__fp_inf>
    30ec:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__fp_nan>
    30f0:	11 24       	eor	r1, r1
    30f2:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__fp_szero>

000030f6 <__mulsf3x>:
    30f6:	0e 94 3a 18 	call	0x3074	; 0x3074 <__fp_split3>
    30fa:	70 f3       	brcs	.-36     	; 0x30d8 <__mulsf3+0x8>

000030fc <__mulsf3_pse>:
    30fc:	95 9f       	mul	r25, r21
    30fe:	c1 f3       	breq	.-16     	; 0x30f0 <__mulsf3+0x20>
    3100:	95 0f       	add	r25, r21
    3102:	50 e0       	ldi	r21, 0x00	; 0
    3104:	55 1f       	adc	r21, r21
    3106:	62 9f       	mul	r22, r18
    3108:	f0 01       	movw	r30, r0
    310a:	72 9f       	mul	r23, r18
    310c:	bb 27       	eor	r27, r27
    310e:	f0 0d       	add	r31, r0
    3110:	b1 1d       	adc	r27, r1
    3112:	63 9f       	mul	r22, r19
    3114:	aa 27       	eor	r26, r26
    3116:	f0 0d       	add	r31, r0
    3118:	b1 1d       	adc	r27, r1
    311a:	aa 1f       	adc	r26, r26
    311c:	64 9f       	mul	r22, r20
    311e:	66 27       	eor	r22, r22
    3120:	b0 0d       	add	r27, r0
    3122:	a1 1d       	adc	r26, r1
    3124:	66 1f       	adc	r22, r22
    3126:	82 9f       	mul	r24, r18
    3128:	22 27       	eor	r18, r18
    312a:	b0 0d       	add	r27, r0
    312c:	a1 1d       	adc	r26, r1
    312e:	62 1f       	adc	r22, r18
    3130:	73 9f       	mul	r23, r19
    3132:	b0 0d       	add	r27, r0
    3134:	a1 1d       	adc	r26, r1
    3136:	62 1f       	adc	r22, r18
    3138:	83 9f       	mul	r24, r19
    313a:	a0 0d       	add	r26, r0
    313c:	61 1d       	adc	r22, r1
    313e:	22 1f       	adc	r18, r18
    3140:	74 9f       	mul	r23, r20
    3142:	33 27       	eor	r19, r19
    3144:	a0 0d       	add	r26, r0
    3146:	61 1d       	adc	r22, r1
    3148:	23 1f       	adc	r18, r19
    314a:	84 9f       	mul	r24, r20
    314c:	60 0d       	add	r22, r0
    314e:	21 1d       	adc	r18, r1
    3150:	82 2f       	mov	r24, r18
    3152:	76 2f       	mov	r23, r22
    3154:	6a 2f       	mov	r22, r26
    3156:	11 24       	eor	r1, r1
    3158:	9f 57       	subi	r25, 0x7F	; 127
    315a:	50 40       	sbci	r21, 0x00	; 0
    315c:	9a f0       	brmi	.+38     	; 0x3184 <__mulsf3_pse+0x88>
    315e:	f1 f0       	breq	.+60     	; 0x319c <__mulsf3_pse+0xa0>
    3160:	88 23       	and	r24, r24
    3162:	4a f0       	brmi	.+18     	; 0x3176 <__mulsf3_pse+0x7a>
    3164:	ee 0f       	add	r30, r30
    3166:	ff 1f       	adc	r31, r31
    3168:	bb 1f       	adc	r27, r27
    316a:	66 1f       	adc	r22, r22
    316c:	77 1f       	adc	r23, r23
    316e:	88 1f       	adc	r24, r24
    3170:	91 50       	subi	r25, 0x01	; 1
    3172:	50 40       	sbci	r21, 0x00	; 0
    3174:	a9 f7       	brne	.-22     	; 0x3160 <__mulsf3_pse+0x64>
    3176:	9e 3f       	cpi	r25, 0xFE	; 254
    3178:	51 05       	cpc	r21, r1
    317a:	80 f0       	brcs	.+32     	; 0x319c <__mulsf3_pse+0xa0>
    317c:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__fp_inf>
    3180:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__fp_szero>
    3184:	5f 3f       	cpi	r21, 0xFF	; 255
    3186:	e4 f3       	brlt	.-8      	; 0x3180 <__mulsf3_pse+0x84>
    3188:	98 3e       	cpi	r25, 0xE8	; 232
    318a:	d4 f3       	brlt	.-12     	; 0x3180 <__mulsf3_pse+0x84>
    318c:	86 95       	lsr	r24
    318e:	77 95       	ror	r23
    3190:	67 95       	ror	r22
    3192:	b7 95       	ror	r27
    3194:	f7 95       	ror	r31
    3196:	e7 95       	ror	r30
    3198:	9f 5f       	subi	r25, 0xFF	; 255
    319a:	c1 f7       	brne	.-16     	; 0x318c <__mulsf3_pse+0x90>
    319c:	fe 2b       	or	r31, r30
    319e:	88 0f       	add	r24, r24
    31a0:	91 1d       	adc	r25, r1
    31a2:	96 95       	lsr	r25
    31a4:	87 95       	ror	r24
    31a6:	97 f9       	bld	r25, 7
    31a8:	08 95       	ret

000031aa <_exit>:
    31aa:	f8 94       	cli

000031ac <__stop_program>:
    31ac:	ff cf       	rjmp	.-2      	; 0x31ac <__stop_program>
